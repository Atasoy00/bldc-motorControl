
6Steps_P-NUCLEO-IHM003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b800  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800b9d8  0800b9d8  0001b9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba40  0800ba40  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba40  0800ba40  0001ba40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba48  0800ba48  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba48  0800ba48  0001ba48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba4c  0800ba4c  0001ba4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800ba50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  20000148  0800bb98  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  0800bb98  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_line   00028387  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00027e53  00000000  00000000  000484ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050b7  00000000  00000000  00070352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c28  00000000  00000000  00075410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f8582  00000000  00000000  00077038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001a30  00000000  00000000  0016f5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aa38  00000000  00000000  00170ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019ba28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000763c  00000000  00000000  0019ba78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000148 	.word	0x20000148
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b9c0 	.word	0x0800b9c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000014c 	.word	0x2000014c
 8000214:	0800b9c0 	.word	0x0800b9c0

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b974 	b.w	8000b34 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468e      	mov	lr, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d14d      	bne.n	800090e <__udivmoddi4+0xaa>
 8000872:	428a      	cmp	r2, r1
 8000874:	4694      	mov	ip, r2
 8000876:	d969      	bls.n	800094c <__udivmoddi4+0xe8>
 8000878:	fab2 f282 	clz	r2, r2
 800087c:	b152      	cbz	r2, 8000894 <__udivmoddi4+0x30>
 800087e:	fa01 f302 	lsl.w	r3, r1, r2
 8000882:	f1c2 0120 	rsb	r1, r2, #32
 8000886:	fa20 f101 	lsr.w	r1, r0, r1
 800088a:	fa0c fc02 	lsl.w	ip, ip, r2
 800088e:	ea41 0e03 	orr.w	lr, r1, r3
 8000892:	4094      	lsls	r4, r2
 8000894:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000898:	0c21      	lsrs	r1, r4, #16
 800089a:	fbbe f6f8 	udiv	r6, lr, r8
 800089e:	fa1f f78c 	uxth.w	r7, ip
 80008a2:	fb08 e316 	mls	r3, r8, r6, lr
 80008a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008aa:	fb06 f107 	mul.w	r1, r6, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ba:	f080 811f 	bcs.w	8000afc <__udivmoddi4+0x298>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 811c 	bls.w	8000afc <__udivmoddi4+0x298>
 80008c4:	3e02      	subs	r6, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	b2a4      	uxth	r4, r4
 80008cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008d0:	fb08 3310 	mls	r3, r8, r0, r3
 80008d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d8:	fb00 f707 	mul.w	r7, r0, r7
 80008dc:	42a7      	cmp	r7, r4
 80008de:	d90a      	bls.n	80008f6 <__udivmoddi4+0x92>
 80008e0:	eb1c 0404 	adds.w	r4, ip, r4
 80008e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e8:	f080 810a 	bcs.w	8000b00 <__udivmoddi4+0x29c>
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	f240 8107 	bls.w	8000b00 <__udivmoddi4+0x29c>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008fa:	1be4      	subs	r4, r4, r7
 80008fc:	2600      	movs	r6, #0
 80008fe:	b11d      	cbz	r5, 8000908 <__udivmoddi4+0xa4>
 8000900:	40d4      	lsrs	r4, r2
 8000902:	2300      	movs	r3, #0
 8000904:	e9c5 4300 	strd	r4, r3, [r5]
 8000908:	4631      	mov	r1, r6
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d909      	bls.n	8000926 <__udivmoddi4+0xc2>
 8000912:	2d00      	cmp	r5, #0
 8000914:	f000 80ef 	beq.w	8000af6 <__udivmoddi4+0x292>
 8000918:	2600      	movs	r6, #0
 800091a:	e9c5 0100 	strd	r0, r1, [r5]
 800091e:	4630      	mov	r0, r6
 8000920:	4631      	mov	r1, r6
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	fab3 f683 	clz	r6, r3
 800092a:	2e00      	cmp	r6, #0
 800092c:	d14a      	bne.n	80009c4 <__udivmoddi4+0x160>
 800092e:	428b      	cmp	r3, r1
 8000930:	d302      	bcc.n	8000938 <__udivmoddi4+0xd4>
 8000932:	4282      	cmp	r2, r0
 8000934:	f200 80f9 	bhi.w	8000b2a <__udivmoddi4+0x2c6>
 8000938:	1a84      	subs	r4, r0, r2
 800093a:	eb61 0303 	sbc.w	r3, r1, r3
 800093e:	2001      	movs	r0, #1
 8000940:	469e      	mov	lr, r3
 8000942:	2d00      	cmp	r5, #0
 8000944:	d0e0      	beq.n	8000908 <__udivmoddi4+0xa4>
 8000946:	e9c5 4e00 	strd	r4, lr, [r5]
 800094a:	e7dd      	b.n	8000908 <__udivmoddi4+0xa4>
 800094c:	b902      	cbnz	r2, 8000950 <__udivmoddi4+0xec>
 800094e:	deff      	udf	#255	; 0xff
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	2a00      	cmp	r2, #0
 8000956:	f040 8092 	bne.w	8000a7e <__udivmoddi4+0x21a>
 800095a:	eba1 010c 	sub.w	r1, r1, ip
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2601      	movs	r6, #1
 8000968:	0c20      	lsrs	r0, r4, #16
 800096a:	fbb1 f3f7 	udiv	r3, r1, r7
 800096e:	fb07 1113 	mls	r1, r7, r3, r1
 8000972:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000976:	fb0e f003 	mul.w	r0, lr, r3
 800097a:	4288      	cmp	r0, r1
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x12c>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f103 38ff 	add.w	r8, r3, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x12a>
 8000988:	4288      	cmp	r0, r1
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2c0>
 800098e:	4643      	mov	r3, r8
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f7 	udiv	r0, r1, r7
 8000998:	fb07 1110 	mls	r1, r7, r0, r1
 800099c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x156>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x154>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2ca>
 80009b8:	4608      	mov	r0, r1
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009c2:	e79c      	b.n	80008fe <__udivmoddi4+0x9a>
 80009c4:	f1c6 0720 	rsb	r7, r6, #32
 80009c8:	40b3      	lsls	r3, r6
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa20 f407 	lsr.w	r4, r0, r7
 80009d6:	fa01 f306 	lsl.w	r3, r1, r6
 80009da:	431c      	orrs	r4, r3
 80009dc:	40f9      	lsrs	r1, r7
 80009de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e2:	fa00 f306 	lsl.w	r3, r0, r6
 80009e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009ea:	0c20      	lsrs	r0, r4, #16
 80009ec:	fa1f fe8c 	uxth.w	lr, ip
 80009f0:	fb09 1118 	mls	r1, r9, r8, r1
 80009f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009f8:	fb08 f00e 	mul.w	r0, r8, lr
 80009fc:	4288      	cmp	r0, r1
 80009fe:	fa02 f206 	lsl.w	r2, r2, r6
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b8>
 8000a04:	eb1c 0101 	adds.w	r1, ip, r1
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2bc>
 8000a10:	4288      	cmp	r0, r1
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2bc>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4461      	add	r1, ip
 8000a1c:	1a09      	subs	r1, r1, r0
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a24:	fb09 1110 	mls	r1, r9, r0, r1
 8000a28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a30:	458e      	cmp	lr, r1
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1e2>
 8000a34:	eb1c 0101 	adds.w	r1, ip, r1
 8000a38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2b4>
 8000a3e:	458e      	cmp	lr, r1
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2b4>
 8000a42:	3802      	subs	r0, #2
 8000a44:	4461      	add	r1, ip
 8000a46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a4e:	eba1 010e 	sub.w	r1, r1, lr
 8000a52:	42a1      	cmp	r1, r4
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46a6      	mov	lr, r4
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x2a4>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x2a0>
 8000a5c:	b15d      	cbz	r5, 8000a76 <__udivmoddi4+0x212>
 8000a5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a62:	eb61 010e 	sbc.w	r1, r1, lr
 8000a66:	fa01 f707 	lsl.w	r7, r1, r7
 8000a6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a6e:	40f1      	lsrs	r1, r6
 8000a70:	431f      	orrs	r7, r3
 8000a72:	e9c5 7100 	strd	r7, r1, [r5]
 8000a76:	2600      	movs	r6, #0
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	f1c2 0320 	rsb	r3, r2, #32
 8000a82:	40d8      	lsrs	r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	fa21 f303 	lsr.w	r3, r1, r3
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	4301      	orrs	r1, r0
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000aa0:	0c0b      	lsrs	r3, r1, #16
 8000aa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x260>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b8>
 8000abc:	429e      	cmp	r6, r3
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b8>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	b289      	uxth	r1, r1
 8000ac8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000acc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ad0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x28a>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000aea:	3e02      	subs	r6, #2
 8000aec:	4461      	add	r1, ip
 8000aee:	1ac9      	subs	r1, r1, r3
 8000af0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0x104>
 8000af6:	462e      	mov	r6, r5
 8000af8:	4628      	mov	r0, r5
 8000afa:	e705      	b.n	8000908 <__udivmoddi4+0xa4>
 8000afc:	4606      	mov	r6, r0
 8000afe:	e6e3      	b.n	80008c8 <__udivmoddi4+0x64>
 8000b00:	4618      	mov	r0, r3
 8000b02:	e6f8      	b.n	80008f6 <__udivmoddi4+0x92>
 8000b04:	454b      	cmp	r3, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f8>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f8>
 8000b14:	4646      	mov	r6, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x28a>
 8000b18:	4620      	mov	r0, r4
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1e2>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b8>
 8000b24:	3b02      	subs	r3, #2
 8000b26:	4461      	add	r1, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x12c>
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	e709      	b.n	8000942 <__udivmoddi4+0xde>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x156>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490e      	ldr	r1, [pc, #56]	; (8000b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0b      	ldr	r4, [pc, #44]	; (8000b84 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b62:	f004 f903 	bl	8004d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f00a feff 	bl	800b968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b6a:	f002 fba5 	bl	80032b8 <main>

08000b6e <LoopForever>:

LoopForever:
    b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
  ldr   r0, =_estack
 8000b70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8000b7c:	0800ba50 	.word	0x0800ba50
  ldr r2, =_sbss
 8000b80:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8000b84:	2000068c 	.word	0x2000068c

08000b88 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <COMP1_2_3_IRQHandler>

08000b8a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b087      	sub	sp, #28
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3330      	adds	r3, #48	; 0x30
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	f003 030c 	and.w	r3, r3, #12
 8000ba6:	4413      	add	r3, r2
 8000ba8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	f003 031f 	and.w	r3, r3, #31
 8000bb4:	211f      	movs	r1, #31
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	0e9b      	lsrs	r3, r3, #26
 8000bc2:	f003 011f 	and.w	r1, r3, #31
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	f003 031f 	and.w	r3, r3, #31
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bd6:	bf00      	nop
 8000bd8:	371c      	adds	r7, #28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b087      	sub	sp, #28
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3314      	adds	r3, #20
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	0e5b      	lsrs	r3, r3, #25
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	4413      	add	r3, r2
 8000c00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	0d1b      	lsrs	r3, r3, #20
 8000c0a:	f003 031f 	and.w	r3, r3, #31
 8000c0e:	2107      	movs	r1, #7
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	0d1b      	lsrs	r3, r3, #20
 8000c1c:	f003 031f 	and.w	r3, r3, #31
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	431a      	orrs	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c2c:	bf00      	nop
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000c4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000c54:	4313      	orrs	r3, r2
 8000c56:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c7e:	d101      	bne.n	8000c84 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e000      	b.n	8000c86 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ca2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ca6:	f043 0204 	orr.w	r2, r3, #4
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000cca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cce:	f043 0210 	orr.w	r2, r3, #16
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d101      	bne.n	8000cfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e000      	b.n	8000cfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_ADC_REG_IsStopConversionOngoing>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no command of conversion stop is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	2b10      	cmp	r3, #16
 8000d1a:	d101      	bne.n	8000d20 <LL_ADC_REG_IsStopConversionOngoing+0x18>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <LL_ADC_REG_IsStopConversionOngoing+0x1a>
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f043 0201 	orr.w	r2, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <LL_TIM_GetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounterMode(TIM_TypeDef *TIMx)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  uint32_t counter_mode;

  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000d5e:	60fb      	str	r3, [r7, #12]

  if (counter_mode == 0U)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d104      	bne.n	8000d70 <LL_TIM_GetCounterMode+0x22>
  {
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	60fb      	str	r3, [r7, #12]
  }

  return counter_mode;
 8000d70:	68fb      	ldr	r3, [r7, #12]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a1a      	ldr	r2, [r3, #32]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	621a      	str	r2, [r3, #32]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e34:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <LL_TIM_GenerateEvent_COM>:
  * @rmtoll EGR          COMG          LL_TIM_GenerateEvent_COM
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	f043 0220 	orr.w	r2, r3, #32
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	615a      	str	r2, [r3, #20]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	619a      	str	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_ADC_ConvCpltCallback>:
  * @brief     ADC conversion complete callback
  * @param[in] hadc ADC handle pointer
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* For several motors, this function should be modified to select the motor device and the timer pointer according to the ADC channel used */
    MC_Core_ProcessAdcMeasurement(&Motor_Device1, (uint32_t*)hadc, (uint16_t) __HAL_TIM_GET_COUNTER((TIM_HandleTypeDef *) ((&Motor_Device1)->plf_timer)), (uint16_t) HAL_ADC_GetValue(hadc));
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x30>)
 8000eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	b29c      	uxth	r4, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f004 fd7d 	bl	80059b2 <HAL_ADC_GetValue>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	4622      	mov	r2, r4
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x30>)
 8000ec2:	f001 f9a4 	bl	800220e <MC_Core_ProcessAdcMeasurement>
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000164 	.word	0x20000164

08000ed4 <HAL_SYSTICK_Callback>:
  * @brief  Systick callback
  * @param[in]  None
  * @retval None
  */
void HAL_SYSTICK_Callback()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* For several motors, this function should be modified to call MC_Core_MediumFrequencyTask for each motor device */
  MC_Core_MediumFrequencyTask(&Motor_Device1);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <HAL_SYSTICK_Callback+0x10>)
 8000eda:	f001 f875 	bl	8001fc8 <MC_Core_MediumFrequencyTask>
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000164 	.word	0x20000164

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief     timer period elapsed callback
  * @param[in] htim TIM handle pointer
  * @retval    None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* For several motors, this function should be modified to call MC_Core_NextStep for each motor device */
  MC_Core_NextStep(&Motor_Device1, 0);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000ef4:	f001 fae7 	bl	80024c6 <MC_Core_NextStep>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000164 	.word	0x20000164

08000f04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXT callback
  * @param  GPIO_Pin
  * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == Motor_Device1.button_user.gpio_pin)
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f10:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 8000f14:	88fa      	ldrh	r2, [r7, #6]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d116      	bne.n	8000f48 <HAL_GPIO_EXTI_Callback+0x44>
  {
    if (Motor_Device1.button_user.enabled != 0)
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f1c:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d011      	beq.n	8000f48 <HAL_GPIO_EXTI_Callback+0x44>
    {
      MC_Status_t status;
      status = MC_Core_GetStatus(&Motor_Device1);
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f26:	f000 fe6f 	bl	8001c08 <MC_Core_GetStatus>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]
      if (status == MC_RUN)
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d103      	bne.n	8000f3c <HAL_GPIO_EXTI_Callback+0x38>
      {
        MC_Core_Stop(&Motor_Device1);
 8000f34:	4806      	ldr	r0, [pc, #24]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f36:	f001 fdef 	bl	8002b18 <MC_Core_Stop>
      {
        MC_Core_Start(&Motor_Device1);
      }
    }
  }
}
 8000f3a:	e005      	b.n	8000f48 <HAL_GPIO_EXTI_Callback+0x44>
      else if (status == MC_STOP)
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d102      	bne.n	8000f48 <HAL_GPIO_EXTI_Callback+0x44>
        MC_Core_Start(&Motor_Device1);
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f44:	f001 fd8e 	bl	8002a64 <MC_Core_Start>
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000164 	.word	0x20000164

08000f54 <HAL_IncTick>:
  * @brief This function is called to increment the time base of each motor
  *        device.
  * @retval None
  */
void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  Motor_Device1.uw_tick_cnt++;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x1c>)
 8000f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f5e:	3301      	adds	r3, #1
 8000f60:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <HAL_IncTick+0x1c>)
 8000f62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20000164 	.word	0x20000164

08000f74 <MC_Core_LL_CalibrateAdc>:
  * @brief  MC_Core_LL_CalibrateAdc
  * @param[in] pAdc pointer to the ADC
  * @retval None
  */
void MC_Core_LL_CalibrateAdc(uint32_t *pAdc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  LL_ADC_StartCalibration(((ADC_HandleTypeDef *)pAdc)->Instance, LL_ADC_SINGLE_ENDED);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	217f      	movs	r1, #127	; 0x7f
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fe58 	bl	8000c38 <LL_ADC_StartCalibration>
  while (LL_ADC_IsCalibrationOnGoing(((ADC_HandleTypeDef *)pAdc)->Instance));
 8000f88:	bf00      	nop
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fe6b 	bl	8000c6a <LL_ADC_IsCalibrationOnGoing>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f7      	bne.n	8000f8a <MC_Core_LL_CalibrateAdc+0x16>
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <MC_Core_LL_ConfigureCommutationEvent>:
  * @param[in] pHfTimer pointer to the HF timer
  * @param[in] pLfTimer pointer to the LF timer acting as the hall interface
  * @retval None
  */
void MC_Core_LL_ConfigureCommutationEvent(uint32_t *pHfTimer, uint32_t *pLfTimer)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  HAL_TIMEx_ConfigCommutEvent((TIM_HandleTypeDef *) pHfTimer, TIM_TS_NONE, TIM_COMMUTATION_SOFTWARE);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f009 f813 	bl	8009fe0 <HAL_TIMEx_ConfigCommutEvent>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <MC_Core_LL_DisableIrq>:
/**
  * @brief  MC_Core_LL_DisableIrq
  * @retval None
  */
void MC_Core_LL_DisableIrq(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc6:	b672      	cpsid	i
}
 8000fc8:	bf00      	nop
  __disable_irq();
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <MC_Core_LL_EnableInputsHfPwmsStep14>:
  * @note   This function is used for 3PWM interface
  *         For several motors, this function should be modified to control different GPIOs according to the MotorDeviceId
  * @retval None
  */
void MC_Core_LL_EnableInputsHfPwmsStep14(uint8_t MotorDeviceId)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  LL_GPIO_ResetOutputPin(ENU_GPIO_Port, ENU_Pin|ENV_Pin|ENW_Pin);
 8000fde:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <MC_Core_LL_EnableInputsHfPwmsStep14+0x28>)
 8000fe4:	f7ff ff4e 	bl	8000e84 <LL_GPIO_ResetOutputPin>
  LL_GPIO_SetOutputPin(ENU_GPIO_Port, ENU_Pin|ENV_Pin);
 8000fe8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <MC_Core_LL_EnableInputsHfPwmsStep14+0x28>)
 8000fee:	f7ff ff3b 	bl	8000e68 <LL_GPIO_SetOutputPin>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	48000400 	.word	0x48000400

08001000 <MC_Core_LL_EnableInputsHfPwmsStep25>:
  * @note   This function is used for 3PWM interface
  *         For several motors, this function should be modified to control different GPIOs according to the MotorDeviceId
  * @retval None
  */
void MC_Core_LL_EnableInputsHfPwmsStep25(uint8_t MotorDeviceId)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  LL_GPIO_ResetOutputPin(ENU_GPIO_Port, ENU_Pin|ENV_Pin|ENW_Pin);
 800100a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MC_Core_LL_EnableInputsHfPwmsStep25+0x28>)
 8001010:	f7ff ff38 	bl	8000e84 <LL_GPIO_ResetOutputPin>
  LL_GPIO_SetOutputPin(ENU_GPIO_Port, ENU_Pin|ENW_Pin);
 8001014:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <MC_Core_LL_EnableInputsHfPwmsStep25+0x28>)
 800101a:	f7ff ff25 	bl	8000e68 <LL_GPIO_SetOutputPin>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	48000400 	.word	0x48000400

0800102c <MC_Core_LL_EnableInputsHfPwmsStep36>:
  * @note   This function is used for 3PWM interface
  *         For several motors, this function should be modified to control different GPIOs according to the MotorDeviceId
  * @retval None
  */
void MC_Core_LL_EnableInputsHfPwmsStep36(uint8_t MotorDeviceId)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  LL_GPIO_ResetOutputPin(ENU_GPIO_Port, ENU_Pin|ENV_Pin|ENW_Pin);
 8001036:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <MC_Core_LL_EnableInputsHfPwmsStep36+0x28>)
 800103c:	f7ff ff22 	bl	8000e84 <LL_GPIO_ResetOutputPin>
  LL_GPIO_SetOutputPin(ENU_GPIO_Port, ENV_Pin|ENW_Pin);
 8001040:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <MC_Core_LL_EnableInputsHfPwmsStep36+0x28>)
 8001046:	f7ff ff0f 	bl	8000e68 <LL_GPIO_SetOutputPin>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	48000400 	.word	0x48000400

08001058 <MC_Core_LL_EnableIrq>:
/**
  * @brief  MC_Core_LL_EnableIrq
  * @retval None
  */
void MC_Core_LL_EnableIrq(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800105c:	b662      	cpsie	i
}
 800105e:	bf00      	nop
  __enable_irq();
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <MC_Core_LL_Error>:
  * @brief  MC_Core_LL_Error
  * @param[in] pMc pointer to the motor control handle
  * @retval None
  */
void MC_Core_LL_Error(MC_Handle_t *pMc)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  MC_Core_Stop(pMc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f001 fd50 	bl	8002b18 <MC_Core_Stop>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MC_Core_LL_GenerateComEvent>:
  * @brief  MC_Core_LL_GenerateComEvent
  * @param[in] pHfTimer pointer to the HF timer
  * @retval None
  */
void MC_Core_LL_GenerateComEvent(uint32_t *pHfTimer)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  LL_TIM_GenerateEvent_COM(((TIM_HandleTypeDef *) pHfTimer)->Instance);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fedb 	bl	8000e48 <LL_TIM_GenerateEvent_COM>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <MC_Core_LL_GetGateDrivingPwmFrequency>:
/**
  * @brief  MC_Core_LL_GetGateDrivingPwmFrequency
  * @retval Gate driving pwm frequency
  */
uint32_t MC_Core_LL_GetGateDrivingPwmFrequency(uint32_t *pHfTimer)
{
 800109a:	b5b0      	push	{r4, r5, r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  uint32_t gate_driving_pwm_frequency = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  uint8_t counter_mode;
  gate_driving_pwm_frequency = (MC_Core_LL_GetSysClockFrequency()) / ((MC_Core_LL_GetTimerPeriod((uint32_t *) pHfTimer) + 1) * (MC_Core_LL_GetTimerPrescaler((uint32_t *) pHfTimer) + 1));
 80010a6:	f000 f825 	bl	80010f4 <MC_Core_LL_GetSysClockFrequency>
 80010aa:	4605      	mov	r5, r0
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f84d 	bl	800114c <MC_Core_LL_GetTimerPeriod>
 80010b2:	4603      	mov	r3, r0
 80010b4:	1c5c      	adds	r4, r3, #1
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f856 	bl	8001168 <MC_Core_LL_GetTimerPrescaler>
 80010bc:	4603      	mov	r3, r0
 80010be:	3301      	adds	r3, #1
 80010c0:	fb04 f303 	mul.w	r3, r4, r3
 80010c4:	fbb5 f3f3 	udiv	r3, r5, r3
 80010c8:	60fb      	str	r3, [r7, #12]
  counter_mode = LL_TIM_GetCounterMode(((TIM_HandleTypeDef *) pHfTimer)->Instance);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fe3d 	bl	8000d4e <LL_TIM_GetCounterMode>
 80010d4:	4603      	mov	r3, r0
 80010d6:	72fb      	strb	r3, [r7, #11]
  if ((counter_mode != LL_TIM_COUNTERMODE_UP) && (counter_mode != LL_TIM_COUNTERMODE_DOWN))
 80010d8:	7afb      	ldrb	r3, [r7, #11]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <MC_Core_LL_GetGateDrivingPwmFrequency+0x50>
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	2b10      	cmp	r3, #16
 80010e2:	d002      	beq.n	80010ea <MC_Core_LL_GetGateDrivingPwmFrequency+0x50>
  {
    gate_driving_pwm_frequency >>= 1;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
  }
  return gate_driving_pwm_frequency;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bdb0      	pop	{r4, r5, r7, pc}

080010f4 <MC_Core_LL_GetSysClockFrequency>:
/**
  * @brief  MC_Core_LL_GetSysClockFrequency
  * @retval System clock frequency
  */
uint32_t MC_Core_LL_GetSysClockFrequency(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  return (uint32_t) HAL_RCC_GetSysClockFreq();
 80010f8:	f007 f9a6 	bl	8008448 <HAL_RCC_GetSysClockFreq>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <MC_Core_LL_GetTemperatureCalibrationData>:
  * @brief  MC_Core_LL_GetTemperatureCalibrationData
  * @param[in] pMc pointer to the motor control handle
  * @retval None
  */
void MC_Core_LL_GetTemperatureCalibrationData(MC_Handle_t *pMc)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  pMc->adc_user.ts_cal_1_temp_deg_c = IHM16M1_NTC_TEMP_1_C;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2219      	movs	r2, #25
 8001110:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
  pMc->adc_user.ts_cal_2_temp_deg_c = IHM16M1_NTC_TEMP_2_C;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2232      	movs	r2, #50	; 0x32
 8001118:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
  pMc->adc_user.ts_cal_1 = IHM16M1_TS_CAL_1;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f44f 7233 	mov.w	r2, #716	; 0x2cc
 8001122:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  pMc->adc_user.ts_cal_2 = IHM16M1_TS_CAL_2;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f240 620b 	movw	r2, #1547	; 0x60b
 800112c:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  pMc->adc_user.vrefint_cal = *((uint16_t*) (VREFINT_CAL_ADDR));
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <MC_Core_LL_GetTemperatureCalibrationData+0x44>)
 8001132:	881a      	ldrh	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	1fff75aa 	.word	0x1fff75aa

0800114c <MC_Core_LL_GetTimerPeriod>:
  * @brief  MC_Core_LL_GetTimerPeriod
  * @param[in] pTimer pointer to relevant timer
  * @retval timer period
  */
uint16_t MC_Core_LL_GetTimerPeriod(uint32_t *pTimer)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint16_t) __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *) pTimer);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115a:	b29b      	uxth	r3, r3
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <MC_Core_LL_GetTimerPrescaler>:
  * @brief  MC_Core_LL_GetTimerPrescaler
  * @param[in] pTimer pointer to relevant timer
  * @retval timer period
  */
uint16_t MC_Core_LL_GetTimerPrescaler(uint32_t *pTimer)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  return (uint16_t) LL_TIM_GetPrescaler(((TIM_HandleTypeDef *) pTimer)->Instance);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fe02 	bl	8000d7e <LL_TIM_GetPrescaler>
 800117a:	4603      	mov	r3, r0
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <MC_Core_LL_ResetBemfGpio>:
  * @brief  MC_Core_LL_ResetBemfGpio
  * @param[in] MotorDeviceId Motor device id
  * @retval None
  */
void MC_Core_LL_ResetBemfGpio(uint8_t MotorDeviceId)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  /* For several motors, this function should be modified to control a different GPIO according to the MotorDeviceId */
  HAL_GPIO_WritePin(GPIO_BEMF_GPIO_Port, GPIO_BEMF_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <MC_Core_LL_ResetBemfGpio+0x20>)
 800119a:	f006 fc03 	bl	80079a4 <HAL_GPIO_WritePin>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	48000800 	.word	0x48000800

080011ac <MC_Core_LL_SetBemfGpio>:
  * @brief  MC_Core_LL_SetBemfGpio
  * @param[in] MotorDeviceId Motor device id
  * @retval None
  */
void MC_Core_LL_SetBemfGpio(uint8_t MotorDeviceId)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  /* For several motors, this function should be modified to control a different GPIO according to the MotorDeviceId */
  HAL_GPIO_WritePin(GPIO_BEMF_GPIO_Port, GPIO_BEMF_Pin, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <MC_Core_LL_SetBemfGpio+0x20>)
 80011be:	f006 fbf1 	bl	80079a4 <HAL_GPIO_WritePin>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	48000800 	.word	0x48000800

080011d0 <MC_Core_LL_SetDutyCyclePwmForAdcTrig>:
  * @param[in] Channel channel used to trig the ADC
  * @param[in] PulseValue pulse value of the timer channel used to trig the ADC
  * @retval None
  */
void MC_Core_LL_SetDutyCyclePwmForAdcTrig(uint32_t *pTimer, uint32_t Channel, uint16_t PulseValue)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	4613      	mov	r3, r2
 80011dc:	80fb      	strh	r3, [r7, #6]
  switch (Channel)
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e4:	d02a      	beq.n	800123c <MC_Core_LL_SetDutyCyclePwmForAdcTrig+0x6c>
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ec:	d82e      	bhi.n	800124c <MC_Core_LL_SetDutyCyclePwmForAdcTrig+0x7c>
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011f4:	d01a      	beq.n	800122c <MC_Core_LL_SetDutyCyclePwmForAdcTrig+0x5c>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011fc:	d826      	bhi.n	800124c <MC_Core_LL_SetDutyCyclePwmForAdcTrig+0x7c>
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d003      	beq.n	800120c <MC_Core_LL_SetDutyCyclePwmForAdcTrig+0x3c>
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b10      	cmp	r3, #16
 8001208:	d008      	beq.n	800121c <MC_Core_LL_SetDutyCyclePwmForAdcTrig+0x4c>
 800120a:	e01f      	b.n	800124c <MC_Core_LL_SetDutyCyclePwmForAdcTrig+0x7c>
  {
    case LL_TIM_CHANNEL_CH1:
    {
      LL_TIM_OC_SetCompareCH1(((TIM_HandleTypeDef *) pTimer)->Instance, PulseValue);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	88fa      	ldrh	r2, [r7, #6]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fdcf 	bl	8000db8 <LL_TIM_OC_SetCompareCH1>
    }
    break;
 800121a:	e01f      	b.n	800125c <MC_Core_LL_SetDutyCyclePwmForAdcTrig+0x8c>
    case LL_TIM_CHANNEL_CH2:
    {
      LL_TIM_OC_SetCompareCH2(((TIM_HandleTypeDef *) pTimer)->Instance, PulseValue);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	88fa      	ldrh	r2, [r7, #6]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fdd5 	bl	8000dd4 <LL_TIM_OC_SetCompareCH2>
    }
    break;
 800122a:	e017      	b.n	800125c <MC_Core_LL_SetDutyCyclePwmForAdcTrig+0x8c>
    case LL_TIM_CHANNEL_CH3:
    {
      LL_TIM_OC_SetCompareCH3(((TIM_HandleTypeDef *) pTimer)->Instance, PulseValue);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	88fa      	ldrh	r2, [r7, #6]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fddb 	bl	8000df0 <LL_TIM_OC_SetCompareCH3>
    }
    break;
 800123a:	e00f      	b.n	800125c <MC_Core_LL_SetDutyCyclePwmForAdcTrig+0x8c>
    case LL_TIM_CHANNEL_CH4:
    {
      LL_TIM_OC_SetCompareCH4(((TIM_HandleTypeDef *) pTimer)->Instance, PulseValue);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	88fa      	ldrh	r2, [r7, #6]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fde1 	bl	8000e0c <LL_TIM_OC_SetCompareCH4>
    }
    break;
 800124a:	e007      	b.n	800125c <MC_Core_LL_SetDutyCyclePwmForAdcTrig+0x8c>
  default:
    LL_TIM_OC_SetCompareCH1(((TIM_HandleTypeDef *) pTimer)->Instance, PulseValue);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	88fa      	ldrh	r2, [r7, #6]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fdaf 	bl	8000db8 <LL_TIM_OC_SetCompareCH1>
  }
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <MC_Core_LL_SetDutyCycleHfPwmForStepN>:
  * @param[in] PulseValue pulse value of the HF timer channel corresponding to the StepNumber
  * @param[in] StepNumber step number in the 6step sequence
  * @retval None
  */
void MC_Core_LL_SetDutyCycleHfPwmForStepN(uint32_t *pHfTimer, uint16_t PulseValue, uint8_t StepNumber)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  uint32_t volatile* ptr = &(((TIM_HandleTypeDef *) pHfTimer)->Instance->CCR1);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3334      	adds	r3, #52	; 0x34
 800127a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  __disable_irq();
  ptr += ((--StepNumber) >> 1);
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	3b01      	subs	r3, #1
 8001284:	707b      	strb	r3, [r7, #1]
 8001286:	787b      	ldrb	r3, [r7, #1]
 8001288:	085b      	lsrs	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4413      	add	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
  *ptr = PulseValue;
 8001294:	887a      	ldrh	r2, [r7, #2]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800129a:	b662      	cpsie	i
}
 800129c:	bf00      	nop
  __enable_irq();
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <MC_Core_LL_SetDutyCycleHfPwms>:
  * @param[in] PulseValue2 pulse value of the HF timer channel 2
  * @param[in] PulseValue3 pulse value of the HF timer channel 3
  * @retval None
  */
void MC_Core_LL_SetDutyCycleHfPwms(uint32_t *pHfTimer, uint16_t PulseValue1, uint16_t PulseValue2, uint16_t PulseValue3)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	4608      	mov	r0, r1
 80012b4:	4611      	mov	r1, r2
 80012b6:	461a      	mov	r2, r3
 80012b8:	4603      	mov	r3, r0
 80012ba:	817b      	strh	r3, [r7, #10]
 80012bc:	460b      	mov	r3, r1
 80012be:	813b      	strh	r3, [r7, #8]
 80012c0:	4613      	mov	r3, r2
 80012c2:	80fb      	strh	r3, [r7, #6]
  LL_TIM_OC_SetCompareCH1(((TIM_HandleTypeDef *) pHfTimer)->Instance, PulseValue1);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	897a      	ldrh	r2, [r7, #10]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fd73 	bl	8000db8 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(((TIM_HandleTypeDef *) pHfTimer)->Instance, PulseValue2);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	893a      	ldrh	r2, [r7, #8]
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fd7a 	bl	8000dd4 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(((TIM_HandleTypeDef *) pHfTimer)->Instance, PulseValue3);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	88fa      	ldrh	r2, [r7, #6]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fd81 	bl	8000df0 <LL_TIM_OC_SetCompareCH3>
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <MC_Core_LL_SetDutyCycleRefPwm>:
  * @param[in] pHfTimer pointer to the REF timer
  * @param[in] PulseValue pulse value of the REF timer channel used to generate the reference voltage
  * @retval None
  */
void MC_Core_LL_SetDutyCycleRefPwm(uint32_t *pRefTimer, uint16_t PulseValue)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	807b      	strh	r3, [r7, #2]
  LL_TIM_OC_SetCompareCH1(((TIM_HandleTypeDef *) pRefTimer)->Instance, PulseValue);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fd54 	bl	8000db8 <LL_TIM_OC_SetCompareCH1>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <MC_Core_LL_SetPeriodTimer>:
  * @brief  MC_Core_LL_SetPeriodTimer
  * @param[in] PeriodValue period value for the timer
  * @retval None
  */
void MC_Core_LL_SetPeriodTimer(uint32_t *pTimer, uint16_t PeriodValue)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_AUTORELOAD((TIM_HandleTypeDef *) pTimer, PeriodValue);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	887a      	ldrh	r2, [r7, #2]
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
 800132c:	887a      	ldrh	r2, [r7, #2]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60da      	str	r2, [r3, #12]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <MC_Core_LL_SetPrescalerTimer>:
  * @brief  MC_Core_LL_SetPrescalerLfTimer
  * @param[in] PrescalerValue prescaler value for the LF timer
  * @retval None
  */
void MC_Core_LL_SetPrescalerTimer(uint32_t *pTimer, uint16_t PrescalerValue)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_PRESCALER((TIM_HandleTypeDef *) pTimer, PrescalerValue);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <MC_Core_LL_SelectAdcChannel>:
  * @param[in] AdcChannel ADC channel to be selected
  * @param[in] SamplingTime ADC sampling time to be selected
  * @retval None
  */
void MC_Core_LL_SelectAdcChannel(uint32_t *pAdcItToBeDisabled, uint32_t *pAdcItToBeEnabled, uint32_t AdcChannel, uint32_t SamplingTime)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b084      	sub	sp, #16
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	603b      	str	r3, [r7, #0]
  __HAL_ADC_DISABLE_IT(((ADC_HandleTypeDef *)pAdcItToBeDisabled), ADC_IT_EOC);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0204 	bic.w	r2, r2, #4
 800137a:	605a      	str	r2, [r3, #4]
  /* SamplingTime is not used for STM32G431RB as it is already programed in SMPRx registers */
  while (LL_ADC_REG_IsConversionOngoing(((ADC_HandleTypeDef *)pAdcItToBeEnabled)->Instance))
 800137c:	e00d      	b.n	800139a <MC_Core_LL_SelectAdcChannel+0x3c>
  {
    LL_ADC_REG_StopConversion(((ADC_HandleTypeDef *)pAdcItToBeEnabled)->Instance);
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fc99 	bl	8000cba <LL_ADC_REG_StopConversion>
    while(LL_ADC_REG_IsStopConversionOngoing(((ADC_HandleTypeDef *)pAdcItToBeEnabled)->Instance));
 8001388:	bf00      	nop
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fcba 	bl	8000d08 <LL_ADC_REG_IsStopConversionOngoing>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f7      	bne.n	800138a <MC_Core_LL_SelectAdcChannel+0x2c>
  while (LL_ADC_REG_IsConversionOngoing(((ADC_HandleTypeDef *)pAdcItToBeEnabled)->Instance))
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fc9f 	bl	8000ce2 <LL_ADC_REG_IsConversionOngoing>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1e9      	bne.n	800137e <MC_Core_LL_SelectAdcChannel+0x20>
  }
  LL_ADC_REG_SetSequencerRanks(((ADC_HandleTypeDef *)pAdcItToBeEnabled)->Instance, LL_ADC_REG_RANK_1, AdcChannel);
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	2106      	movs	r1, #6
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fbe9 	bl	8000b8a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_REG_StartConversion(((ADC_HandleTypeDef *)pAdcItToBeEnabled)->Instance);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fc68 	bl	8000c92 <LL_ADC_REG_StartConversion>
  __HAL_ADC_CLEAR_FLAG(((ADC_HandleTypeDef *)pAdcItToBeEnabled), ADC_FLAG_EOC);
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2204      	movs	r2, #4
 80013c8:	601a      	str	r2, [r3, #0]
  __HAL_ADC_ENABLE_IT(((ADC_HandleTypeDef *)pAdcItToBeEnabled), ADC_IT_EOC);
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0204 	orr.w	r2, r2, #4
 80013d8:	605a      	str	r2, [r3, #4]
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <MC_Core_LL_SelectAdcChannelDuringCallback>:
  * @param[in] AdcChannel ADC channel to be selected
  * @param[in] SamplingTime ADC sampling time to be selected
  * @retval None
  */
void MC_Core_LL_SelectAdcChannelDuringCallback(uint32_t *pAdcItToBeDisabled, uint32_t *pAdcItToBeEnabled, uint32_t AdcChannel, uint32_t SamplingTime)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
  __HAL_ADC_DISABLE_IT(((ADC_HandleTypeDef *)pAdcItToBeDisabled), ADC_IT_EOC);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	605a      	str	r2, [r3, #4]
  /* SamplingTime is not used for STM32G431RB as it is already programed in SMPRx registers */
  LL_ADC_REG_StopConversion(((ADC_HandleTypeDef *)pAdcItToBeEnabled)->Instance);
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fc58 	bl	8000cba <LL_ADC_REG_StopConversion>
  LL_ADC_REG_SetSequencerRanks(((ADC_HandleTypeDef *)pAdcItToBeEnabled)->Instance, LL_ADC_REG_RANK_1, AdcChannel);
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	2106      	movs	r1, #6
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fbb9 	bl	8000b8a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_REG_StartConversion(((ADC_HandleTypeDef *)pAdcItToBeEnabled)->Instance);
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fc38 	bl	8000c92 <LL_ADC_REG_StartConversion>
  __HAL_ADC_CLEAR_FLAG(((ADC_HandleTypeDef *)pAdcItToBeEnabled), ADC_FLAG_EOC);
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2204      	movs	r2, #4
 8001428:	601a      	str	r2, [r3, #0]
  __HAL_ADC_ENABLE_IT(((ADC_HandleTypeDef *)pAdcItToBeEnabled), ADC_IT_EOC);
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 0204 	orr.w	r2, r2, #4
 8001438:	605a      	str	r2, [r3, #4]
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <MC_Core_LL_SetAdcSamplingTime>:
  * @param[in] AdcChannel ADC channel to be selected
  * @param[in] SamplingTime ADC sampling time to be selected
  * @retval None
  */
void MC_Core_LL_SetAdcSamplingTime(uint32_t *pAdc, uint32_t AdcChannel, uint32_t SamplingTime)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
  LL_ADC_SetChannelSamplingTime(((ADC_HandleTypeDef *)pAdc)->Instance, AdcChannel, SamplingTime);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fbc3 	bl	8000be2 <LL_ADC_SetChannelSamplingTime>
}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <MC_Core_LL_StartAdcIt>:
  * @brief  MC_Core_LL_StartAdcIt
  * @param[in] pAdc pointer to the ADC
  * @retval None
  */
void MC_Core_LL_StartAdcIt(uint32_t *pAdc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_ADC_Start_IT((ADC_HandleTypeDef *)pAdc);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f004 f933 	bl	80056d8 <HAL_ADC_Start_IT>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <MC_Core_LL_StartHfPwms>:
  * @brief  MC_Core_LL_StartHfPwms
  * @param[in] pHfTimer pointer to the HF timer
  * @retval None
  */
void MC_Core_LL_StartHfPwms(uint32_t *pHfTimer)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  LL_TIM_EnableCounter(((TIM_HandleTypeDef *) pHfTimer)->Instance);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fc51 	bl	8000d2e <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(((TIM_HandleTypeDef *) pHfTimer)->Instance, LL_TIM_CHANNEL_CH1|LL_TIM_CHANNEL_CH2|LL_TIM_CHANNEL_CH3);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f240 1111 	movw	r1, #273	; 0x111
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc7e 	bl	8000d96 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableAllOutputs(((TIM_HandleTypeDef *) pHfTimer)->Instance);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fcc2 	bl	8000e28 <LL_TIM_EnableAllOutputs>
  __HAL_TIM_CLEAR_IT(((TIM_HandleTypeDef *) pHfTimer), TIM_IT_BREAK);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80014ac:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(((TIM_HandleTypeDef *) pHfTimer), TIM_IT_BREAK);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014bc:	60da      	str	r2, [r3, #12]
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <MC_Core_LL_StartTimerIt>:
/**
  * @brief  MC_Core_LL_StartTimerIt
  * @retval None
  */
void MC_Core_LL_StartTimerIt(uint32_t *pTimer)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  __HAL_TIM_CLEAR_IT((TIM_HandleTypeDef *) pTimer, TIM_IT_UPDATE);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f06f 0201 	mvn.w	r2, #1
 80014d6:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT((TIM_HandleTypeDef *) pTimer);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f007 faed 	bl	8008ab8 <HAL_TIM_Base_Start_IT>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <MC_Core_LL_StartRefPwm>:
  * @brief  MC_Core_LL_StartRefPwms
  * @param[in] pRefTimer pointer to the REF timer
  * @retval None
  */
void MC_Core_LL_StartRefPwm(uint32_t *pRefTimer)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  LL_TIM_EnableCounter(((TIM_HandleTypeDef *) pRefTimer)->Instance);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fc1b 	bl	8000d2e <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(((TIM_HandleTypeDef *) pRefTimer)->Instance, LL_TIM_CHANNEL_CH1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2101      	movs	r1, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fc49 	bl	8000d96 <LL_TIM_CC_EnableChannel>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <MC_Core_LL_StopAdcIt>:
  * @brief  MC_Core_LL_StopAdcIt
  * @param[in] pAdc pointer to the ADC
  * @retval None
  */
void MC_Core_LL_StopAdcIt(uint32_t *pAdc)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_ADC_Stop_IT((ADC_HandleTypeDef *)pAdc);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f004 fa11 	bl	800593c <HAL_ADC_Stop_IT>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <MC_Core_LL_StopHfPwms>:
  *         a x3 PWM interface.
  * @param[in] pHfTimer pointer to the HF timer
  * @retval None
  */
void MC_Core_LL_StopHfPwms(uint32_t *pHfTimer)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop((TIM_HandleTypeDef *) pHfTimer, TIM_CHANNEL_1); //TIM1_CH1 DISABLE
 800152a:	2100      	movs	r1, #0
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f007 fbbd 	bl	8008cac <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop((TIM_HandleTypeDef *) pHfTimer, TIM_CHANNEL_2); //TIM1_CH2 DISABLE
 8001532:	2104      	movs	r1, #4
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f007 fbb9 	bl	8008cac <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop((TIM_HandleTypeDef *) pHfTimer, TIM_CHANNEL_3); //TIM1_CH3 DISABLE
 800153a:	2108      	movs	r1, #8
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f007 fbb5 	bl	8008cac <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop((TIM_HandleTypeDef *) pHfTimer, TIM_CHANNEL_4); //TIM1_CH4 DISABLE
 8001542:	210c      	movs	r1, #12
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f007 fbb1 	bl	8008cac <HAL_TIM_PWM_Stop>
  __HAL_TIM_SET_COUNTER(((TIM_HandleTypeDef *) pHfTimer), 0);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE_IT(((TIM_HandleTypeDef *) pHfTimer), TIM_IT_BREAK | TIM_IT_COM);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001560:	60da      	str	r2, [r3, #12]
  __HAL_TIM_CLEAR_IT(((TIM_HandleTypeDef *) pHfTimer), TIM_IT_BREAK | TIM_IT_COM);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f06f 02a0 	mvn.w	r2, #160	; 0xa0
 800156a:	611a      	str	r2, [r3, #16]
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <MC_Core_LL_StopTimerIt>:
/**
  * @brief  MC_Core_LL_StopLfTimerIt
  * @retval None
  */
void MC_Core_LL_StopTimerIt(uint32_t *pTimer)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Stop_IT((TIM_HandleTypeDef *) pTimer);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f007 fb05 	bl	8008b8c <HAL_TIM_Base_Stop_IT>
  __HAL_TIM_CLEAR_IT((TIM_HandleTypeDef *) pTimer, TIM_IT_UPDATE);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f06f 0201 	mvn.w	r2, #1
 800158a:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER((TIM_HandleTypeDef *) pTimer, 0);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <MC_Core_LL_StopRefPwm>:
  * @brief  MC_Core_LL_StopRefPwm
  * @param[in] pHfTimer pointer to the REF timer
  * @retval None
  */
void MC_Core_LL_StopRefPwm(uint32_t *pRefTimer)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop((TIM_HandleTypeDef *) pRefTimer, TIM_CHANNEL_1); //TIM1_CH1 DISABLE
 80015a4:	2100      	movs	r1, #0
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f007 fb80 	bl	8008cac <HAL_TIM_PWM_Stop>
  __HAL_TIM_SET_COUNTER(((TIM_HandleTypeDef *) pRefTimer), 0);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <MC_Core_LL_ToggleCommGpio>:
/**
  * @brief  MC_Core_LL_ToggleCommGpio
  * @retval None
  */
void MC_Core_LL_ToggleCommGpio(uint8_t MotorDeviceId)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  /* For several motors, this function should be modified to control a different GPIO according to the MotorDeviceId */
  HAL_GPIO_TogglePin(GPIO_COMM_GPIO_Port, GPIO_COMM_Pin);
 80015c6:	2101      	movs	r1, #1
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <MC_Core_LL_ToggleCommGpio+0x1c>)
 80015ca:	f006 fa03 	bl	80079d4 <HAL_GPIO_TogglePin>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	48000400 	.word	0x48000400

080015dc <MC_Core_LL_ToggleZeroCrossingGpio>:
/**
  * @brief  MC_Core_LL_ToggleZeroCrossingGpio
  * @retval None
  */
void MC_Core_LL_ToggleZeroCrossingGpio(uint8_t MotorDeviceId)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  /* For several motors, this function should be modified to control a different GPIO according to the MotorDeviceId */
  HAL_GPIO_TogglePin(GPIO_ZCR_GPIO_Port, GPIO_ZCR_Pin);
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <MC_Core_LL_ToggleZeroCrossingGpio+0x1c>)
 80015ea:	f006 f9f3 	bl	80079d4 <HAL_GPIO_TogglePin>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	48000800 	.word	0x48000800

080015fc <MC_Core_ComputePulseValue>:
  * @param[in] Period period of the timer which to compute the pulse value for
  * @param[in] PulseValueIn1024th pulse value in 1/1024 of a period
  * @retval Pulse value
  */
uint16_t MC_Core_ComputePulseValue(MC_Handle_t *pMc, uint16_t Period, uint16_t PulseValueIn1024th)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	803b      	strh	r3, [r7, #0]
  return (uint16_t)((Period*PulseValueIn1024th) >> MC_DUTY_CYCLE_SCALING_SHIFT);
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	883a      	ldrh	r2, [r7, #0]
 8001610:	fb02 f303 	mul.w	r3, r2, r3
 8001614:	129b      	asrs	r3, r3, #10
 8001616:	b29b      	uxth	r3, r3
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <MC_Core_Alignment>:
  * @brief  MC_Core_Alignment
  * @param[in] pMc motor control handle
  * @retval  Function Status
  */
MC_FuncStatus_t MC_Core_Alignment(MC_Handle_t *pMc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((pMc->align_index) == 0)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	899b      	ldrh	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d117      	bne.n	8001664 <MC_Core_Alignment+0x40>
  {
    MC_Core_LL_DisableIrq();
 8001634:	f7ff fcc5 	bl	8000fc2 <MC_Core_LL_DisableIrq>
    if (STARTUP_DIRECTION == 0)
    {
      (pMc->step_pos_next)--;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7a1b      	ldrb	r3, [r3, #8]
 800163c:	3b01      	subs	r3, #1
 800163e:	b2da      	uxtb	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	721a      	strb	r2, [r3, #8]
    }
    else
    {
      (pMc->step_pos_next)++;
    }
    MC_Core_NextStep(pMc, 0);
 8001644:	2100      	movs	r1, #0
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 ff3d 	bl	80024c6 <MC_Core_NextStep>
    MC_Core_LL_StartHfPwms(pMc->phf_timer);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff12 	bl	800147a <MC_Core_LL_StartHfPwms>
    MC_Core_LL_GenerateComEvent(pMc->phf_timer);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fd10 	bl	8001080 <MC_Core_LL_GenerateComEvent>
    MC_Core_LL_EnableIrq();
 8001660:	f7ff fcfa 	bl	8001058 <MC_Core_LL_EnableIrq>
  }
  (pMc->align_index)++;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	899b      	ldrh	r3, [r3, #12]
 8001668:	3301      	adds	r3, #1
 800166a:	b29a      	uxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	819a      	strh	r2, [r3, #12]
  if((pMc->align_index) >= ALIGNMENT_TIME)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	899b      	ldrh	r3, [r3, #12]
 8001674:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001678:	d30a      	bcc.n	8001690 <MC_Core_Alignment+0x6c>
  {
    pMc->status = MC_STARTUP;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2203      	movs	r2, #3
 800167e:	705a      	strb	r2, [r3, #1]
    MC_Core_RampCalc(pMc);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f001 f823 	bl	80026cc <MC_Core_RampCalc>
    MC_Core_LL_StartTimerIt(pMc->plf_timer);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff1b 	bl	80014c6 <MC_Core_LL_StartTimerIt>
  }
  return MC_FUNC_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <MC_Core_LfTimerPeriodFilter>:
  * @brief  MC_Core_LfTimerPeriodFilter
  *         Call this function only during MC_RUN state
  * @retval  output pulse value to set
  */
uint16_t MC_Core_LfTimerPeriodFilter(MC_Handle_t *pMc)
{
 800169a:	b480      	push	{r7}
 800169c:	b087      	sub	sp, #28
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  uint32_t period_sum = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  uint16_t period = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	827b      	strh	r3, [r7, #18]

  pMc->lf_timer_period_array[pMc->lf_timer_period_array_index] = pMc->lf_timer_period;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	795b      	ldrb	r3, [r3, #5]
 80016ae:	4618      	mov	r0, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	8a59      	ldrh	r1, [r3, #18]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	f100 0308 	add.w	r3, r0, #8
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	460a      	mov	r2, r1
 80016c0:	809a      	strh	r2, [r3, #4]

  if (pMc->lf_timer_period_array_completed == FALSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	791b      	ldrb	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d130      	bne.n	800172c <MC_Core_LfTimerPeriodFilter+0x92>
  {
    for(int16_t i = pMc->lf_timer_period_array_index; i >= 0; i--)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	795b      	ldrb	r3, [r3, #5]
 80016ce:	823b      	strh	r3, [r7, #16]
 80016d0:	e010      	b.n	80016f4 <MC_Core_LfTimerPeriodFilter+0x5a>
    {
      period_sum = period_sum + pMc->lf_timer_period_array[i];
 80016d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	3308      	adds	r3, #8
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	889b      	ldrh	r3, [r3, #4]
 80016e0:	461a      	mov	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	4413      	add	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
    for(int16_t i = pMc->lf_timer_period_array_index; i >= 0; i--)
 80016e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	823b      	strh	r3, [r7, #16]
 80016f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	daea      	bge.n	80016d2 <MC_Core_LfTimerPeriodFilter+0x38>
    }
    (pMc->lf_timer_period_array_index)++;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	795b      	ldrb	r3, [r3, #5]
 8001700:	3301      	adds	r3, #1
 8001702:	b2da      	uxtb	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	715a      	strb	r2, [r3, #5]
    period = (uint16_t) (period_sum / pMc->lf_timer_period_array_index);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	795b      	ldrb	r3, [r3, #5]
 800170c:	461a      	mov	r2, r3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fbb3 f3f2 	udiv	r3, r3, r2
 8001714:	827b      	strh	r3, [r7, #18]
    if(pMc->lf_timer_period_array_index >= MC_SPEED_ARRAY_SIZE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	795b      	ldrb	r3, [r3, #5]
 800171a:	2b1f      	cmp	r3, #31
 800171c:	d92e      	bls.n	800177c <MC_Core_LfTimerPeriodFilter+0xe2>
    {
      pMc->lf_timer_period_array_index = 0;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	715a      	strb	r2, [r3, #5]
      pMc->lf_timer_period_array_completed = TRUE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	711a      	strb	r2, [r3, #4]
 800172a:	e027      	b.n	800177c <MC_Core_LfTimerPeriodFilter+0xe2>
    }
  }
  else
  {
    for(int16_t i = (MC_SPEED_ARRAY_SIZE - 1); i >= 0; i--)
 800172c:	231f      	movs	r3, #31
 800172e:	81fb      	strh	r3, [r7, #14]
 8001730:	e010      	b.n	8001754 <MC_Core_LfTimerPeriodFilter+0xba>
    {
      period_sum = period_sum + pMc->lf_timer_period_array[i];
 8001732:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	3308      	adds	r3, #8
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	889b      	ldrh	r3, [r3, #4]
 8001740:	461a      	mov	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	4413      	add	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
    for(int16_t i = (MC_SPEED_ARRAY_SIZE - 1); i >= 0; i--)
 8001748:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800174c:	b29b      	uxth	r3, r3
 800174e:	3b01      	subs	r3, #1
 8001750:	b29b      	uxth	r3, r3
 8001752:	81fb      	strh	r3, [r7, #14]
 8001754:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001758:	2b00      	cmp	r3, #0
 800175a:	daea      	bge.n	8001732 <MC_Core_LfTimerPeriodFilter+0x98>
    }
    (pMc->lf_timer_period_array_index)++;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	795b      	ldrb	r3, [r3, #5]
 8001760:	3301      	adds	r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	715a      	strb	r2, [r3, #5]
    if(pMc->lf_timer_period_array_index >= MC_SPEED_ARRAY_SIZE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	795b      	ldrb	r3, [r3, #5]
 800176c:	2b1f      	cmp	r3, #31
 800176e:	d902      	bls.n	8001776 <MC_Core_LfTimerPeriodFilter+0xdc>
    {
      pMc->lf_timer_period_array_index = 0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	715a      	strb	r2, [r3, #5]
    }
    period = period_sum >> RUN_SPEED_ARRAY_SHIFT;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	095b      	lsrs	r3, r3, #5
 800177a:	827b      	strh	r3, [r7, #18]
  }

  return period;
 800177c:	8a7b      	ldrh	r3, [r7, #18]
}
 800177e:	4618      	mov	r0, r3
 8001780:	371c      	adds	r7, #28
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <MC_Core_SixStepTable>:
  * @brief  Set the HF pwm duty cycles for each step
  * @param(in]  StepNumber
  * @retval  Function Status
  */
MC_FuncStatus_t MC_Core_SixStepTable(MC_Handle_t *pMc, uint16_t PulseValue, uint8_t StepNumber)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  switch (StepNumber)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	3b01      	subs	r3, #1
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	f200 8081 	bhi.w	80018a8 <MC_Core_SixStepTable+0x11c>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <MC_Core_SixStepTable+0x20>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	080017c5 	.word	0x080017c5
 80017b0:	080017eb 	.word	0x080017eb
 80017b4:	08001811 	.word	0x08001811
 80017b8:	08001837 	.word	0x08001837
 80017bc:	0800185d 	.word	0x0800185d
 80017c0:	08001883 	.word	0x08001883
  {
    case 1:
    {
      MC_Core_LL_SetDutyCycleHfPwms(pMc->phf_timer, PulseValue, 0, 0);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80017c8:	8879      	ldrh	r1, [r7, #2]
 80017ca:	2300      	movs	r3, #0
 80017cc:	2200      	movs	r2, #0
 80017ce:	f7ff fd6c 	bl	80012aa <MC_Core_LL_SetDutyCycleHfPwms>
      MC_Core_LL_EnableInputsHfPwmsStep14(pMc->id);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fbfc 	bl	8000fd4 <MC_Core_LL_EnableInputsHfPwmsStep14>
      pMc->bemf.current_adc_channel = pMc->bemf.adc_channel[2];
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }
    break;
 80017e8:	e05e      	b.n	80018a8 <MC_Core_SixStepTable+0x11c>
    case 2:
    {
      MC_Core_LL_SetDutyCycleHfPwms(pMc->phf_timer, PulseValue, 0, 0);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80017ee:	8879      	ldrh	r1, [r7, #2]
 80017f0:	2300      	movs	r3, #0
 80017f2:	2200      	movs	r2, #0
 80017f4:	f7ff fd59 	bl	80012aa <MC_Core_LL_SetDutyCycleHfPwms>
      MC_Core_LL_EnableInputsHfPwmsStep25(pMc->id);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fbff 	bl	8001000 <MC_Core_LL_EnableInputsHfPwmsStep25>
      pMc->bemf.current_adc_channel = pMc->bemf.adc_channel[1];
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }
    break;
 800180e:	e04b      	b.n	80018a8 <MC_Core_SixStepTable+0x11c>
    case 3:
    {
      MC_Core_LL_SetDutyCycleHfPwms(pMc->phf_timer, 0, PulseValue, 0);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001814:	887a      	ldrh	r2, [r7, #2]
 8001816:	2300      	movs	r3, #0
 8001818:	2100      	movs	r1, #0
 800181a:	f7ff fd46 	bl	80012aa <MC_Core_LL_SetDutyCycleHfPwms>
      MC_Core_LL_EnableInputsHfPwmsStep36(pMc->id);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fc02 	bl	800102c <MC_Core_LL_EnableInputsHfPwmsStep36>
      pMc->bemf.current_adc_channel = pMc->bemf.adc_channel[0];
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }
    break;
 8001834:	e038      	b.n	80018a8 <MC_Core_SixStepTable+0x11c>
    case 4:
    {
      MC_Core_LL_SetDutyCycleHfPwms(pMc->phf_timer, 0, PulseValue, 0);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	2300      	movs	r3, #0
 800183e:	2100      	movs	r1, #0
 8001840:	f7ff fd33 	bl	80012aa <MC_Core_LL_SetDutyCycleHfPwms>
      MC_Core_LL_EnableInputsHfPwmsStep14(pMc->id);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fbc3 	bl	8000fd4 <MC_Core_LL_EnableInputsHfPwmsStep14>
      pMc->bemf.current_adc_channel = pMc->bemf.adc_channel[2];
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }
    break;
 800185a:	e025      	b.n	80018a8 <MC_Core_SixStepTable+0x11c>
    case 5:
    {
      MC_Core_LL_SetDutyCycleHfPwms(pMc->phf_timer, 0, 0 ,PulseValue);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	f7ff fd20 	bl	80012aa <MC_Core_LL_SetDutyCycleHfPwms>
      MC_Core_LL_EnableInputsHfPwmsStep25(pMc->id);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fbc6 	bl	8001000 <MC_Core_LL_EnableInputsHfPwmsStep25>
      pMc->bemf.current_adc_channel = pMc->bemf.adc_channel[1];
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }
    break;
 8001880:	e012      	b.n	80018a8 <MC_Core_SixStepTable+0x11c>
    case 6:
    {
      MC_Core_LL_SetDutyCycleHfPwms(pMc->phf_timer, 0, 0 ,PulseValue);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001886:	887b      	ldrh	r3, [r7, #2]
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	f7ff fd0d 	bl	80012aa <MC_Core_LL_SetDutyCycleHfPwms>
      MC_Core_LL_EnableInputsHfPwmsStep36(pMc->id);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fbc9 	bl	800102c <MC_Core_LL_EnableInputsHfPwmsStep36>
      pMc->bemf.current_adc_channel = pMc->bemf.adc_channel[0];
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }
    break;
 80018a6:	bf00      	nop
  }
  return MC_FUNC_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop

080018b4 <MC_Core_SpeedCompute>:
  * @brief  MC_Core_SpeedCompute
  *         Call this function only during MC_RUN state
  * @retval  output pulse value to set
  */
uint32_t MC_Core_SpeedCompute(MC_Handle_t *pMc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint16_t prescaler = MC_Core_LL_GetTimerPrescaler(pMc->plf_timer);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fc51 	bl	8001168 <MC_Core_LL_GetTimerPrescaler>
 80018c6:	4603      	mov	r3, r0
 80018c8:	81fb      	strh	r3, [r7, #14]
  uint16_t period = MC_Core_LfTimerPeriodFilter(pMc);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fee5 	bl	800169a <MC_Core_LfTimerPeriodFilter>
 80018d0:	4603      	mov	r3, r0
 80018d2:	81bb      	strh	r3, [r7, #12]
  return ((SysClockFrequency * 10) / ((++period) * (++prescaler) * (pMc->motor_charac.pole_pairs)));
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <MC_Core_SpeedCompute+0x58>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4619      	mov	r1, r3
 80018e2:	89bb      	ldrh	r3, [r7, #12]
 80018e4:	3301      	adds	r3, #1
 80018e6:	81bb      	strh	r3, [r7, #12]
 80018e8:	89bb      	ldrh	r3, [r7, #12]
 80018ea:	89fa      	ldrh	r2, [r7, #14]
 80018ec:	3201      	adds	r2, #1
 80018ee:	81fa      	strh	r2, [r7, #14]
 80018f0:	89fa      	ldrh	r2, [r7, #14]
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	f892 2088 	ldrb.w	r2, [r2, #136]	; 0x88
 80018fc:	fb02 f303 	mul.w	r3, r2, r3
 8001900:	fbb1 f3f3 	udiv	r3, r1, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200002b4 	.word	0x200002b4

08001910 <MC_Core_SpeedControl>:
/**
  * @brief  MC_Core_SpeedControl
  * @retval  output pulse value to set
  */
uint16_t MC_Core_SpeedControl(MC_Handle_t *pMc)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  int32_t proportional_term = 0, derivative_term = 0, output = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  int32_t speed_error;

  /* Error computation */
  speed_error = (pMc->speed_target_value) - (pMc->speed_fdbk_filtered);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	60bb      	str	r3, [r7, #8]

  /* Proportional term computation */
  proportional_term = speed_error * (pMc->pid_parameters.kp);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8001936:	461a      	mov	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	613b      	str	r3, [r7, #16]

  /* Integral term computation */
  pMc->pid_parameters.integral_term_sum += speed_error * (pMc->pid_parameters.ki);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800194c:	4619      	mov	r1, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	441a      	add	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  if (pMc->pid_parameters.integral_term_sum > (int32_t)((pMc->pid_parameters.maximum_output) << (pMc->pid_parameters.scaling_shift)))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 8001968:	4619      	mov	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	429a      	cmp	r2, r3
 8001976:	dd0b      	ble.n	8001990 <MC_Core_SpeedControl+0x80>
  {
    pMc->pid_parameters.integral_term_sum = ((pMc->pid_parameters.maximum_output) << (pMc->pid_parameters.scaling_shift));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 800197e:	461a      	mov	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8001986:	409a      	lsls	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800198e:	e018      	b.n	80019c2 <MC_Core_SpeedControl+0xb2>
  }
  else if (pMc->pid_parameters.integral_term_sum < (int32_t)((pMc->pid_parameters.minimum_output) << (pMc->pid_parameters.scaling_shift)))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 800199c:	4619      	mov	r1, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	429a      	cmp	r2, r3
 80019aa:	da0a      	bge.n	80019c2 <MC_Core_SpeedControl+0xb2>
  {
    pMc->pid_parameters.integral_term_sum = ((pMc->pid_parameters.minimum_output) << (pMc->pid_parameters.scaling_shift));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 80019b2:	461a      	mov	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 80019ba:	409a      	lsls	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  }

  /* Derivative computation */
  derivative_term = ((pMc->pid_parameters.previous_speed) - (pMc->speed_fdbk_filtered)) * (pMc->pid_parameters.kd);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	60fb      	str	r3, [r7, #12]
  pMc->pid_parameters.previous_speed = pMc->speed_fdbk_filtered;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

  output =
    ((proportional_term + (pMc->pid_parameters.integral_term_sum) + derivative_term) >> (pMc->pid_parameters.scaling_shift));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	441a      	add	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4413      	add	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	f8b2 20d8 	ldrh.w	r2, [r2, #216]	; 0xd8
  output =
 80019f8:	4113      	asrs	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]

  if (output > (pMc->pid_parameters.maximum_output))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 8001a02:	461a      	mov	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	4293      	cmp	r3, r2
 8001a08:	dd04      	ble.n	8001a14 <MC_Core_SpeedControl+0x104>
  {
    output = (pMc->pid_parameters.maximum_output);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e00a      	b.n	8001a2a <MC_Core_SpeedControl+0x11a>
  }
  else if (output < (pMc->pid_parameters.minimum_output))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	da03      	bge.n	8001a2a <MC_Core_SpeedControl+0x11a>
  {
    output = (pMc->pid_parameters.minimum_output);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8001a28:	617b      	str	r3, [r7, #20]
  }

  return (uint16_t) output;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	b29b      	uxth	r3, r3
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <MC_Core_SpeedRegulatorReset>:
/**
  * @brief  MC_Core_SpeedRegulatorReset
  * @retval  Function Status
  */
MC_FuncStatus_t MC_Core_SpeedRegulatorReset(MC_Handle_t *pMc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  pMc->speed_target_command = 0;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	67da      	str	r2, [r3, #124]	; 0x7c
  MC_Core_SetSpeed(pMc, STARTUP_SPEED_TARGET);
 8001a4a:	2196      	movs	r1, #150	; 0x96
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 ffdf 	bl	8002a10 <MC_Core_SetSpeed>
  pMc->pid_parameters.kp = PID_KP;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a58:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  pMc->pid_parameters.ki = ((PID_KI)*(pMc->control_loop_time));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	789b      	ldrb	r3, [r3, #2]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  pMc->pid_parameters.kd = ((PID_KD)/(pMc->control_loop_time));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  pMc->pid_parameters.scaling_shift = PID_SCALING_SHIFT;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	220f      	movs	r2, #15
 8001a78:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
  pMc->pid_parameters.minimum_output = ((PID_OUTPUT_MIN)*(pMc->hf_timer_period)) / MC_REGULATOR_MIN_MAX_SCALING_DIV;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	8a1b      	ldrh	r3, [r3, #16]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4613      	mov	r3, r2
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	4413      	add	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <MC_Core_SpeedRegulatorReset+0x78>)
 8001a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a90:	1192      	asrs	r2, r2, #6
 8001a92:	17db      	asrs	r3, r3, #31
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
  pMc->pid_parameters.maximum_output = ((PID_OUTPUT_MAX)*(pMc->hf_timer_period)) / MC_REGULATOR_MIN_MAX_SCALING_DIV;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	8a1a      	ldrh	r2, [r3, #16]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
  return MC_FUNC_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	10624dd3 	.word	0x10624dd3

08001ab8 <MC_Core_AssignTimers>:
/** @defgroup MC_6STEP_CORE_Exported_Functions
  * @{
  */

MC_FuncStatus_t MC_Core_AssignTimers(MC_Handle_t *pMc, uint32_t *pHfTimer, uint32_t *pLfTimer, uint32_t *pRefTimer)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
  if ((pMc == NULL) || (pHfTimer == NULL) || (pLfTimer == NULL))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <MC_Core_AssignTimers+0x20>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <MC_Core_AssignTimers+0x20>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <MC_Core_AssignTimers+0x24>
  {
    return MC_FUNC_FAIL;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e018      	b.n	8001b0e <MC_Core_AssignTimers+0x56>
  }
  pMc->phf_timer = pHfTimer;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	661a      	str	r2, [r3, #96]	; 0x60
  pMc->hf_timer_period = MC_Core_LL_GetTimerPeriod(pHfTimer);
 8001ae2:	68b8      	ldr	r0, [r7, #8]
 8001ae4:	f7ff fb32 	bl	800114c <MC_Core_LL_GetTimerPeriod>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	821a      	strh	r2, [r3, #16]
  pMc->plf_timer = pLfTimer;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	665a      	str	r2, [r3, #100]	; 0x64
  pMc->pref_timer = pRefTimer;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	669a      	str	r2, [r3, #104]	; 0x68
  if (pRefTimer != NULL)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <MC_Core_AssignTimers+0x54>
  {
    pMc->ref_timer_period = pMc->hf_timer_period;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8a1a      	ldrh	r2, [r3, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  }
  return MC_FUNC_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <MC_Core_ConfigureUserAdc>:
  * @param[in] pTrigTimer pointer on the handle of the timer used to trig the ADC
  * @param[in] TrigTimerChannel Channel of the timer used to trig the ADC
  * @retval  Function Status
  */
MC_FuncStatus_t MC_Core_ConfigureUserAdc(MC_Handle_t* pMc, uint32_t *pTrigTimer, uint16_t TrigTimerChannel)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	4613      	mov	r3, r2
 8001b22:	80fb      	strh	r3, [r7, #6]
  if (pTrigTimer == NULL)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <MC_Core_ConfigureUserAdc+0x18>
  {
    return MC_FUNC_FAIL;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00d      	b.n	8001b4a <MC_Core_ConfigureUserAdc+0x34>
  }
  pMc->adc_user.ptrig_timer = pTrigTimer;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  pMc->adc_user.trig_timer_period = pMc->hf_timer_period;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8a1a      	ldrh	r2, [r3, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
  pMc->adc_user.trig_timer_channel = TrigTimerChannel;
 8001b40:	88fa      	ldrh	r2, [r7, #6]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  return MC_FUNC_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <MC_Core_ConfigureUserAdcChannel>:
  * @param[in] SamplingTime ADC sampling time to be selected
  * @param[in] UserMeasurement User measurement to map to ADC channel
  * @retval None
  */
MC_FuncStatus_t MC_Core_ConfigureUserAdcChannel(MC_Handle_t* pMc, uint32_t* pAdc, uint32_t AdcChannel, uint32_t SamplingTime, MC_UserMeasurements_t UserMeasurement)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	603b      	str	r3, [r7, #0]
  if ((UserMeasurement == MC_USER_MEAS_1) || (UserMeasurement == MC_USER_MEAS_2) || (UserMeasurement == MC_USER_MEAS_3) || (UserMeasurement == MC_USER_MEAS_4) || (UserMeasurement == MC_USER_MEAS_5))
 8001b64:	7e3b      	ldrb	r3, [r7, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <MC_Core_ConfigureUserAdcChannel+0x2c>
 8001b6a:	7e3b      	ldrb	r3, [r7, #24]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d008      	beq.n	8001b82 <MC_Core_ConfigureUserAdcChannel+0x2c>
 8001b70:	7e3b      	ldrb	r3, [r7, #24]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d005      	beq.n	8001b82 <MC_Core_ConfigureUserAdcChannel+0x2c>
 8001b76:	7e3b      	ldrb	r3, [r7, #24]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d002      	beq.n	8001b82 <MC_Core_ConfigureUserAdcChannel+0x2c>
 8001b7c:	7e3b      	ldrb	r3, [r7, #24]
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d11a      	bne.n	8001bb8 <MC_Core_ConfigureUserAdcChannel+0x62>
  {
    pMc->adc_user.padc[UserMeasurement] = pAdc;
 8001b82:	7e3b      	ldrb	r3, [r7, #24]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	334a      	adds	r3, #74	; 0x4a
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	605a      	str	r2, [r3, #4]
    pMc->adc_user.channel[UserMeasurement] = AdcChannel;
 8001b90:	7e3a      	ldrb	r2, [r7, #24]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3240      	adds	r2, #64	; 0x40
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pMc->adc_user.sampling_time[UserMeasurement] = SamplingTime;
 8001b9c:	7e3b      	ldrb	r3, [r7, #24]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	3344      	adds	r3, #68	; 0x44
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
    MC_Core_LL_SetAdcSamplingTime(pAdc, AdcChannel, SamplingTime);
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	68b8      	ldr	r0, [r7, #8]
 8001bb0:	f7ff fc47 	bl	8001442 <MC_Core_LL_SetAdcSamplingTime>
    return MC_FUNC_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e000      	b.n	8001bba <MC_Core_ConfigureUserAdcChannel+0x64>
  }
  else
  {
    return MC_FUNC_FAIL;
 8001bb8:	2301      	movs	r3, #1
  }
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <MC_Core_ConfigureUserButton>:

MC_FuncStatus_t MC_Core_ConfigureUserButton(MC_Handle_t* pMc, uint16_t ButtonPin, uint16_t ButtonDebounceTimeMs)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	807b      	strh	r3, [r7, #2]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	803b      	strh	r3, [r7, #0]
  pMc->button_user.gpio_pin = ButtonPin;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	887a      	ldrh	r2, [r7, #2]
 8001bd6:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
  pMc->button_user.debounce_time_ms = ButtonDebounceTimeMs;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	883a      	ldrh	r2, [r7, #0]
 8001bde:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
  return MC_FUNC_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <MC_Core_GetSpeed>:
  * @brief  MC_Core_GetSpeed
  * @param[in] pMc motor control handle
  * @retval pMc->speed_fdbk_filtered
  */
uint32_t MC_Core_GetSpeed(MC_Handle_t* pMc)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return pMc->speed_fdbk_filtered;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <MC_Core_GetStatus>:
  * @brief  MC_Core_GetStatus
  * @param[in] pMc motor control handle
  * @retval pMc->status
  */
MC_Status_t MC_Core_GetStatus(MC_Handle_t* pMc)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return pMc->status;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	785b      	ldrb	r3, [r3, #1]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <MC_Core_Init>:
  *         Initializes the motor control
  * @param[in] pMc motor control handle
  * @retval Function Status
  */
MC_FuncStatus_t MC_Core_Init(MC_Handle_t *pMc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the motor control handle and the mandatory timers */
  if ((pMc == NULL) || (pMc->plf_timer == NULL) || (pMc->phf_timer == NULL))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <MC_Core_Init+0x1e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <MC_Core_Init+0x1e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <MC_Core_Init+0x22>
  {
    return MC_FUNC_FAIL;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e03c      	b.n	8001cbc <MC_Core_Init+0x9c>
  }
  else
  {
    if (NumberOfDevices < NUMBER_OF_DEVICES)
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <MC_Core_Init+0xa4>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d121      	bne.n	8001c8e <MC_Core_Init+0x6e>
    {
      pMc->id = NumberOfDevices;
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <MC_Core_Init+0xa4>)
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	701a      	strb	r2, [r3, #0]
      pMcCoreArray[NumberOfDevices] = pMc;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <MC_Core_Init+0xa4>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	4619      	mov	r1, r3
 8001c58:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <MC_Core_Init+0xa8>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      NumberOfDevices++;
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MC_Core_Init+0xa4>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MC_Core_Init+0xa4>)
 8001c6a:	701a      	strb	r2, [r3, #0]
      return MC_FUNC_FAIL;
    }
  }

  /* Set Device initial State */
  pMc->status = MC_IDLE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	705a      	strb	r2, [r3, #1]

  /* Get temperature calibration data */
  MC_Core_LL_GetTemperatureCalibrationData(pMc);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fa46 	bl	8001104 <MC_Core_LL_GetTemperatureCalibrationData>

  /* Motor characteristics initialisation */
  pMc->motor_charac.pole_pairs = MOTOR_NUM_POLE_PAIRS;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Motor parameters and private variable initialisation */
  if (MC_Core_Reset(pMc) != MC_FUNC_OK)
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fdf3 	bl	800286c <MC_Core_Reset>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <MC_Core_Init+0x76>
 8001c8c:	e001      	b.n	8001c92 <MC_Core_Init+0x72>
      return MC_FUNC_FAIL;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e014      	b.n	8001cbc <MC_Core_Init+0x9c>
  {
    return MC_FUNC_FAIL;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e012      	b.n	8001cbc <MC_Core_Init+0x9c>
  }
  SysClockFrequency = MC_Core_LL_GetSysClockFrequency();
 8001c96:	f7ff fa2d 	bl	80010f4 <MC_Core_LL_GetSysClockFrequency>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <MC_Core_Init+0xac>)
 8001c9e:	6013      	str	r3, [r2, #0]
  MC_Core_SetGateDriverPwmFreq(pMc, MC_Core_LL_GetGateDrivingPwmFrequency(pMc->phf_timer));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f9f8 	bl	800109a <MC_Core_LL_GetGateDrivingPwmFrequency>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4619      	mov	r1, r3
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f836 	bl	8001d20 <MC_Core_SetGateDriverPwmFreq>

  /* Set Device State at the end of initialization */
  pMc->status = MC_STOP;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	705a      	strb	r2, [r3, #1]

  return MC_FUNC_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200002b0 	.word	0x200002b0
 8001cc8:	200002b8 	.word	0x200002b8
 8001ccc:	200002b4 	.word	0x200002b4

08001cd0 <MC_Core_SetAdcUserTrigTime>:
  * @brief  MC_Core_SetAdcUserTrigTime
  * @param[in] DutyCycleToSet Duty cycle in 1/1024 of PWM period
  * @retval Function Status
  */
MC_FuncStatus_t MC_Core_SetAdcUserTrigTime(MC_Handle_t* pMc, uint32_t DutyCycleToSet)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  pMc->adc_user.trig_time = (uint16_t)((pMc->adc_user.trig_timer_period*DutyCycleToSet) >> MC_DUTY_CYCLE_SCALING_SHIFT);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	fb02 f303 	mul.w	r3, r2, r3
 8001ce8:	0a9b      	lsrs	r3, r3, #10
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
  return MC_FUNC_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <MC_Core_SetDirection>:
  * @param[in] pMc motor control handle
  * @param[in] DirectionToSet
  * @retval Function Status
  */
MC_FuncStatus_t MC_Core_SetDirection(MC_Handle_t* pMc, uint32_t DirectionToSet)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  pMc->direction = DirectionToSet;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	70da      	strb	r2, [r3, #3]
  return MC_FUNC_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <MC_Core_SetGateDriverPwmFreq>:
  * @param[in] pMc motor control handle
  * @param[in] FrequencyHzToSet frequency in Hz to be set
  * @retval Function Status
  */
MC_FuncStatus_t MC_Core_SetGateDriverPwmFreq(MC_Handle_t* pMc, uint32_t FrequencyHzToSet)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  if (pMc->status != MC_STOP)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d002      	beq.n	8001d38 <MC_Core_SetGateDriverPwmFreq+0x18>
  {
    MC_Core_Stop(pMc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fef0 	bl	8002b18 <MC_Core_Stop>
  }
  pMc->hf_timer_period = (SysClockFrequency/(FrequencyHzToSet*(MC_Core_LL_GetTimerPrescaler(pMc->phf_timer)+1))-1);
 8001d38:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <MC_Core_SetGateDriverPwmFreq+0xd8>)
 8001d3a:	681c      	ldr	r4, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fa11 	bl	8001168 <MC_Core_LL_GetTimerPrescaler>
 8001d46:	4603      	mov	r3, r0
 8001d48:	3301      	adds	r3, #1
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	821a      	strh	r2, [r3, #16]
  if (pMc->hf_timer_period != 0)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	8a1b      	ldrh	r3, [r3, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d041      	beq.n	8001dec <MC_Core_SetGateDriverPwmFreq+0xcc>
  {
    pMc->gate_driver_frequency = FrequencyHzToSet;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	671a      	str	r2, [r3, #112]	; 0x70
    MC_Core_LL_SetPeriodTimer(pMc->phf_timer, pMc->hf_timer_period);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	8a1b      	ldrh	r3, [r3, #16]
 8001d76:	4619      	mov	r1, r3
 8001d78:	4610      	mov	r0, r2
 8001d7a:	f7ff facd 	bl	8001318 <MC_Core_LL_SetPeriodTimer>
    if (pMc->pref_timer != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00c      	beq.n	8001da0 <MC_Core_SetGateDriverPwmFreq+0x80>
    {
      pMc->ref_timer_period = pMc->hf_timer_period;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	8a1a      	ldrh	r2, [r3, #16]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      MC_Core_LL_SetPeriodTimer(pMc->pref_timer, pMc->hf_timer_period);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	8a1b      	ldrh	r3, [r3, #16]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f7ff fabc 	bl	8001318 <MC_Core_LL_SetPeriodTimer>
    }
    if (pMc->bemf.ptrig_timer != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <MC_Core_SetGateDriverPwmFreq+0xa6>
    {
      pMc->bemf.trig_timer_period = pMc->hf_timer_period;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	8a1a      	ldrh	r2, [r3, #16]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
      MC_Core_LL_SetPeriodTimer(pMc->bemf.ptrig_timer, pMc->hf_timer_period);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	8a1b      	ldrh	r3, [r3, #16]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f7ff faa9 	bl	8001318 <MC_Core_LL_SetPeriodTimer>
    }
    pMc->adc_user.trig_timer_period = pMc->hf_timer_period;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	8a1a      	ldrh	r2, [r3, #16]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MC_Core_LL_SetPeriodTimer(pMc->adc_user.ptrig_timer, pMc->hf_timer_period);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	8a1b      	ldrh	r3, [r3, #16]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4610      	mov	r0, r2
 8001dde:	f7ff fa9b 	bl	8001318 <MC_Core_LL_SetPeriodTimer>
    MC_Core_Reset(pMc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fd42 	bl	800286c <MC_Core_Reset>
    return MC_FUNC_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e000      	b.n	8001dee <MC_Core_SetGateDriverPwmFreq+0xce>
  }
  else
  {
    return MC_FUNC_FAIL;
 8001dec:	2301      	movs	r3, #1
  }
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200002b4 	.word	0x200002b4

08001dfc <MC_Core_SpeedFeedbackReset>:
  * @brief  MC_Core_SpeedFeedbackReset
  * @param[in] pMc motor control handle
  * @retval  Function Status
  */
MC_FuncStatus_t MC_Core_SpeedFeedbackReset(MC_Handle_t *pMc)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  pMc->speed_fdbk_filtered = 0;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	679a      	str	r2, [r3, #120]	; 0x78
  pMc->lf_timer_period_array_completed = FALSE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	711a      	strb	r2, [r3, #4]
  pMc->lf_timer_period_array_index = 0;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	715a      	strb	r2, [r3, #5]
  for (int16_t i = MC_SPEED_ARRAY_SIZE-1; i >= 0; i--)
 8001e16:	231f      	movs	r3, #31
 8001e18:	81fb      	strh	r3, [r7, #14]
 8001e1a:	e00e      	b.n	8001e3a <MC_Core_SpeedFeedbackReset+0x3e>
  {
    pMc->lf_timer_period_array[i] = MC_LF_TIMER_MAX_PERIOD;
 8001e1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	3308      	adds	r3, #8
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e2c:	809a      	strh	r2, [r3, #4]
  for (int16_t i = MC_SPEED_ARRAY_SIZE-1; i >= 0; i--)
 8001e2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	81fb      	strh	r3, [r7, #14]
 8001e3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	daec      	bge.n	8001e1c <MC_Core_SpeedFeedbackReset+0x20>
  }
  return MC_FUNC_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <MC_Core_ConfigureBemfAdc>:
  * @param[in] pTrigTimer pointer on the handle of the timer used to trig the ADC
  * @param[in] TrigTimerChannel channel of the timer used to trig the ADC
  * @retval  Function Status
  */
MC_FuncStatus_t MC_Core_ConfigureBemfAdc(MC_Handle_t* pMc, uint32_t * pAdc, uint32_t *pTrigTimer, uint16_t TrigTimerChannel)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	807b      	strh	r3, [r7, #2]
  if ((pAdc == NULL) || (pTrigTimer == NULL))
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <MC_Core_ConfigureBemfAdc+0x1a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <MC_Core_ConfigureBemfAdc+0x1e>
  {
    return MC_FUNC_FAIL;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e011      	b.n	8001e92 <MC_Core_ConfigureBemfAdc+0x42>
  }
  pMc->bemf.padc = pAdc;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  pMc->bemf.ptrig_timer = pTrigTimer;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  pMc->bemf.trig_timer_period = pMc->hf_timer_period;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8a1a      	ldrh	r2, [r3, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
  pMc->bemf.trig_timer_channel = TrigTimerChannel;
 8001e88:	887a      	ldrh	r2, [r7, #2]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  return MC_FUNC_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <MC_Core_ConfigureBemfAdcChannel>:
  * @param[in] SamplingTime ADC sampling time to be selected
  * @param[in] BemfPhases Bemf phase to map to ADC channel
  * @retval  Function Status
  */
MC_FuncStatus_t MC_Core_ConfigureBemfAdcChannel(MC_Handle_t* pMc, uint32_t AdcChannel, uint32_t SamplingTime, MC_BemfPhases_t BemfPhase)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	70fb      	strb	r3, [r7, #3]
  if ((BemfPhase == MC_BEMF_PHASE_1) || (BemfPhase == MC_BEMF_PHASE_2) || (BemfPhase == MC_BEMF_PHASE_3))
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <MC_Core_ConfigureBemfAdcChannel+0x20>
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d002      	beq.n	8001ebe <MC_Core_ConfigureBemfAdcChannel+0x20>
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d114      	bne.n	8001ee8 <MC_Core_ConfigureBemfAdcChannel+0x4a>
  {
    pMc->bemf.adc_channel[BemfPhase] = AdcChannel;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	332a      	adds	r3, #42	; 0x2a
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	605a      	str	r2, [r3, #4]
    pMc->bemf.sampling_time = SamplingTime;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    MC_Core_LL_SetAdcSamplingTime(pMc->bemf.padc, AdcChannel, SamplingTime);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff faaf 	bl	8001442 <MC_Core_LL_SetAdcSamplingTime>
    return MC_FUNC_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e000      	b.n	8001eea <MC_Core_ConfigureBemfAdcChannel+0x4c>
  }
  else
  {
    return MC_FUNC_FAIL;
 8001ee8:	2301      	movs	r3, #1
  }
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <MC_Core_LfTimerPeriodCompute>:
  * @param[in]  CounterSnaphot
  * @param[in]  BemfIsIncreasing
  * @retval Function Status
  */
MC_FuncStatus_t MC_Core_LfTimerPeriodCompute(MC_Handle_t* pMc, uint16_t CounterSnaphot, uint8_t BemfIsIncreasing)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	460b      	mov	r3, r1
 8001efc:	807b      	strh	r3, [r7, #2]
 8001efe:	4613      	mov	r3, r2
 8001f00:	707b      	strb	r3, [r7, #1]
  {
    MC_Core_LL_ToggleZeroCrossingGpio(pMc->id);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fb68 	bl	80015dc <MC_Core_LL_ToggleZeroCrossingGpio>
    if (pMc->status == MC_VALIDATION)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	785b      	ldrb	r3, [r3, #1]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d144      	bne.n	8001f9e <MC_Core_LfTimerPeriodCompute+0xac>
    {
      if (pMc->bemf.over_threshold_events > VALIDATION_BEMF_EVENTS_MAX)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d905      	bls.n	8001f2a <MC_Core_LfTimerPeriodCompute+0x38>
      {
        pMc->status = MC_VALIDATION_BEMF_FAILURE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2209      	movs	r2, #9
 8001f22:	705a      	strb	r2, [r3, #1]
        MC_Core_LL_Error(pMc);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff f8a0 	bl	800106a <MC_Core_LL_Error>
      }
      if (BemfIsIncreasing != 0)
 8001f2a:	787b      	ldrb	r3, [r7, #1]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00c      	beq.n	8001f4a <MC_Core_LfTimerPeriodCompute+0x58>
      {
        pMc->bemf.zero_crossing_events++;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001f36:	3301      	adds	r3, #1
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        pMc->bemf.over_threshold_events = 0;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8001f48:	e007      	b.n	8001f5a <MC_Core_LfTimerPeriodCompute+0x68>
      }
      else
      {
        pMc->bemf.over_threshold_events++;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001f50:	3301      	adds	r3, #1
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      }
      if (pMc->bemf.zero_crossing_events >= VALIDATION_ZERO_CROSS_NUMBER)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001f60:	2b0b      	cmp	r3, #11
 8001f62:	d92c      	bls.n	8001fbe <MC_Core_LfTimerPeriodCompute+0xcc>
      {
        pMc->status = MC_RUN;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2205      	movs	r2, #5
 8001f68:	705a      	strb	r2, [r3, #1]
        pMc->pid_parameters.integral_term_sum = ((pMc->pulse_value) << (pMc->pid_parameters.scaling_shift));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001f70:	461a      	mov	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        pMc->pid_parameters.previous_speed = pMc->speed_fdbk_filtered;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        MC_Core_SetSpeed(pMc, RUN_SPEED_TARGET);
 8001f8a:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fd3e 	bl	8002a10 <MC_Core_SetSpeed>
        pMc->bemf.zero_crossing_events = 0;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8001f9c:	e00f      	b.n	8001fbe <MC_Core_LfTimerPeriodCompute+0xcc>
      }
    }
    else
    {
      MC_Core_LL_SetPeriodTimer(pMc->plf_timer, CounterSnaphot + (uint16_t)(((uint32_t)(RUN_ZCD_TO_COMM * (pMc->lf_timer_period))) >> 9));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	8a5b      	ldrh	r3, [r3, #18]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	23c8      	movs	r3, #200	; 0xc8
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	0a5b      	lsrs	r3, r3, #9
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f7ff f9ad 	bl	8001318 <MC_Core_LL_SetPeriodTimer>
    }
  }
  return MC_FUNC_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <MC_Core_MediumFrequencyTask>:
  *         Systick Callback - Call the Speed loop
  * @param[in] pMc Pointer on a Motor Control handle
  * @retval Function Status
  */
MC_FuncStatus_t MC_Core_MediumFrequencyTask(MC_Handle_t *pMc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  if (pMc->uw_tick_cnt == pMc->button_user.debounce_time_ms)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	f8b2 2148 	ldrh.w	r2, [r2, #328]	; 0x148
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d107      	bne.n	8001ff0 <MC_Core_MediumFrequencyTask+0x28>
  {
    pMc->button_user.enabled++;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
  }
  if (pMc->status == MC_RUN)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	f040 80b7 	bne.w	8002168 <MC_Core_MediumFrequencyTask+0x1a0>
  {
    if(pMc->tick_cnt >= pMc->control_loop_time)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7ada      	ldrb	r2, [r3, #11]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	789b      	ldrb	r3, [r3, #2]
 8002002:	429a      	cmp	r2, r3
 8002004:	f0c0 808a 	bcc.w	800211c <MC_Core_MediumFrequencyTask+0x154>
    {
      pMc->speed_target_value = pMc->speed_target_command;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	675a      	str	r2, [r3, #116]	; 0x74
      MC_Core_LL_DisableIrq();
 8002010:	f7fe ffd7 	bl	8000fc2 <MC_Core_LL_DisableIrq>
      pMc->pulse_value = MC_Core_SpeedControl(pMc);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fc7b 	bl	8001910 <MC_Core_SpeedControl>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      /* PWM ON sensing BEGIN 3 */
      if ((pMc->bemf.pwm_on_sensing_enabled == 0) && (pMc->pulse_value > pMc->bemf.pwm_on_sensing_en_thres))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800202a:	2b00      	cmp	r3, #0
 800202c:	d125      	bne.n	800207a <MC_Core_MediumFrequencyTask+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800203a:	429a      	cmp	r2, r3
 800203c:	d91d      	bls.n	800207a <MC_Core_MediumFrequencyTask+0xb2>
      {
        (pMc->bemf.pwm_on_sensing_enabled)++;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002044:	3301      	adds	r3, #1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        pMc->bemf.trig_time = pMc->bemf.pwm_on_sensing_trig_time;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
        pMc->bemf.adc_threshold_up = RUN_BEMF_THRESHOLD_UP_ON;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002060:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
        pMc->bemf.adc_threshold_down = RUN_BEMF_THRESHOLD_DOWN_ON;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800206a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        MC_Core_LL_ResetBemfGpio(pMc->id);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f888 	bl	8001188 <MC_Core_LL_ResetBemfGpio>
 8002078:	e023      	b.n	80020c2 <MC_Core_MediumFrequencyTask+0xfa>
      }
      else if ((pMc->bemf.pwm_on_sensing_enabled == 1) && (pMc->pulse_value < pMc->bemf.pwm_on_sensing_dis_thres))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002080:	2b01      	cmp	r3, #1
 8002082:	d11e      	bne.n	80020c2 <MC_Core_MediumFrequencyTask+0xfa>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8002090:	429a      	cmp	r2, r3
 8002092:	d216      	bcs.n	80020c2 <MC_Core_MediumFrequencyTask+0xfa>
      {
        pMc->bemf.pwm_on_sensing_enabled = 0;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        pMc->bemf.trig_time = pMc->bemf.pwm_off_sensing_trig_time;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
        pMc->bemf.adc_threshold_up = RUN_BEMF_THRESHOLD_UP;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	22c8      	movs	r2, #200	; 0xc8
 80020ac:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
        pMc->bemf.adc_threshold_down = RUN_BEMF_THRESHOLD_DOWN;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	22c8      	movs	r2, #200	; 0xc8
 80020b4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        MC_Core_LL_SetBemfGpio(pMc->id);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f875 	bl	80011ac <MC_Core_LL_SetBemfGpio>
      }
      /* PWM ON sensing END 3 */
      MC_Core_LL_SetDutyCycleHfPwmForStepN(pMc->phf_timer, pMc->pulse_value, pMc->step_position);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7a5b      	ldrb	r3, [r3, #9]
 80020d0:	461a      	mov	r2, r3
 80020d2:	f7ff f8c7 	bl	8001264 <MC_Core_LL_SetDutyCycleHfPwmForStepN>
      MC_Core_LL_EnableIrq();
 80020d6:	f7fe ffbf 	bl	8001058 <MC_Core_LL_EnableIrq>
      /* PWM ON sensing BEGIN 4 */
      if (pMc->step_prepared == 0)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7a9b      	ldrb	r3, [r3, #10]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <MC_Core_MediumFrequencyTask+0x134>
      {
        MC_Core_LL_SetDutyCyclePwmForAdcTrig(pMc->bemf.ptrig_timer, pMc->bemf.trig_timer_channel, pMc->bemf.trig_time);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80020f4:	461a      	mov	r2, r3
 80020f6:	f7ff f86b 	bl	80011d0 <MC_Core_LL_SetDutyCyclePwmForAdcTrig>
 80020fa:	e00b      	b.n	8002114 <MC_Core_MediumFrequencyTask+0x14c>
      }
      else
      {
        MC_Core_LL_SetDutyCyclePwmForAdcTrig(pMc->adc_user.ptrig_timer, pMc->adc_user.trig_timer_channel, pMc->adc_user.trig_time);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 800210e:	461a      	mov	r2, r3
 8002110:	f7ff f85e 	bl	80011d0 <MC_Core_LL_SetDutyCyclePwmForAdcTrig>
      }
      /* PWM ON sensing END 4 */
      pMc->tick_cnt = 1;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	72da      	strb	r2, [r3, #11]
 800211a:	e005      	b.n	8002128 <MC_Core_MediumFrequencyTask+0x160>
    }
    else
    {
      (pMc->tick_cnt)++;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7adb      	ldrb	r3, [r3, #11]
 8002120:	3301      	adds	r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	72da      	strb	r2, [r3, #11]
    }
    if (pMc->speed_fdbk_filtered > RUN_SPEED_THRESHOLD_DEMAG)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800212c:	f240 421a 	movw	r2, #1050	; 0x41a
 8002130:	4293      	cmp	r3, r2
 8002132:	d904      	bls.n	800213e <MC_Core_MediumFrequencyTask+0x176>
    {
      pMc->bemf.demagn_value = RUN_DEMAGN_DELAY_MIN;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800213c:	e01b      	b.n	8002176 <MC_Core_MediumFrequencyTask+0x1ae>
    }
    else if (pMc->speed_fdbk_filtered > STARTUP_SPEED_TARGET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002142:	2b96      	cmp	r3, #150	; 0x96
 8002144:	d90b      	bls.n	800215e <MC_Core_MediumFrequencyTask+0x196>
    {
      pMc->bemf.demagn_value = (pMc->bemf.demagn_coefficient) / (pMc->speed_fdbk_filtered);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	b29a      	uxth	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800215c:	e00b      	b.n	8002176 <MC_Core_MediumFrequencyTask+0x1ae>
    }
    else
    {
      pMc->bemf.demagn_value = VALIDATION_DEMAGN_DELAY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2204      	movs	r2, #4
 8002162:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8002166:	e006      	b.n	8002176 <MC_Core_MediumFrequencyTask+0x1ae>
    }
  }
  else if (pMc->status == MC_ALIGNMENT)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	785b      	ldrb	r3, [r3, #1]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d102      	bne.n	8002176 <MC_Core_MediumFrequencyTask+0x1ae>
  {
    MC_Core_Alignment(pMc);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fa57 	bl	8001624 <MC_Core_Alignment>
  }
  return MC_FUNC_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <MC_Core_PrepareNextStep>:
/**
  * @brief  MC_Core_PrepareNextStep
  * @retval  Function Status
  */
MC_FuncStatus_t MC_Core_PrepareNextStep(MC_Handle_t* pMc)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  (pMc->step_prepared)++;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7a9b      	ldrb	r3, [r3, #10]
 800218c:	3301      	adds	r3, #1
 800218e:	b2da      	uxtb	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	729a      	strb	r2, [r3, #10]
  pMc->bemf.demagn_counter = MC_BEMF_DEMAGN_COUNTER_INIT_VALUE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  if(pMc->direction == 0)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	78db      	ldrb	r3, [r3, #3]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10e      	bne.n	80021c2 <MC_Core_PrepareNextStep+0x42>
  {
    if(pMc->step_pos_next == 6)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7a1b      	ldrb	r3, [r3, #8]
 80021a8:	2b06      	cmp	r3, #6
 80021aa:	d103      	bne.n	80021b4 <MC_Core_PrepareNextStep+0x34>
    {
      pMc->step_pos_next = 1;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	721a      	strb	r2, [r3, #8]
 80021b2:	e014      	b.n	80021de <MC_Core_PrepareNextStep+0x5e>
    }
    else
    {
      pMc->step_pos_next++;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7a1b      	ldrb	r3, [r3, #8]
 80021b8:	3301      	adds	r3, #1
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	721a      	strb	r2, [r3, #8]
 80021c0:	e00d      	b.n	80021de <MC_Core_PrepareNextStep+0x5e>
    }
  }
  else
  {
    if(pMc->step_pos_next <= 1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7a1b      	ldrb	r3, [r3, #8]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d803      	bhi.n	80021d2 <MC_Core_PrepareNextStep+0x52>
    {
      pMc->step_pos_next = 6;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2206      	movs	r2, #6
 80021ce:	721a      	strb	r2, [r3, #8]
 80021d0:	e005      	b.n	80021de <MC_Core_PrepareNextStep+0x5e>
    }
    else
    {
      pMc->step_pos_next--;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7a1b      	ldrb	r3, [r3, #8]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	721a      	strb	r2, [r3, #8]
    }
  }
  (pMc->adc_user.channel_index)++;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80021e4:	3301      	adds	r3, #1
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
  if (pMc->adc_user.channel_index == NUMBER_OF_USER_ADC_CHANNELS)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d103      	bne.n	8002200 <MC_Core_PrepareNextStep+0x80>
  {
    pMc->adc_user.channel_index = 0;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
  }
  return MC_FUNC_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <MC_Core_ProcessAdcMeasurement>:
  * @param[in] LfTimerCounterSnapshot value of the LF timer counter at the beginning of the ADC callback
  * @param[in] AdcMeasurement the ADC conversion result, aka the ADC measurement
  * @retval  Function Status
  */
MC_FuncStatus_t  MC_Core_ProcessAdcMeasurement(MC_Handle_t* pMc, uint32_t* pAdc, uint16_t LfTimerCounterSnapshot, uint16_t AdcMeasurement)
{
 800220e:	b590      	push	{r4, r7, lr}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	4611      	mov	r1, r2
 800221a:	461a      	mov	r2, r3
 800221c:	460b      	mov	r3, r1
 800221e:	80fb      	strh	r3, [r7, #6]
 8002220:	4613      	mov	r3, r2
 8002222:	80bb      	strh	r3, [r7, #4]

  if(pMc->step_prepared == 0)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	7a9b      	ldrb	r3, [r3, #10]
 8002228:	2b00      	cmp	r3, #0
 800222a:	f040 8122 	bne.w	8002472 <MC_Core_ProcessAdcMeasurement+0x264>
  {
    pMc->step_change = 0;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	71da      	strb	r2, [r3, #7]
    if(pMc->bemf.demagn_counter > pMc->bemf.demagn_value)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8002240:	429a      	cmp	r2, r3
 8002242:	f240 810d 	bls.w	8002460 <MC_Core_ProcessAdcMeasurement+0x252>
    {
      if(pMc->direction == 0)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	78db      	ldrb	r3, [r3, #3]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 8085 	bne.w	800235a <MC_Core_ProcessAdcMeasurement+0x14c>
      {
        if (((pMc->step_position&0x1) == 0) && (AdcMeasurement > pMc->bemf.adc_threshold_up))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	7a5b      	ldrb	r3, [r3, #9]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d13c      	bne.n	80022d6 <MC_Core_ProcessAdcMeasurement+0xc8>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8002262:	88ba      	ldrh	r2, [r7, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	d936      	bls.n	80022d6 <MC_Core_ProcessAdcMeasurement+0xc8>
        {
          {
            MC_Core_LfTimerPeriodCompute(pMc, LfTimerCounterSnapshot, 1);
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	2201      	movs	r2, #1
 800226c:	4619      	mov	r1, r3
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f7ff fe3f 	bl	8001ef2 <MC_Core_LfTimerPeriodCompute>
            MC_Core_PrepareNextStep(pMc);
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff ff83 	bl	8002180 <MC_Core_PrepareNextStep>
            MC_Core_LL_SelectAdcChannelDuringCallback(pMc->bemf.padc, pMc->adc_user.padc[pMc->adc_user.channel_index], pMc->adc_user.channel[pMc->adc_user.channel_index], pMc->adc_user.sampling_time[pMc->adc_user.channel_index]);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	334a      	adds	r3, #74	; 0x4a
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002296:	461a      	mov	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3240      	adds	r2, #64	; 0x40
 800229c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	3344      	adds	r3, #68	; 0x44
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4622      	mov	r2, r4
 80022b2:	f7ff f896 	bl	80013e2 <MC_Core_LL_SelectAdcChannelDuringCallback>
            MC_Core_LL_SetDutyCyclePwmForAdcTrig(pMc->adc_user.ptrig_timer, pMc->adc_user.trig_timer_channel, pMc->adc_user.trig_time);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 80022c8:	461a      	mov	r2, r3
 80022ca:	f7fe ff81 	bl	80011d0 <MC_Core_LL_SetDutyCyclePwmForAdcTrig>
          }
          pMc->bemf.consecutive_down_counter = 0;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        }
        if (((pMc->step_position&0x1) != 0) && (AdcMeasurement < pMc->bemf.adc_threshold_down))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	7a5b      	ldrb	r3, [r3, #9]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 80ec 	beq.w	80024bc <MC_Core_ProcessAdcMeasurement+0x2ae>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80022ea:	88ba      	ldrh	r2, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f080 80e5 	bcs.w	80024bc <MC_Core_ProcessAdcMeasurement+0x2ae>
        {
          {
            MC_Core_LfTimerPeriodCompute(pMc, LfTimerCounterSnapshot, 0);
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	2200      	movs	r2, #0
 80022f6:	4619      	mov	r1, r3
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f7ff fdfa 	bl	8001ef2 <MC_Core_LfTimerPeriodCompute>
            MC_Core_PrepareNextStep(pMc);
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7ff ff3e 	bl	8002180 <MC_Core_PrepareNextStep>
            MC_Core_LL_SelectAdcChannelDuringCallback(pMc->bemf.padc, pMc->adc_user.padc[pMc->adc_user.channel_index], pMc->adc_user.channel[pMc->adc_user.channel_index], pMc->adc_user.sampling_time[pMc->adc_user.channel_index]);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	334a      	adds	r3, #74	; 0x4a
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	6859      	ldr	r1, [r3, #4]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002320:	461a      	mov	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3240      	adds	r2, #64	; 0x40
 8002326:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	3344      	adds	r3, #68	; 0x44
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4622      	mov	r2, r4
 800233c:	f7ff f851 	bl	80013e2 <MC_Core_LL_SelectAdcChannelDuringCallback>
            MC_Core_LL_SetDutyCyclePwmForAdcTrig(pMc->adc_user.ptrig_timer, pMc->adc_user.trig_timer_channel, pMc->adc_user.trig_time);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8002352:	461a      	mov	r2, r3
 8002354:	f7fe ff3c 	bl	80011d0 <MC_Core_LL_SetDutyCyclePwmForAdcTrig>
 8002358:	e0b0      	b.n	80024bc <MC_Core_ProcessAdcMeasurement+0x2ae>
          }
        }
      }
      else
      {
        if (((pMc->step_position&0x1) != 0) && (AdcMeasurement > pMc->bemf.adc_threshold_up))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	7a5b      	ldrb	r3, [r3, #9]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d03c      	beq.n	80023e0 <MC_Core_ProcessAdcMeasurement+0x1d2>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 800236c:	88ba      	ldrh	r2, [r7, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	d936      	bls.n	80023e0 <MC_Core_ProcessAdcMeasurement+0x1d2>
        {
          {
            MC_Core_LfTimerPeriodCompute(pMc, LfTimerCounterSnapshot, 1);
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	2201      	movs	r2, #1
 8002376:	4619      	mov	r1, r3
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f7ff fdba 	bl	8001ef2 <MC_Core_LfTimerPeriodCompute>
            MC_Core_PrepareNextStep(pMc);
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff fefe 	bl	8002180 <MC_Core_PrepareNextStep>
            MC_Core_LL_SelectAdcChannelDuringCallback(pMc->bemf.padc, pMc->adc_user.padc[pMc->adc_user.channel_index], pMc->adc_user.channel[pMc->adc_user.channel_index], pMc->adc_user.sampling_time[pMc->adc_user.channel_index]);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	334a      	adds	r3, #74	; 0x4a
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80023a0:	461a      	mov	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	3240      	adds	r2, #64	; 0x40
 80023a6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	3344      	adds	r3, #68	; 0x44
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4622      	mov	r2, r4
 80023bc:	f7ff f811 	bl	80013e2 <MC_Core_LL_SelectAdcChannelDuringCallback>
            MC_Core_LL_SetDutyCyclePwmForAdcTrig(pMc->adc_user.ptrig_timer, pMc->adc_user.trig_timer_channel, pMc->adc_user.trig_time);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7fe fefc 	bl	80011d0 <MC_Core_LL_SetDutyCyclePwmForAdcTrig>
          }
          pMc->bemf.consecutive_down_counter = 0;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        }
        if (((pMc->step_position&0x1) == 0) && (AdcMeasurement < pMc->bemf.adc_threshold_down))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	7a5b      	ldrb	r3, [r3, #9]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d167      	bne.n	80024bc <MC_Core_ProcessAdcMeasurement+0x2ae>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80023f2:	88ba      	ldrh	r2, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d261      	bcs.n	80024bc <MC_Core_ProcessAdcMeasurement+0x2ae>
        {
          {
            MC_Core_LfTimerPeriodCompute(pMc, LfTimerCounterSnapshot, 0);
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	2200      	movs	r2, #0
 80023fc:	4619      	mov	r1, r3
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f7ff fd77 	bl	8001ef2 <MC_Core_LfTimerPeriodCompute>
            MC_Core_PrepareNextStep(pMc);
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f7ff febb 	bl	8002180 <MC_Core_PrepareNextStep>
            MC_Core_LL_SelectAdcChannelDuringCallback(pMc->bemf.padc, pMc->adc_user.padc[pMc->adc_user.channel_index], pMc->adc_user.channel[pMc->adc_user.channel_index], pMc->adc_user.sampling_time[pMc->adc_user.channel_index]);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	334a      	adds	r3, #74	; 0x4a
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3240      	adds	r2, #64	; 0x40
 800242c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	3344      	adds	r3, #68	; 0x44
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4622      	mov	r2, r4
 8002442:	f7fe ffce 	bl	80013e2 <MC_Core_LL_SelectAdcChannelDuringCallback>
            MC_Core_LL_SetDutyCyclePwmForAdcTrig(pMc->adc_user.ptrig_timer, pMc->adc_user.trig_timer_channel, pMc->adc_user.trig_time);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8002458:	461a      	mov	r2, r3
 800245a:	f7fe feb9 	bl	80011d0 <MC_Core_LL_SetDutyCyclePwmForAdcTrig>
 800245e:	e02d      	b.n	80024bc <MC_Core_ProcessAdcMeasurement+0x2ae>
        }
      }
    }
    else
    {
      pMc->bemf.demagn_counter++;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8002466:	3301      	adds	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8002470:	e024      	b.n	80024bc <MC_Core_ProcessAdcMeasurement+0x2ae>
    }
  }
  else if (pAdc == pMc->adc_user.padc[pMc->adc_user.channel_index])
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	334a      	adds	r3, #74	; 0x4a
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	429a      	cmp	r2, r3
 8002486:	d111      	bne.n	80024ac <MC_Core_ProcessAdcMeasurement+0x29e>
  {
    /* Process user measurement */
    if (pMc->step_change!=0)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	79db      	ldrb	r3, [r3, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <MC_Core_ProcessAdcMeasurement+0x28a>
    {
      pMc->step_change = 0;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	71da      	strb	r2, [r3, #7]
 8002496:	e011      	b.n	80024bc <MC_Core_ProcessAdcMeasurement+0x2ae>
    }
    else
    {
      pMc->adc_user.measurement[pMc->adc_user.channel_index] = AdcMeasurement;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	3374      	adds	r3, #116	; 0x74
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	88ba      	ldrh	r2, [r7, #4]
 80024a8:	809a      	strh	r2, [r3, #4]
 80024aa:	e007      	b.n	80024bc <MC_Core_ProcessAdcMeasurement+0x2ae>
    }
  }
  else
  {
    pMc->status = MC_ADC_CALLBACK_FAILURE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	220c      	movs	r2, #12
 80024b0:	705a      	strb	r2, [r3, #1]
    MC_Core_LL_Error(pMc);
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f7fe fdd9 	bl	800106a <MC_Core_LL_Error>
    return MC_FUNC_FAIL;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <MC_Core_ProcessAdcMeasurement+0x2b0>
  }
  return MC_FUNC_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}

080024c6 <MC_Core_NextStep>:
  * @param[in] pMc motor control handle
  * @param[in] HfTimerCounterSnapshot value of the HF timer counter at the beginning of the LF timer callback
  * @retval  Function Status
  */
MC_FuncStatus_t MC_Core_NextStep(MC_Handle_t *pMc, uint16_t HfTimerCounterSnapshot)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	807b      	strh	r3, [r7, #2]
  pMc->lf_timer_period = MC_Core_LL_GetTimerPeriod(pMc->plf_timer);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fe38 	bl	800114c <MC_Core_LL_GetTimerPeriod>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	825a      	strh	r2, [r3, #18]
  (pMc->step_change)++;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	79db      	ldrb	r3, [r3, #7]
 80024e8:	3301      	adds	r3, #1
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	71da      	strb	r2, [r3, #7]
  if (pMc->status == MC_RUN)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d128      	bne.n	800254a <MC_Core_NextStep+0x84>
  {
    if (pMc->lf_timer_period == MC_LF_TIMER_MAX_PERIOD)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8a5b      	ldrh	r3, [r3, #18]
 80024fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002500:	4293      	cmp	r3, r2
 8002502:	d107      	bne.n	8002514 <MC_Core_NextStep+0x4e>
    {
      pMc->status = MC_LF_TIMER_FAILURE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	220b      	movs	r2, #11
 8002508:	705a      	strb	r2, [r3, #1]
      MC_Core_LL_Error(pMc);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fdad 	bl	800106a <MC_Core_LL_Error>
      return MC_FUNC_FAIL;
 8002510:	2301      	movs	r3, #1
 8002512:	e0d7      	b.n	80026c4 <MC_Core_NextStep+0x1fe>
    }
    else if (pMc->bemf.consecutive_down_counter > RUN_CONSEC_BEMF_DOWN_MAX)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800251a:	2b0a      	cmp	r3, #10
 800251c:	d907      	bls.n	800252e <MC_Core_NextStep+0x68>
    {
      pMc->status = MC_SPEEDFBKERROR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2206      	movs	r2, #6
 8002522:	705a      	strb	r2, [r3, #1]
      MC_Core_LL_Error(pMc);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7fe fda0 	bl	800106a <MC_Core_LL_Error>
      return MC_FUNC_FAIL;
 800252a:	2301      	movs	r3, #1
 800252c:	e0ca      	b.n	80026c4 <MC_Core_NextStep+0x1fe>
    }
    else
    {
      pMc->speed_fdbk_filtered = MC_Core_SpeedCompute(pMc);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff f9c0 	bl	80018b4 <MC_Core_SpeedCompute>
 8002534:	4602      	mov	r2, r0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	679a      	str	r2, [r3, #120]	; 0x78
      MC_Core_LL_SetPeriodTimer(pMc->plf_timer, MC_LF_TIMER_MAX_PERIOD);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800253e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fee8 	bl	8001318 <MC_Core_LL_SetPeriodTimer>
 8002548:	e024      	b.n	8002594 <MC_Core_NextStep+0xce>
    }
  }
  else if ((pMc->status == MC_STARTUP) || (pMc->status == MC_VALIDATION))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	785b      	ldrb	r3, [r3, #1]
 800254e:	2b03      	cmp	r3, #3
 8002550:	d003      	beq.n	800255a <MC_Core_NextStep+0x94>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	785b      	ldrb	r3, [r3, #1]
 8002556:	2b04      	cmp	r3, #4
 8002558:	d11c      	bne.n	8002594 <MC_Core_NextStep+0xce>
  {
    if (pMc->status == MC_STARTUP)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	785b      	ldrb	r3, [r3, #1]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d102      	bne.n	8002568 <MC_Core_NextStep+0xa2>
    {
      MC_Core_RampCalc(pMc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f8b2 	bl	80026cc <MC_Core_RampCalc>
    }
    if (pMc->steps < VALIDATION_STEPS_MAX)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800256e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002572:	d207      	bcs.n	8002584 <MC_Core_NextStep+0xbe>
    {
      (pMc->steps)++;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002582:	e007      	b.n	8002594 <MC_Core_NextStep+0xce>
    }
    else
    {
      pMc->status = MC_VALIDATION_FAILURE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2208      	movs	r2, #8
 8002588:	705a      	strb	r2, [r3, #1]
      MC_Core_LL_Error(pMc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fd6d 	bl	800106a <MC_Core_LL_Error>
      return MC_FUNC_FAIL;
 8002590:	2301      	movs	r3, #1
 8002592:	e097      	b.n	80026c4 <MC_Core_NextStep+0x1fe>
    }
  }
  if (pMc->step_prepared == 0)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7a9b      	ldrb	r3, [r3, #10]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d106      	bne.n	80025aa <MC_Core_NextStep+0xe4>
  {
    pMc->bemf.zero_crossing_events = 0;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    MC_Core_PrepareNextStep(pMc);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff fdeb 	bl	8002180 <MC_Core_PrepareNextStep>
  }
  MC_Core_LL_ToggleCommGpio(pMc->id);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f804 	bl	80015bc <MC_Core_LL_ToggleCommGpio>
  MC_Core_SixStepTable(pMc, pMc->pulse_value, pMc->step_pos_next);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7a1b      	ldrb	r3, [r3, #8]
 80025be:	461a      	mov	r2, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff f8e3 	bl	800178c <MC_Core_SixStepTable>
  MC_Core_LL_GenerateComEvent(pMc->phf_timer);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fd58 	bl	8001080 <MC_Core_LL_GenerateComEvent>
  pMc->step_position = pMc->step_pos_next;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7a1a      	ldrb	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	725a      	strb	r2, [r3, #9]
  if (pMc->status >= MC_VALIDATION)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	785b      	ldrb	r3, [r3, #1]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d96d      	bls.n	80026bc <MC_Core_NextStep+0x1f6>
  {
    MC_Core_LL_SelectAdcChannel(pMc->adc_user.padc[pMc->adc_user.channel_index], pMc->bemf.padc, pMc->bemf.current_adc_channel, pMc->bemf.sampling_time);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	334a      	adds	r3, #74	; 0x4a
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	6858      	ldr	r0, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002602:	f7fe feac 	bl	800135e <MC_Core_LL_SelectAdcChannel>
    /* PWM ON sensing BEGIN 5 */
    if ((pMc->bemf.pwm_on_sensing_enabled == 0) && (pMc->pulse_value > pMc->bemf.pwm_on_sensing_en_thres))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800260c:	2b00      	cmp	r3, #0
 800260e:	d125      	bne.n	800265c <MC_Core_NextStep+0x196>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800261c:	429a      	cmp	r2, r3
 800261e:	d91d      	bls.n	800265c <MC_Core_NextStep+0x196>
    {
      (pMc->bemf.pwm_on_sensing_enabled)++;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002626:	3301      	adds	r3, #1
 8002628:	b2da      	uxtb	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
      pMc->bemf.trig_time = pMc->bemf.pwm_on_sensing_trig_time;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
      pMc->bemf.adc_threshold_up = RUN_BEMF_THRESHOLD_UP_ON;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002642:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
      pMc->bemf.adc_threshold_down = RUN_BEMF_THRESHOLD_DOWN_ON;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800264c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
      MC_Core_LL_ResetBemfGpio(pMc->id);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fd97 	bl	8001188 <MC_Core_LL_ResetBemfGpio>
 800265a:	e023      	b.n	80026a4 <MC_Core_NextStep+0x1de>
    }
    else if ((pMc->bemf.pwm_on_sensing_enabled == 1) && (pMc->pulse_value < pMc->bemf.pwm_on_sensing_dis_thres))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002662:	2b01      	cmp	r3, #1
 8002664:	d11e      	bne.n	80026a4 <MC_Core_NextStep+0x1de>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8002672:	429a      	cmp	r2, r3
 8002674:	d216      	bcs.n	80026a4 <MC_Core_NextStep+0x1de>
    {
      pMc->bemf.pwm_on_sensing_enabled = 0;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
      pMc->bemf.trig_time = pMc->bemf.pwm_off_sensing_trig_time;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
      pMc->bemf.adc_threshold_up = RUN_BEMF_THRESHOLD_UP;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	22c8      	movs	r2, #200	; 0xc8
 800268e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
      pMc->bemf.adc_threshold_down = RUN_BEMF_THRESHOLD_DOWN;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	22c8      	movs	r2, #200	; 0xc8
 8002696:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
      MC_Core_LL_SetBemfGpio(pMc->id);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fd84 	bl	80011ac <MC_Core_LL_SetBemfGpio>
    }
    /* PWM ON sensing END 5 */
    MC_Core_LL_SetDutyCyclePwmForAdcTrig(pMc->bemf.ptrig_timer, pMc->bemf.trig_timer_channel, pMc->bemf.trig_time);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80026b6:	461a      	mov	r2, r3
 80026b8:	f7fe fd8a 	bl	80011d0 <MC_Core_LL_SetDutyCyclePwmForAdcTrig>
  }
  pMc->step_prepared = 0;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	729a      	strb	r2, [r3, #10]
  return MC_FUNC_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <MC_Core_RampCalc>:
/**
  * @brief  MC_Core_RampCalc
  * @retval  Function Status
  */
MC_FuncStatus_t MC_Core_RampCalc(MC_Handle_t* pMc)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if (pMc->speed_fdbk_filtered == 0)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d152      	bne.n	8002782 <MC_Core_RampCalc+0xb6>
  {
    int16_t lf_prescaler_value;
    lf_prescaler_value = (SysClockFrequency/(pMc->motor_charac.pole_pairs*pMc->acceleration*(((MC_LF_TIMER_MAX_PERIOD+1)*MC_NUMBER_OF_STEPS_IN_6STEP_ALGO)/MC_SECONDS_PER_MINUTE)))-1;
 80026dc:	4b62      	ldr	r3, [pc, #392]	; (8002868 <MC_Core_RampCalc+0x19c>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80026e6:	4619      	mov	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	f641 1199 	movw	r1, #6553	; 0x1999
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29b      	uxth	r3, r3
 8002702:	813b      	strh	r3, [r7, #8]
    if (lf_prescaler_value < 0)
 8002704:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	da01      	bge.n	8002710 <MC_Core_RampCalc+0x44>
    {
      return MC_FUNC_FAIL;
 800270c:	2301      	movs	r3, #1
 800270e:	e0a7      	b.n	8002860 <MC_Core_RampCalc+0x194>
    }
    else
    {
      pMc->lf_timer_prescaler = lf_prescaler_value;
 8002710:	893a      	ldrh	r2, [r7, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      MC_Core_LL_SetPrescalerTimer(pMc->plf_timer, lf_prescaler_value);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800271c:	893a      	ldrh	r2, [r7, #8]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe fe0c 	bl	800133e <MC_Core_LL_SetPrescalerTimer>
      pMc->speed_fdbk_filtered += pMc->acceleration;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800272e:	441a      	add	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	679a      	str	r2, [r3, #120]	; 0x78
      pMc->lf_timer_period = (10*SysClockFrequency)/((uint32_t) (pMc->motor_charac.pole_pairs*pMc->speed_fdbk_filtered*((pMc->lf_timer_prescaler)+1)));
 8002734:	4b4c      	ldr	r3, [pc, #304]	; (8002868 <MC_Core_RampCalc+0x19c>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4619      	mov	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002748:	461a      	mov	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8002758:	3201      	adds	r2, #1
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002762:	b29a      	uxth	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	825a      	strh	r2, [r3, #18]
      MC_Core_LL_SetPeriodTimer(pMc->plf_timer, pMc->lf_timer_period);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8a5b      	ldrh	r3, [r3, #18]
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f7fe fdd0 	bl	8001318 <MC_Core_LL_SetPeriodTimer>
      pMc->acceleration = STARTUP_ACCELERATION;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800277e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002780:	e06d      	b.n	800285e <MC_Core_RampCalc+0x192>
    }
  }
  else
  {
    if (pMc->speed_fdbk_filtered < pMc->speed_target_command)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800278a:	429a      	cmp	r2, r3
 800278c:	d21d      	bcs.n	80027ca <MC_Core_RampCalc+0xfe>
    {
      uint16_t speed_increase = (10*pMc->acceleration)/(pMc->motor_charac.pole_pairs*pMc->speed_fdbk_filtered);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	461a      	mov	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80027a2:	4619      	mov	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	817b      	strh	r3, [r7, #10]
      if (speed_increase != 0)
 80027b2:	897b      	ldrh	r3, [r7, #10]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <MC_Core_RampCalc+0xfa>
      {
        pMc->speed_fdbk_filtered += speed_increase;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80027bc:	897b      	ldrh	r3, [r7, #10]
 80027be:	441a      	add	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	679a      	str	r2, [r3, #120]	; 0x78
 80027c4:	e029      	b.n	800281a <MC_Core_RampCalc+0x14e>
      }
      else
      {
        return MC_FUNC_FAIL;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e04a      	b.n	8002860 <MC_Core_RampCalc+0x194>
      }
    }
    else
    {
      pMc->status = MC_VALIDATION;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2204      	movs	r2, #4
 80027ce:	705a      	strb	r2, [r3, #1]
      pMc->lf_timer_prescaler = RUN_LF_TIMER_PRESCALER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2215      	movs	r2, #21
 80027d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      MC_Core_LL_SetPrescalerTimer(pMc->plf_timer, pMc->lf_timer_prescaler);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7fe fdaa 	bl	800133e <MC_Core_LL_SetPrescalerTimer>
      MC_Core_LL_StartAdcIt(pMc->bemf.padc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fe37 	bl	8001464 <MC_Core_LL_StartAdcIt>
      for (uint32_t i = 0; i < NUMBER_OF_USER_ADC_CHANNELS; i++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	e00b      	b.n	8002814 <MC_Core_RampCalc+0x148>
      {
        MC_Core_LL_StartAdcIt(pMc->adc_user.padc[i]);
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	334a      	adds	r3, #74	; 0x4a
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fe2b 	bl	8001464 <MC_Core_LL_StartAdcIt>
      for (uint32_t i = 0; i < NUMBER_OF_USER_ADC_CHANNELS; i++)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3301      	adds	r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b04      	cmp	r3, #4
 8002818:	d9f0      	bls.n	80027fc <MC_Core_RampCalc+0x130>
      }
    }
    pMc->lf_timer_period = (10*SysClockFrequency)/((uint32_t) (pMc->motor_charac.pole_pairs*pMc->speed_fdbk_filtered*((pMc->lf_timer_prescaler)+1)));
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <MC_Core_RampCalc+0x19c>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4619      	mov	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800282e:	461a      	mov	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 800283e:	3201      	adds	r2, #1
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	fbb1 f3f3 	udiv	r3, r1, r3
 8002848:	b29a      	uxth	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	825a      	strh	r2, [r3, #18]
    MC_Core_LL_SetPeriodTimer(pMc->plf_timer, pMc->lf_timer_period);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8a5b      	ldrh	r3, [r3, #18]
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f7fe fd5d 	bl	8001318 <MC_Core_LL_SetPeriodTimer>
  }
  return MC_FUNC_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200002b4 	.word	0x200002b4

0800286c <MC_Core_Reset>:
/**
  * @brief  MC_Core_Reset
  * @retval  Function Status
  */
MC_FuncStatus_t MC_Core_Reset(MC_Handle_t *pMc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Motor parameters reset */
  if (pMc->bemf.padc != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 80a9 	beq.w	80029d2 <MC_Core_Reset+0x166>
  {
    pMc->bemf.adc_threshold_up = RUN_BEMF_THRESHOLD_UP;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	22c8      	movs	r2, #200	; 0xc8
 8002884:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
    pMc->bemf.adc_threshold_down = RUN_BEMF_THRESHOLD_DOWN;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	22c8      	movs	r2, #200	; 0xc8
 800288c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    pMc->bemf.over_threshold_events = 0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    pMc->bemf.consecutive_down_counter = 0;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    pMc->bemf.demagn_counter = MC_BEMF_DEMAGN_COUNTER_INIT_VALUE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
    pMc->bemf.demagn_value = VALIDATION_DEMAGN_DELAY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2204      	movs	r2, #4
 80028ac:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
    pMc->bemf.demagn_coefficient = ((uint32_t) ((RUN_DEMAG_TIME_STEP_RATIO * MC_Core_LL_GetGateDrivingPwmFrequency(pMc->phf_timer)) / (100 * MOTOR_NUM_POLE_PAIRS)));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fbf0 	bl	800109a <MC_Core_LL_GetGateDrivingPwmFrequency>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	4a45      	ldr	r2, [pc, #276]	; (80029dc <MC_Core_Reset+0x170>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0a1a      	lsrs	r2, r3, #8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    pMc->bemf.zero_crossing_events = 0;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    /* PWM ON sensing BEGIN 6 */
    pMc->bemf.pwm_on_sensing_enabled = 0;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
    pMc->bemf.pwm_off_sensing_trig_time = MC_Core_ComputePulseValue(pMc, pMc->bemf.trig_timer_period, BEMF_ADC_TRIG_TIME);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80028e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fe84 	bl	80015fc <MC_Core_ComputePulseValue>
 80028f4:	4603      	mov	r3, r0
 80028f6:	461a      	mov	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    pMc->bemf.pwm_on_sensing_trig_time = MC_Core_ComputePulseValue(pMc, pMc->bemf.trig_timer_period, BEMF_ADC_TRIG_TIME_PWM_ON);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002904:	22c8      	movs	r2, #200	; 0xc8
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7fe fe77 	bl	80015fc <MC_Core_ComputePulseValue>
 800290e:	4603      	mov	r3, r0
 8002910:	461a      	mov	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    pMc->bemf.pwm_on_sensing_en_thres = MC_Core_ComputePulseValue(pMc, pMc->bemf.trig_timer_period, BEMF_PWM_ON_ENABLE_THRES);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800291e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002922:	4619      	mov	r1, r3
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7fe fe69 	bl	80015fc <MC_Core_ComputePulseValue>
 800292a:	4603      	mov	r3, r0
 800292c:	461a      	mov	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    pMc->bemf.pwm_on_sensing_dis_thres = MC_Core_ComputePulseValue(pMc, pMc->bemf.trig_timer_period, BEMF_PWM_ON_DISABLE_THRES);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800293a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7fe fe5b 	bl	80015fc <MC_Core_ComputePulseValue>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
  }
  else
  {
    return MC_FUNC_FAIL;
  }
  pMc->acceleration = STARTUP_SPEED_MINIMUM;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	223c      	movs	r2, #60	; 0x3c
 8002954:	66da      	str	r2, [r3, #108]	; 0x6c
  pMc->control_loop_time = RUN_CONTROL_LOOP_TIME;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2204      	movs	r2, #4
 800295a:	709a      	strb	r2, [r3, #2]
  pMc->direction = STARTUP_DIRECTION;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	70da      	strb	r2, [r3, #3]
  pMc->step_pos_next = ALIGNMENT_STEP;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	721a      	strb	r2, [r3, #8]
  pMc->steps = 0;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Private variables reset */
  pMc->uw_tick_cnt = 0;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  pMc->align_index = 0;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	819a      	strh	r2, [r3, #12]
  pMc->lf_timer_period = MC_LF_TIMER_MAX_PERIOD;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002984:	825a      	strh	r2, [r3, #18]
  pMc->step_position = 0;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	725a      	strb	r2, [r3, #9]
  pMc->step_change = 0;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	71da      	strb	r2, [r3, #7]
  pMc->step_prepared = 0;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	729a      	strb	r2, [r3, #10]
  pMc->tick_cnt = 0;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	72da      	strb	r2, [r3, #11]
  pMc->adc_user.channel_index = 0;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8

  /* Compute the location of the ADC USER measurement trigger in the trig timer period */
  MC_Core_SetAdcUserTrigTime(pMc, USER_ADC_TRIG_TIME);
 80029a6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff f990 	bl	8001cd0 <MC_Core_SetAdcUserTrigTime>
  MC_Core_SetAdcBemfTrigTime(pMc, BEMF_ADC_TRIG_TIME);
 80029b0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f813 	bl	80029e0 <MC_Core_SetAdcBemfTrigTime>

  /* Store the duty cycle to be programmed in MC_ALIGNMENT state */
  MC_Core_SetStartupDutyCycle(pMc, STARTUP_DUTY_CYCLE);
 80029ba:	2196      	movs	r1, #150	; 0x96
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f83a 	bl	8002a36 <MC_Core_SetStartupDutyCycle>

  /* Speed variables reset */
  MC_Core_SpeedFeedbackReset(pMc);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff fa1a 	bl	8001dfc <MC_Core_SpeedFeedbackReset>

  /* Speed PID regulator parameters */
  MC_Core_SpeedRegulatorReset(pMc);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff f837 	bl	8001a3c <MC_Core_SpeedRegulatorReset>

  return MC_FUNC_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e000      	b.n	80029d4 <MC_Core_Reset+0x168>
    return MC_FUNC_FAIL;
 80029d2:	2301      	movs	r3, #1
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	5d9f7391 	.word	0x5d9f7391

080029e0 <MC_Core_SetAdcBemfTrigTime>:
  * @brief  MC_Core_SetAdcBemfTrigTime
  * @param[in] DutyCycleToSet Duty cycle in 1/1024 of PWM period
  * @retval Function Status
  */
MC_FuncStatus_t MC_Core_SetAdcBemfTrigTime(MC_Handle_t* pMc, uint32_t DutyCycleToSet)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  pMc->bemf.trig_time = (uint16_t)((pMc->bemf.trig_timer_period*DutyCycleToSet) >> MC_DUTY_CYCLE_SCALING_SHIFT);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80029f0:	461a      	mov	r2, r3
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	fb02 f303 	mul.w	r3, r2, r3
 80029f8:	0a9b      	lsrs	r3, r3, #10
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
  return MC_FUNC_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <MC_Core_SetSpeed>:
  * @brief  MC_Core_SetSpeed
  * @param[in] SpeedToSet
  * @retval Function Status
  */
MC_FuncStatus_t MC_Core_SetSpeed(MC_Handle_t *pMc, uint32_t SpeedToSet)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  pMc->speed_target_value = pMc->speed_target_command;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	675a      	str	r2, [r3, #116]	; 0x74
  pMc->speed_target_command = SpeedToSet;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	67da      	str	r2, [r3, #124]	; 0x7c
  return MC_FUNC_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <MC_Core_SetStartupDutyCycle>:
  * @brief  MC_Core_SetStartupDutyCycle
  * @param[in] DutyCycleToSet Duty cycle in 1/1024 of PWM period
  * @retval Function Status
  */
MC_FuncStatus_t MC_Core_SetStartupDutyCycle(MC_Handle_t* pMc, uint32_t DutyCycleToSet)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  pMc->startup_reference = (uint16_t)((DutyCycleToSet * (pMc->hf_timer_period)) >> MC_DUTY_CYCLE_SCALING_SHIFT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8a1b      	ldrh	r3, [r3, #16]
 8002a44:	461a      	mov	r2, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	0a9b      	lsrs	r3, r3, #10
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  return MC_FUNC_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <MC_Core_Start>:
  * @brief  MC_Core_Start
  * @param  None
  * @retval Function Status
  */
MC_FuncStatus_t MC_Core_Start(MC_Handle_t *pMc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if (pMc->status == MC_STOP)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	785b      	ldrb	r3, [r3, #1]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d14c      	bne.n	8002b0e <MC_Core_Start+0xaa>
  {
    pMc->button_user.enabled = 0;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    pMc->uw_tick_cnt = 0;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    pMc->pulse_value = pMc->startup_reference;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    MC_Core_LL_CalibrateAdc(pMc->bemf.padc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fa6c 	bl	8000f74 <MC_Core_LL_CalibrateAdc>
    for (uint32_t i = 0; i < NUMBER_OF_USER_ADC_CHANNELS; i++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e00b      	b.n	8002aba <MC_Core_Start+0x56>
    {
      MC_Core_LL_CalibrateAdc(pMc->adc_user.padc[i]);
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	334a      	adds	r3, #74	; 0x4a
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fa60 	bl	8000f74 <MC_Core_LL_CalibrateAdc>
    for (uint32_t i = 0; i < NUMBER_OF_USER_ADC_CHANNELS; i++)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d9f0      	bls.n	8002aa2 <MC_Core_Start+0x3e>
    }
    MC_Core_LL_SetDutyCyclePwmForAdcTrig(pMc->bemf.ptrig_timer, pMc->bemf.trig_timer_channel, pMc->bemf.trig_time);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f7fe fb7c 	bl	80011d0 <MC_Core_LL_SetDutyCyclePwmForAdcTrig>
    MC_Core_LL_ConfigureCommutationEvent(pMc->phf_timer, NULL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fa60 	bl	8000fa4 <MC_Core_LL_ConfigureCommutationEvent>
    if (pMc->pref_timer != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00d      	beq.n	8002b08 <MC_Core_Start+0xa4>
    {
      MC_Core_LL_SetDutyCycleRefPwm(pMc->pref_timer, pMc->ref_timer_period);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7fe fbfc 	bl	80012f6 <MC_Core_LL_SetDutyCycleRefPwm>
      MC_Core_LL_StartRefPwm(pMc->pref_timer);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fcef 	bl	80014e6 <MC_Core_LL_StartRefPwm>
    }
    pMc->status = MC_ALIGNMENT;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	705a      	strb	r2, [r3, #1]
  }
  return MC_FUNC_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <MC_Core_Stop>:
  * @brief  MC_Core_Stop
  * @param  None
  * @retval Function Status
  */
MC_FuncStatus_t MC_Core_Stop(MC_Handle_t *pMc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  MC_Core_LL_DisableIrq();
 8002b20:	f7fe fa4f 	bl	8000fc2 <MC_Core_LL_DisableIrq>
  MC_Core_LL_StopTimerIt(pMc->plf_timer);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe fd23 	bl	8001574 <MC_Core_LL_StopTimerIt>
  MC_Core_LL_StopHfPwms(pMc->phf_timer);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fcf5 	bl	8001522 <MC_Core_LL_StopHfPwms>
  MC_Core_LL_SetDutyCycleHfPwms(pMc->phf_timer, 0, 0, 0);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	f7fe fbb2 	bl	80012aa <MC_Core_LL_SetDutyCycleHfPwms>
  MC_Core_LL_StopAdcIt(pMc->bemf.padc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe fcdd 	bl	800150c <MC_Core_LL_StopAdcIt>
  for (uint32_t i = 0; i < NUMBER_OF_USER_ADC_CHANNELS; i++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e00b      	b.n	8002b70 <MC_Core_Stop+0x58>
  {
    MC_Core_LL_StopAdcIt(pMc->adc_user.padc[i]);
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	334a      	adds	r3, #74	; 0x4a
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fcd1 	bl	800150c <MC_Core_LL_StopAdcIt>
  for (uint32_t i = 0; i < NUMBER_OF_USER_ADC_CHANNELS; i++)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d9f0      	bls.n	8002b58 <MC_Core_Stop+0x40>
  }
  if (pMc->pref_timer != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <MC_Core_Stop+0x70>
  {
    MC_Core_LL_StopRefPwm(pMc->pref_timer);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fd0a 	bl	800159c <MC_Core_LL_StopRefPwm>
  }
  pMc->status = MC_STOP;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	705a      	strb	r2, [r3, #1]
  pMc->button_user.enabled = 0;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
  MC_Core_LL_EnableIrq();
 8002b96:	f7fe fa5f 	bl	8001058 <MC_Core_LL_EnableIrq>

  /* Motor parameters and private variable initialisation */
  MC_Core_Reset(pMc);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fe66 	bl	800286c <MC_Core_Reset>

  return MC_FUNC_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <LL_ADC_SetCommonPathInternalCh>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_TIM_OC_SetDeadTime>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <MCboot>:
  * @{
  */

/* Initializes the Motor subsystem core according to user defined parameters */
void MCboot( MC_Handle_t* pMCIList[] )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	6078      	str	r0, [r7, #4]
  /* NUCLEO-STM32G431RB + X-NUCLEO-IHM16M1, ADC1 config */
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc1.Instance), LL_ADC_PATH_INTERNAL_VREFINT);
 8002c00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c04:	4846      	ldr	r0, [pc, #280]	; (8002d20 <MCboot+0x128>)
 8002c06:	f7ff ffd0 	bl	8002baa <LL_ADC_SetCommonPathInternalCh>
  /* TIM1 config */
  LL_TIM_OC_SetDeadTime(htim1.Instance, DEAD_TIME);
 8002c0a:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <MCboot+0x12c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	211e      	movs	r1, #30
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ffdd 	bl	8002bd0 <LL_TIM_OC_SetDeadTime>

  /* Timers initialization */
  __HAL_DBGMCU_FREEZE_TIM1();
 8002c16:	4b44      	ldr	r3, [pc, #272]	; (8002d28 <MCboot+0x130>)
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	4a43      	ldr	r2, [pc, #268]	; (8002d28 <MCboot+0x130>)
 8002c1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c20:	6113      	str	r3, [r2, #16]
  __HAL_DBGMCU_FREEZE_TIM4();
 8002c22:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <MCboot+0x130>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	4a40      	ldr	r2, [pc, #256]	; (8002d28 <MCboot+0x130>)
 8002c28:	f043 0304 	orr.w	r3, r3, #4
 8002c2c:	6093      	str	r3, [r2, #8]

  IHM16M1_MOTOR_DRIVER_Init();
 8002c2e:	f008 fc01 	bl	800b434 <IHM16M1_MOTOR_DRIVER_Init>
  IHM16M1_MOTOR_DRIVER_SetPwrStage(STSPIN830_PWR_ENABLE);
 8002c32:	2001      	movs	r0, #1
 8002c34:	f008 fc38 	bl	800b4a8 <IHM16M1_MOTOR_DRIVER_SetPwrStage>
  IHM16M1_MOTOR_DRIVER_SetStby(STSPIN830_STBY_DISABLE);
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f008 fc4d 	bl	800b4d8 <IHM16M1_MOTOR_DRIVER_SetStby>

  MC_Core_AssignTimers( pMCIList[0], (uint32_t *)&htim1, (uint32_t *)&htim4, (uint32_t *)&htim3 );
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <MCboot+0x134>)
 8002c44:	4a3a      	ldr	r2, [pc, #232]	; (8002d30 <MCboot+0x138>)
 8002c46:	4937      	ldr	r1, [pc, #220]	; (8002d24 <MCboot+0x12c>)
 8002c48:	f7fe ff36 	bl	8001ab8 <MC_Core_AssignTimers>
  MC_Core_ConfigureBemfAdc( pMCIList[0], (uint32_t *)&hadc1, (uint32_t *)&htim1, (uint16_t)LL_TIM_CHANNEL_CH4 );
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c54:	4a33      	ldr	r2, [pc, #204]	; (8002d24 <MCboot+0x12c>)
 8002c56:	4937      	ldr	r1, [pc, #220]	; (8002d34 <MCboot+0x13c>)
 8002c58:	f7ff f8fa 	bl	8001e50 <MC_Core_ConfigureBemfAdc>
  MC_Core_ConfigureBemfAdcChannel( pMCIList[0], IHM16M1_ADC_BEMF_CH1, IHM16M1_ADC_BEMF_ST, MC_BEMF_PHASE_1 );
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	2300      	movs	r3, #0
 8002c62:	2202      	movs	r2, #2
 8002c64:	4934      	ldr	r1, [pc, #208]	; (8002d38 <MCboot+0x140>)
 8002c66:	f7ff f91a 	bl	8001e9e <MC_Core_ConfigureBemfAdcChannel>
  MC_Core_ConfigureBemfAdcChannel( pMCIList[0], IHM16M1_ADC_BEMF_CH2, IHM16M1_ADC_BEMF_ST, MC_BEMF_PHASE_2 );
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	2301      	movs	r3, #1
 8002c70:	2202      	movs	r2, #2
 8002c72:	4932      	ldr	r1, [pc, #200]	; (8002d3c <MCboot+0x144>)
 8002c74:	f7ff f913 	bl	8001e9e <MC_Core_ConfigureBemfAdcChannel>
  MC_Core_ConfigureBemfAdcChannel( pMCIList[0], IHM16M1_ADC_BEMF_CH3, IHM16M1_ADC_BEMF_ST, MC_BEMF_PHASE_3 );
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	2202      	movs	r2, #2
 8002c80:	492f      	ldr	r1, [pc, #188]	; (8002d40 <MCboot+0x148>)
 8002c82:	f7ff f90c 	bl	8001e9e <MC_Core_ConfigureBemfAdcChannel>

  MC_Core_ConfigureUserAdc( pMCIList[0], (uint32_t *)&htim1, (uint16_t)LL_TIM_CHANNEL_CH4 );
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c8e:	4925      	ldr	r1, [pc, #148]	; (8002d24 <MCboot+0x12c>)
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe ff40 	bl	8001b16 <MC_Core_ConfigureUserAdc>
  MC_Core_ConfigureUserAdcChannel( pMCIList[0], (uint32_t *)&hadc2, IHM16M1_ADC_SPEED, IHM16M1_ADC_SPEED_ST, MC_USER_MEAS_1 );
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <MCboot+0x14c>)
 8002ca2:	4929      	ldr	r1, [pc, #164]	; (8002d48 <MCboot+0x150>)
 8002ca4:	f7fe ff57 	bl	8001b56 <MC_Core_ConfigureUserAdcChannel>
  MC_Core_ConfigureUserAdcChannel( pMCIList[0], (uint32_t *)&hadc2, IHM16M1_ADC_CURRENT, IHM16M1_ADC_CURRENT_ST, MC_USER_MEAS_2 );
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	2301      	movs	r3, #1
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	4a26      	ldr	r2, [pc, #152]	; (8002d4c <MCboot+0x154>)
 8002cb4:	4924      	ldr	r1, [pc, #144]	; (8002d48 <MCboot+0x150>)
 8002cb6:	f7fe ff4e 	bl	8001b56 <MC_Core_ConfigureUserAdcChannel>
  MC_Core_ConfigureUserAdcChannel( pMCIList[0], (uint32_t *)&hadc2, IHM16M1_ADC_VBUS, IHM16M1_ADC_VBUS_ST, MC_USER_MEAS_3 );
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <MCboot+0x158>)
 8002cc6:	4920      	ldr	r1, [pc, #128]	; (8002d48 <MCboot+0x150>)
 8002cc8:	f7fe ff45 	bl	8001b56 <MC_Core_ConfigureUserAdcChannel>
  MC_Core_ConfigureUserAdcChannel( pMCIList[0], (uint32_t *)&hadc2, IHM16M1_ADC_TEMP, IHM16M1_ADC_TEMP_ST, MC_USER_MEAS_4 );
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <MCboot+0x15c>)
 8002cd8:	491b      	ldr	r1, [pc, #108]	; (8002d48 <MCboot+0x150>)
 8002cda:	f7fe ff3c 	bl	8001b56 <MC_Core_ConfigureUserAdcChannel>
  MC_Core_ConfigureUserAdcChannel( pMCIList[0], (uint32_t *)&hadc1, IHM16M1_ADC_VREF, IHM16M1_ADC_VREF_ST, MC_USER_MEAS_5 );
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	2305      	movs	r3, #5
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <MCboot+0x160>)
 8002cea:	4912      	ldr	r1, [pc, #72]	; (8002d34 <MCboot+0x13c>)
 8002cec:	f7fe ff33 	bl	8001b56 <MC_Core_ConfigureUserAdcChannel>

  MC_Core_ConfigureUserButton( pMCIList[0], (uint16_t) B1_Pin, (uint16_t) 500 );
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002cf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe ff60 	bl	8001bc2 <MC_Core_ConfigureUserButton>

  if ( MC_Core_Init( pMCIList[0] ) != MC_FUNC_OK )
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe ff8a 	bl	8001c20 <MC_Core_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MCboot+0x11e>
  {
    Error_Handler();
 8002d12:	f000 fb8a 	bl	800342a <Error_Handler>
  }

}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	50000300 	.word	0x50000300
 8002d24:	200003c4 	.word	0x200003c4
 8002d28:	e0042000 	.word	0xe0042000
 8002d2c:	20000410 	.word	0x20000410
 8002d30:	2000045c 	.word	0x2000045c
 8002d34:	200002bc 	.word	0x200002bc
 8002d38:	19200040 	.word	0x19200040
 8002d3c:	25b00200 	.word	0x25b00200
 8002d40:	1d500080 	.word	0x1d500080
 8002d44:	21800100 	.word	0x21800100
 8002d48:	20000328 	.word	0x20000328
 8002d4c:	3ac04000 	.word	0x3ac04000
 8002d50:	04300002 	.word	0x04300002
 8002d54:	14f00020 	.word	0x14f00020
 8002d58:	cb840000 	.word	0xcb840000

08002d5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	; 0x30
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	2220      	movs	r2, #32
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f008 fe1b 	bl	800b9b0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002d7a:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002d7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002d80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d82:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002d84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d90:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002d96:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d9c:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002da2:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002da4:	2204      	movs	r2, #4
 8002da6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002da8:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002dba:	4b23      	ldr	r3, [pc, #140]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8002dc2:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002dc4:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8002dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8002dca:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002dda:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002de8:	4817      	ldr	r0, [pc, #92]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002dea:	f002 faeb 	bl	80053c4 <HAL_ADC_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8002df4:	f000 fb19 	bl	800342a <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e00:	4619      	mov	r1, r3
 8002e02:	4811      	ldr	r0, [pc, #68]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002e04:	f003 fdd6 	bl	80069b4 <HAL_ADCEx_MultiModeConfigChannel>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8002e0e:	f000 fb0c 	bl	800342a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <MX_ADC1_Init+0xf0>)
 8002e14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e16:	2306      	movs	r3, #6
 8002e18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e1e:	237f      	movs	r3, #127	; 0x7f
 8002e20:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e22:	2304      	movs	r3, #4
 8002e24:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4806      	ldr	r0, [pc, #24]	; (8002e48 <MX_ADC1_Init+0xec>)
 8002e30:	f002 fffa 	bl	8005e28 <HAL_ADC_ConfigChannel>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8002e3a:	f000 faf6 	bl	800342a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e3e:	bf00      	nop
 8002e40:	3730      	adds	r7, #48	; 0x30
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200002bc 	.word	0x200002bc
 8002e4c:	19200040 	.word	0x19200040

08002e50 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e56:	463b      	mov	r3, r7
 8002e58:	2220      	movs	r2, #32
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f008 fda7 	bl	800b9b0 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8002e62:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002e64:	4a2c      	ldr	r2, [pc, #176]	; (8002f18 <MX_ADC2_Init+0xc8>)
 8002e66:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e68:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002e6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e6e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002e70:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e76:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002e7c:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e82:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e88:	4b22      	ldr	r3, [pc, #136]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002e8e:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002e94:	4b1f      	ldr	r3, [pc, #124]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8002e9a:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002ea0:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002eaa:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002eb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002eb8:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002ece:	4811      	ldr	r0, [pc, #68]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002ed0:	f002 fa78 	bl	80053c4 <HAL_ADC_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8002eda:	f000 faa6 	bl	800342a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002ede:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <MX_ADC2_Init+0xcc>)
 8002ee0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ee2:	2306      	movs	r3, #6
 8002ee4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002eea:	237f      	movs	r3, #127	; 0x7f
 8002eec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002eee:	2304      	movs	r3, #4
 8002ef0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ef6:	463b      	mov	r3, r7
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4806      	ldr	r0, [pc, #24]	; (8002f14 <MX_ADC2_Init+0xc4>)
 8002efc:	f002 ff94 	bl	8005e28 <HAL_ADC_ConfigChannel>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8002f06:	f000 fa90 	bl	800342a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002f0a:	bf00      	nop
 8002f0c:	3720      	adds	r7, #32
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000328 	.word	0x20000328
 8002f18:	50000100 	.word	0x50000100
 8002f1c:	14f00020 	.word	0x14f00020

08002f20 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08e      	sub	sp, #56	; 0x38
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f40:	d12d      	bne.n	8002f9e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f42:	4b4b      	ldr	r3, [pc, #300]	; (8003070 <HAL_ADC_MspInit+0x150>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	4a49      	ldr	r2, [pc, #292]	; (8003070 <HAL_ADC_MspInit+0x150>)
 8002f4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f4c:	4b48      	ldr	r3, [pc, #288]	; (8003070 <HAL_ADC_MspInit+0x150>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d10b      	bne.n	8002f6c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f54:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	4a46      	ldr	r2, [pc, #280]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002f5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f60:	4b44      	ldr	r3, [pc, #272]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f68:	623b      	str	r3, [r7, #32]
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f6c:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f70:	4a40      	ldr	r2, [pc, #256]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002f72:	f043 0304 	orr.w	r3, r3, #4
 8002f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f78:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BEMF1_Pin|BEMF3_Pin|BEMF2_Pin;
 8002f84:	230b      	movs	r3, #11
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f94:	4619      	mov	r1, r3
 8002f96:	4838      	ldr	r0, [pc, #224]	; (8003078 <HAL_ADC_MspInit+0x158>)
 8002f98:	f004 fa88 	bl	80074ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002f9c:	e063      	b.n	8003066 <HAL_ADC_MspInit+0x146>
  else if(adcHandle->Instance==ADC2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a36      	ldr	r2, [pc, #216]	; (800307c <HAL_ADC_MspInit+0x15c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d15e      	bne.n	8003066 <HAL_ADC_MspInit+0x146>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002fa8:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_ADC_MspInit+0x150>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3301      	adds	r3, #1
 8002fae:	4a30      	ldr	r2, [pc, #192]	; (8003070 <HAL_ADC_MspInit+0x150>)
 8002fb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002fb2:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <HAL_ADC_MspInit+0x150>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002fba:	4b2e      	ldr	r3, [pc, #184]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	4a2d      	ldr	r2, [pc, #180]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002fc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd6:	4a27      	ldr	r2, [pc, #156]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fde:	4b25      	ldr	r3, [pc, #148]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	4a21      	ldr	r2, [pc, #132]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ff6:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003002:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	4a1b      	ldr	r2, [pc, #108]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800300e:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPEED_Pin|Temperature_feedback_Pin;
 800301a:	2314      	movs	r3, #20
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800301e:	2303      	movs	r3, #3
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302a:	4619      	mov	r1, r3
 800302c:	4812      	ldr	r0, [pc, #72]	; (8003078 <HAL_ADC_MspInit+0x158>)
 800302e:	f004 fa3d 	bl	80074ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUSV_Pin;
 8003032:	2301      	movs	r3, #1
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003036:	2303      	movs	r3, #3
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUSV_GPIO_Port, &GPIO_InitStruct);
 800303e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003042:	4619      	mov	r1, r3
 8003044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003048:	f004 fa30 	bl	80074ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Curr_fdbk2_Pin;
 800304c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003052:	2303      	movs	r3, #3
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Curr_fdbk2_GPIO_Port, &GPIO_InitStruct);
 800305a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305e:	4619      	mov	r1, r3
 8003060:	4807      	ldr	r0, [pc, #28]	; (8003080 <HAL_ADC_MspInit+0x160>)
 8003062:	f004 fa23 	bl	80074ac <HAL_GPIO_Init>
}
 8003066:	bf00      	nop
 8003068:	3738      	adds	r7, #56	; 0x38
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000394 	.word	0x20000394
 8003074:	40021000 	.word	0x40021000
 8003078:	48000800 	.word	0x48000800
 800307c:	50000100 	.word	0x50000100
 8003080:	48000400 	.word	0x48000400

08003084 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08c      	sub	sp, #48	; 0x30
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800308a:	463b      	mov	r3, r7
 800308c:	2230      	movs	r2, #48	; 0x30
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f008 fc8d 	bl	800b9b0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <MX_DAC1_Init+0x6c>)
 8003098:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <MX_DAC1_Init+0x70>)
 800309a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800309c:	4814      	ldr	r0, [pc, #80]	; (80030f0 <MX_DAC1_Init+0x6c>)
 800309e:	f003 fe42 	bl	8006d26 <HAL_DAC_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80030a8:	f000 f9bf 	bl	800342a <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80030ac:	2302      	movs	r3, #2
 80030ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80030c8:	2301      	movs	r3, #1
 80030ca:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80030d0:	463b      	mov	r3, r7
 80030d2:	2210      	movs	r2, #16
 80030d4:	4619      	mov	r1, r3
 80030d6:	4806      	ldr	r0, [pc, #24]	; (80030f0 <MX_DAC1_Init+0x6c>)
 80030d8:	f003 fe48 	bl	8006d6c <HAL_DAC_ConfigChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80030e2:	f000 f9a2 	bl	800342a <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80030e6:	bf00      	nop
 80030e8:	3730      	adds	r7, #48	; 0x30
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000398 	.word	0x20000398
 80030f4:	50000800 	.word	0x50000800

080030f8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	f107 0314 	add.w	r3, r7, #20
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a15      	ldr	r2, [pc, #84]	; (800316c <HAL_DAC_MspInit+0x74>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d124      	bne.n	8003164 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <HAL_DAC_MspInit+0x78>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	4a14      	ldr	r2, [pc, #80]	; (8003170 <HAL_DAC_MspInit+0x78>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003126:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_DAC_MspInit+0x78>)
 8003128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <HAL_DAC_MspInit+0x78>)
 8003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003136:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <HAL_DAC_MspInit+0x78>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313e:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <HAL_DAC_MspInit+0x78>)
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC_DEBUG_Pin;
 800314a:	2320      	movs	r3, #32
 800314c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800314e:	2303      	movs	r3, #3
 8003150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	4619      	mov	r1, r3
 800315c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003160:	f004 f9a4 	bl	80074ac <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003164:	bf00      	nop
 8003166:	3728      	adds	r7, #40	; 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	50000800 	.word	0x50000800
 8003170:	40021000 	.word	0x40021000

08003174 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800317a:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <MX_DMA_Init+0x44>)
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <MX_DMA_Init+0x44>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	6493      	str	r3, [r2, #72]	; 0x48
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <MX_DMA_Init+0x44>)
 8003188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <MX_DMA_Init+0x44>)
 8003194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003196:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <MX_DMA_Init+0x44>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6493      	str	r3, [r2, #72]	; 0x48
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <MX_DMA_Init+0x44>)
 80031a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]

}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000

080031bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c2:	f107 0314 	add.w	r3, r7, #20
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031d2:	4b36      	ldr	r3, [pc, #216]	; (80032ac <MX_GPIO_Init+0xf0>)
 80031d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d6:	4a35      	ldr	r2, [pc, #212]	; (80032ac <MX_GPIO_Init+0xf0>)
 80031d8:	f043 0304 	orr.w	r3, r3, #4
 80031dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031de:	4b33      	ldr	r3, [pc, #204]	; (80032ac <MX_GPIO_Init+0xf0>)
 80031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <MX_GPIO_Init+0xf0>)
 80031ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ee:	4a2f      	ldr	r2, [pc, #188]	; (80032ac <MX_GPIO_Init+0xf0>)
 80031f0:	f043 0320 	orr.w	r3, r3, #32
 80031f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <MX_GPIO_Init+0xf0>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <MX_GPIO_Init+0xf0>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003206:	4a29      	ldr	r2, [pc, #164]	; (80032ac <MX_GPIO_Init+0xf0>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800320e:	4b27      	ldr	r3, [pc, #156]	; (80032ac <MX_GPIO_Init+0xf0>)
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <MX_GPIO_Init+0xf0>)
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	4a23      	ldr	r2, [pc, #140]	; (80032ac <MX_GPIO_Init+0xf0>)
 8003220:	f043 0302 	orr.w	r3, r3, #2
 8003224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003226:	4b21      	ldr	r3, [pc, #132]	; (80032ac <MX_GPIO_Init+0xf0>)
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_COMM_Pin|ENU_Pin|ENV_Pin|ENW_Pin
 8003232:	2200      	movs	r2, #0
 8003234:	f24e 0121 	movw	r1, #57377	; 0xe021
 8003238:	481d      	ldr	r0, [pc, #116]	; (80032b0 <MX_GPIO_Init+0xf4>)
 800323a:	f004 fbb3 	bl	80079a4 <HAL_GPIO_WritePin>
                          |STBY_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_ZCR_Pin|GPIO_BEMF_Pin, GPIO_PIN_RESET);
 800323e:	2200      	movs	r2, #0
 8003240:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003244:	481b      	ldr	r0, [pc, #108]	; (80032b4 <MX_GPIO_Init+0xf8>)
 8003246:	f004 fbad 	bl	80079a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800324a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800324e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003250:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	4619      	mov	r1, r3
 8003260:	4814      	ldr	r0, [pc, #80]	; (80032b4 <MX_GPIO_Init+0xf8>)
 8003262:	f004 f923 	bl	80074ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GPIO_COMM_Pin|ENU_Pin|ENV_Pin|ENW_Pin
 8003266:	f24e 0321 	movw	r3, #57377	; 0xe021
 800326a:	617b      	str	r3, [r7, #20]
                          |STBY_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800326c:	2301      	movs	r3, #1
 800326e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003274:	2300      	movs	r3, #0
 8003276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	4619      	mov	r1, r3
 800327e:	480c      	ldr	r0, [pc, #48]	; (80032b0 <MX_GPIO_Init+0xf4>)
 8003280:	f004 f914 	bl	80074ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_ZCR_Pin|GPIO_BEMF_Pin;
 8003284:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800328a:	2301      	movs	r3, #1
 800328c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800328e:	2302      	movs	r3, #2
 8003290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003296:	f107 0314 	add.w	r3, r7, #20
 800329a:	4619      	mov	r1, r3
 800329c:	4805      	ldr	r0, [pc, #20]	; (80032b4 <MX_GPIO_Init+0xf8>)
 800329e:	f004 f905 	bl	80074ac <HAL_GPIO_Init>

}
 80032a2:	bf00      	nop
 80032a4:	3728      	adds	r7, #40	; 0x28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	48000400 	.word	0x48000400
 80032b4:	48000800 	.word	0x48000800

080032b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032bc:	f001 fd68 	bl	8004d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032c0:	f000 f817 	bl	80032f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032c4:	f7ff ff7a 	bl	80031bc <MX_GPIO_Init>
  MX_DMA_Init();
 80032c8:	f7ff ff54 	bl	8003174 <MX_DMA_Init>
  MX_ADC1_Init();
 80032cc:	f7ff fd46 	bl	8002d5c <MX_ADC1_Init>
  MX_ADC2_Init();
 80032d0:	f7ff fdbe 	bl	8002e50 <MX_ADC2_Init>
  MX_DAC1_Init();
 80032d4:	f7ff fed6 	bl	8003084 <MX_DAC1_Init>
  MX_TIM1_Init();
 80032d8:	f000 fea4 	bl	8004024 <MX_TIM1_Init>
  MX_TIM3_Init();
 80032dc:	f000 ffa8 	bl	8004230 <MX_TIM3_Init>
  MX_TIM4_Init();
 80032e0:	f001 f834 	bl	800434c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80032e4:	f001 f986 	bl	80045f4 <MX_USART2_UART_Init>
  MX_MotorControl_Init();
 80032e8:	f000 fd7c 	bl	8003de4 <MX_MotorControl_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80032ec:	f000 f869 	bl	80033c2 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80032f0:	e7fe      	b.n	80032f0 <main+0x38>

080032f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b0a4      	sub	sp, #144	; 0x90
 80032f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032fc:	2238      	movs	r2, #56	; 0x38
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f008 fb55 	bl	800b9b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003306:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003316:	463b      	mov	r3, r7
 8003318:	2244      	movs	r2, #68	; 0x44
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f008 fb47 	bl	800b9b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003322:	2000      	movs	r0, #0
 8003324:	f004 fb88 	bl	8007a38 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003328:	2301      	movs	r3, #1
 800332a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800332c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003330:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003332:	2302      	movs	r3, #2
 8003334:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003336:	2303      	movs	r3, #3
 8003338:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800333a:	2306      	movs	r3, #6
 800333c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800333e:	2355      	movs	r3, #85	; 0x55
 8003340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003344:	2302      	movs	r3, #2
 8003346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800334a:	2302      	movs	r3, #2
 800334c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8003350:	2304      	movs	r3, #4
 8003352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003356:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800335a:	4618      	mov	r0, r3
 800335c:	f004 fc20 	bl	8007ba0 <HAL_RCC_OscConfig>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003366:	f000 f860 	bl	800342a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800336a:	230f      	movs	r3, #15
 800336c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800336e:	2303      	movs	r3, #3
 8003370:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003372:	2300      	movs	r3, #0
 8003374:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003376:	2300      	movs	r3, #0
 8003378:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800337a:	2300      	movs	r3, #0
 800337c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800337e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003382:	2102      	movs	r1, #2
 8003384:	4618      	mov	r0, r3
 8003386:	f004 ff23 	bl	80081d0 <HAL_RCC_ClockConfig>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003390:	f000 f84b 	bl	800342a <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8003394:	f248 0302 	movw	r3, #32770	; 0x8002
 8003398:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800339e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033a4:	463b      	mov	r3, r7
 80033a6:	4618      	mov	r0, r3
 80033a8:	f005 f93e 	bl	8008628 <HAL_RCCEx_PeriphCLKConfig>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80033b2:	f000 f83a 	bl	800342a <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80033b6:	f005 f8e1 	bl	800857c <HAL_RCC_EnableCSS>
}
 80033ba:	bf00      	nop
 80033bc:	3790      	adds	r7, #144	; 0x90
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	af00      	add	r7, sp, #0
  /* TIM1_BRK_TIM15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	2100      	movs	r1, #0
 80033ca:	2018      	movs	r0, #24
 80033cc:	f003 fc71 	bl	8006cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80033d0:	2018      	movs	r0, #24
 80033d2:	f003 fc88 	bl	8006ce6 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2101      	movs	r1, #1
 80033da:	201e      	movs	r0, #30
 80033dc:	f003 fc69 	bl	8006cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80033e0:	201e      	movs	r0, #30
 80033e2:	f003 fc80 	bl	8006ce6 <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80033e6:	2200      	movs	r2, #0
 80033e8:	2100      	movs	r1, #0
 80033ea:	2012      	movs	r0, #18
 80033ec:	f003 fc61 	bl	8006cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80033f0:	2012      	movs	r0, #18
 80033f2:	f003 fc78 	bl	8006ce6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	2028      	movs	r0, #40	; 0x28
 80033fc:	f003 fc59 	bl	8006cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003400:	2028      	movs	r0, #40	; 0x28
 8003402:	f003 fc70 	bl	8006ce6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8003406:	2200      	movs	r2, #0
 8003408:	2102      	movs	r1, #2
 800340a:	2026      	movs	r0, #38	; 0x26
 800340c:	f003 fc51 	bl	8006cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003410:	2026      	movs	r0, #38	; 0x26
 8003412:	f003 fc68 	bl	8006ce6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	2103      	movs	r1, #3
 800341a:	200b      	movs	r0, #11
 800341c:	f003 fc49 	bl	8006cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003420:	200b      	movs	r0, #11
 8003422:	f003 fc60 	bl	8006ce6 <HAL_NVIC_EnableIRQ>
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}

0800342a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800342e:	b672      	cpsid	i
}
 8003430:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003432:	e7fe      	b.n	8003432 <Error_Handler+0x8>

08003434 <MCP_Init>:
               FCP_Handle_t * pFCP,
               FCP_SendFct_t fFcpSend,
               FCP_ReceiveFct_t fFcpReceive,
               FCP_AbortReceiveFct_t fFcpAbortReceive,
               const char* s_fwVer )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  pHandle->pFCP = pFCP;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	615a      	str	r2, [r3, #20]
  pHandle->s_fwVer = s_fwVer;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  FCP_SetClient( pFCP, pHandle,
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <MCP_Init+0x4c>)
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <MCP_Init+0x50>)
 8003456:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <MCP_Init+0x54>)
 8003458:	68f9      	ldr	r1, [r7, #12]
 800345a:	68b8      	ldr	r0, [r7, #8]
 800345c:	f007 fe85 	bl	800b16a <FCP_SetClient>
                 (FCP_SentFrameCallback_t) & MCP_SentFrame,
                 (FCP_ReceivedFrameCallback_t) & MCP_ReceivedFrame,
                 (FCP_RxTimeoutCallback_t) & MCP_OnTimeOut );
  pHandle->fFcpSend = fFcpSend;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]
  pHandle->fFcpReceive = fFcpReceive;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	61da      	str	r2, [r3, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	621a      	str	r2, [r3, #32]

  MCP_WaitNextFrame(pHandle);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f815 	bl	80034a2 <MCP_WaitNextFrame>
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	0800348d 	.word	0x0800348d
 8003484:	080034f5 	.word	0x080034f5
 8003488:	080034d3 	.word	0x080034d3

0800348c <MCP_OnTimeOut>:
* @brief  Function used to set and report the Time Out.
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_OnTimeOut(MCP_Handle_t *pHandle)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
     MCP_WaitNextFrame(pHandle);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f804 	bl	80034a2 <MCP_WaitNextFrame>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <MCP_WaitNextFrame>:
* @brief  Function used to check next reception frame
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_WaitNextFrame(MCP_Handle_t *pHandle)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6952      	ldr	r2, [r2, #20]
 80034b2:	4610      	mov	r0, r2
 80034b4:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
  pHandle->fFcpReceive(pHandle->pFCP);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6952      	ldr	r2, [r2, #20]
 80034c6:	4610      	mov	r0, r2
 80034c8:	4798      	blx	r3
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <MCP_SentFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_SentFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	461a      	mov	r2, r3
 80034de:	460b      	mov	r3, r1
 80034e0:	72fb      	strb	r3, [r7, #11]
 80034e2:	4613      	mov	r3, r2
 80034e4:	72bb      	strb	r3, [r7, #10]
    MCP_WaitNextFrame(pHandle);
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7ff ffdb 	bl	80034a2 <MCP_WaitNextFrame>
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b099      	sub	sp, #100	; 0x64
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	461a      	mov	r2, r3
 8003500:	460b      	mov	r3, r1
 8003502:	72fb      	strb	r3, [r7, #11]
 8003504:	4613      	mov	r3, r2
 8003506:	72bb      	strb	r3, [r7, #10]
  bool RequireAck = true;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  bool bNoError = false; // Default is error
 800350e:	2300      	movs	r3, #0
 8003510:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
 8003514:	7afb      	ldrb	r3, [r7, #11]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (bMotorSelection != 0)
 800351c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d014      	beq.n	800354e <MCP_ReceivedFrame+0x5a>
  {
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800352a:	3b01      	subs	r3, #1
 800352c:	461a      	mov	r2, r3
 800352e:	2100      	movs	r1, #0
 8003530:	f001 f978 	bl	8004824 <UI_SetReg>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d004      	beq.n	8003544 <MCP_ReceivedFrame+0x50>
    {
      Code &= 0x1F; /* Mask: 0001|1111 */
 800353a:	7afb      	ldrb	r3, [r7, #11]
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	72fb      	strb	r3, [r7, #11]
 8003542:	e004      	b.n	800354e <MCP_ReceivedFrame+0x5a>

    }
    else
    {
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
 8003544:	2300      	movs	r3, #0
 8003546:	72fb      	strb	r3, [r7, #11]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8003548:	230b      	movs	r3, #11
 800354a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    }
  }

  switch (Code)
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	2b12      	cmp	r3, #18
 8003552:	f200 8423 	bhi.w	8003d9c <MCP_ReceivedFrame+0x8a8>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <MCP_ReceivedFrame+0x68>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	08003da5 	.word	0x08003da5
 8003560:	080035a9 	.word	0x080035a9
 8003564:	080038a9 	.word	0x080038a9
 8003568:	08003be1 	.word	0x08003be1
 800356c:	08003d9d 	.word	0x08003d9d
 8003570:	08003d9d 	.word	0x08003d9d
 8003574:	08003c05 	.word	0x08003c05
 8003578:	08003cc5 	.word	0x08003cc5
 800357c:	08003da5 	.word	0x08003da5
 8003580:	08003da5 	.word	0x08003da5
 8003584:	08003da5 	.word	0x08003da5
 8003588:	08003da5 	.word	0x08003da5
 800358c:	08003d1b 	.word	0x08003d1b
 8003590:	08003da5 	.word	0x08003da5
 8003594:	08003d9d 	.word	0x08003d9d
 8003598:	08003d9d 	.word	0x08003d9d
 800359c:	08003d9d 	.word	0x08003d9d
 80035a0:	08003d9d 	.word	0x08003d9d
 80035a4:	08003da5 	.word	0x08003da5
  {
  case MC_PROTOCOL_CODE_SET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
      bErrorCode = ERROR_CODE_WRONG_SET;
 80035b0:	2305      	movs	r3, #5
 80035b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

      switch (bRegID)
 80035b6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80035ba:	2b88      	cmp	r3, #136	; 0x88
 80035bc:	f200 816f 	bhi.w	800389e <MCP_ReceivedFrame+0x3aa>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <MCP_ReceivedFrame+0xd4>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080037ed 	.word	0x080037ed
 80035cc:	0800389f 	.word	0x0800389f
 80035d0:	0800389f 	.word	0x0800389f
 80035d4:	0800380b 	.word	0x0800380b
 80035d8:	0800389f 	.word	0x0800389f
 80035dc:	08003837 	.word	0x08003837
 80035e0:	08003837 	.word	0x08003837
 80035e4:	08003837 	.word	0x08003837
 80035e8:	08003837 	.word	0x08003837
 80035ec:	08003837 	.word	0x08003837
 80035f0:	08003837 	.word	0x08003837
 80035f4:	08003837 	.word	0x08003837
 80035f8:	08003837 	.word	0x08003837
 80035fc:	08003837 	.word	0x08003837
 8003600:	08003837 	.word	0x08003837
 8003604:	08003837 	.word	0x08003837
 8003608:	08003861 	.word	0x08003861
 800360c:	08003861 	.word	0x08003861
 8003610:	0800389f 	.word	0x0800389f
 8003614:	0800389f 	.word	0x0800389f
 8003618:	08003837 	.word	0x08003837
 800361c:	08003837 	.word	0x08003837
 8003620:	08003837 	.word	0x08003837
 8003624:	08003837 	.word	0x08003837
 8003628:	08003837 	.word	0x08003837
 800362c:	0800389f 	.word	0x0800389f
 8003630:	0800389f 	.word	0x0800389f
 8003634:	0800389f 	.word	0x0800389f
 8003638:	08003827 	.word	0x08003827
 800363c:	0800382f 	.word	0x0800382f
 8003640:	0800389f 	.word	0x0800389f
 8003644:	0800389f 	.word	0x0800389f
 8003648:	0800389f 	.word	0x0800389f
 800364c:	0800389f 	.word	0x0800389f
 8003650:	0800389f 	.word	0x0800389f
 8003654:	0800389f 	.word	0x0800389f
 8003658:	0800389f 	.word	0x0800389f
 800365c:	0800389f 	.word	0x0800389f
 8003660:	0800389f 	.word	0x0800389f
 8003664:	0800389f 	.word	0x0800389f
 8003668:	0800389f 	.word	0x0800389f
 800366c:	0800389f 	.word	0x0800389f
 8003670:	0800389f 	.word	0x0800389f
 8003674:	0800389f 	.word	0x0800389f
 8003678:	0800389f 	.word	0x0800389f
 800367c:	0800389f 	.word	0x0800389f
 8003680:	0800389f 	.word	0x0800389f
 8003684:	0800389f 	.word	0x0800389f
 8003688:	0800389f 	.word	0x0800389f
 800368c:	0800389f 	.word	0x0800389f
 8003690:	0800389f 	.word	0x0800389f
 8003694:	0800389f 	.word	0x0800389f
 8003698:	0800389f 	.word	0x0800389f
 800369c:	0800389f 	.word	0x0800389f
 80036a0:	0800389f 	.word	0x0800389f
 80036a4:	0800389f 	.word	0x0800389f
 80036a8:	0800389f 	.word	0x0800389f
 80036ac:	0800389f 	.word	0x0800389f
 80036b0:	0800389f 	.word	0x0800389f
 80036b4:	0800389f 	.word	0x0800389f
 80036b8:	0800389f 	.word	0x0800389f
 80036bc:	0800389f 	.word	0x0800389f
 80036c0:	0800389f 	.word	0x0800389f
 80036c4:	0800389f 	.word	0x0800389f
 80036c8:	0800389f 	.word	0x0800389f
 80036cc:	08003837 	.word	0x08003837
 80036d0:	0800389f 	.word	0x0800389f
 80036d4:	0800389f 	.word	0x0800389f
 80036d8:	0800389f 	.word	0x0800389f
 80036dc:	0800389f 	.word	0x0800389f
 80036e0:	08003861 	.word	0x08003861
 80036e4:	08003861 	.word	0x08003861
 80036e8:	08003861 	.word	0x08003861
 80036ec:	0800389f 	.word	0x0800389f
 80036f0:	0800389f 	.word	0x0800389f
 80036f4:	0800389f 	.word	0x0800389f
 80036f8:	0800389f 	.word	0x0800389f
 80036fc:	0800389f 	.word	0x0800389f
 8003700:	0800389f 	.word	0x0800389f
 8003704:	08003837 	.word	0x08003837
 8003708:	0800389f 	.word	0x0800389f
 800370c:	0800389f 	.word	0x0800389f
 8003710:	0800389f 	.word	0x0800389f
 8003714:	08003837 	.word	0x08003837
 8003718:	08003837 	.word	0x08003837
 800371c:	08003837 	.word	0x08003837
 8003720:	08003837 	.word	0x08003837
 8003724:	08003837 	.word	0x08003837
 8003728:	08003837 	.word	0x08003837
 800372c:	08003837 	.word	0x08003837
 8003730:	0800389f 	.word	0x0800389f
 8003734:	08003861 	.word	0x08003861
 8003738:	0800389f 	.word	0x0800389f
 800373c:	0800389f 	.word	0x0800389f
 8003740:	0800389f 	.word	0x0800389f
 8003744:	0800389f 	.word	0x0800389f
 8003748:	0800389f 	.word	0x0800389f
 800374c:	08003837 	.word	0x08003837
 8003750:	0800389f 	.word	0x0800389f
 8003754:	0800389f 	.word	0x0800389f
 8003758:	08003837 	.word	0x08003837
 800375c:	08003837 	.word	0x08003837
 8003760:	0800389f 	.word	0x0800389f
 8003764:	0800389f 	.word	0x0800389f
 8003768:	0800389f 	.word	0x0800389f
 800376c:	0800389f 	.word	0x0800389f
 8003770:	0800389f 	.word	0x0800389f
 8003774:	0800389f 	.word	0x0800389f
 8003778:	0800389f 	.word	0x0800389f
 800377c:	0800389f 	.word	0x0800389f
 8003780:	0800389f 	.word	0x0800389f
 8003784:	0800389f 	.word	0x0800389f
 8003788:	0800389f 	.word	0x0800389f
 800378c:	0800389f 	.word	0x0800389f
 8003790:	0800389f 	.word	0x0800389f
 8003794:	0800389f 	.word	0x0800389f
 8003798:	0800380b 	.word	0x0800380b
 800379c:	08003861 	.word	0x08003861
 80037a0:	08003861 	.word	0x08003861
 80037a4:	08003861 	.word	0x08003861
 80037a8:	08003861 	.word	0x08003861
 80037ac:	08003861 	.word	0x08003861
 80037b0:	0800389f 	.word	0x0800389f
 80037b4:	0800389f 	.word	0x0800389f
 80037b8:	0800389f 	.word	0x0800389f
 80037bc:	08003861 	.word	0x08003861
 80037c0:	08003861 	.word	0x08003861
 80037c4:	0800389f 	.word	0x0800389f
 80037c8:	0800389f 	.word	0x0800389f
 80037cc:	0800389f 	.word	0x0800389f
 80037d0:	0800389f 	.word	0x0800389f
 80037d4:	0800389f 	.word	0x0800389f
 80037d8:	0800389f 	.word	0x0800389f
 80037dc:	0800389f 	.word	0x0800389f
 80037e0:	08003837 	.word	0x08003837
 80037e4:	08003837 	.word	0x08003837
 80037e8:	08003837 	.word	0x08003837
      {
      case MC_PROTOCOL_REG_TARGET_MOTOR:
        {
          /* Deprecated */
          int32_t wValue = (int32_t)(buffer[1]);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3301      	adds	r3, #1
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	647b      	str	r3, [r7, #68]	; 0x44

          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f897 1051 	ldrb.w	r1, [r7, #81]	; 0x51
 80037fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 f811 	bl	8004824 <UI_SetReg>
 8003802:	4603      	mov	r3, r0
 8003804:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        }
        break;
 8003808:	e04d      	b.n	80038a6 <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_CONTROL_MODE:
      case MC_PROTOCOL_REG_SC_PP:
        {
          /* 8bit variables */
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3301      	adds	r3, #1
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003818:	4619      	mov	r1, r3
 800381a:	f001 f803 	bl	8004824 <UI_SetReg>
 800381e:	4603      	mov	r3, r0
 8003820:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        }
        break;
 8003824:	e03f      	b.n	80038a6 <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT1:
        {
          bNoError = true; /* No check inside class return always true*/
 8003826:	2301      	movs	r3, #1
 8003828:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        }
        break;
 800382c:	e03b      	b.n	80038a6 <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT2:
        {
          bNoError = true; /* No check inside class return always true*/
 800382e:	2301      	movs	r3, #1
 8003830:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        }
        break;
 8003834:	e037      	b.n	80038a6 <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          /* 16bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3301      	adds	r3, #1
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3302      	adds	r3, #2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	4413      	add	r3, r2
 8003848:	64bb      	str	r3, [r7, #72]	; 0x48
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f897 1051 	ldrb.w	r1, [r7, #81]	; 0x51
 8003850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003852:	4618      	mov	r0, r3
 8003854:	f000 ffe6 	bl	8004824 <UI_SetReg>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        }
        break;
 800385e:	e022      	b.n	80038a6 <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_SC_CURRBANDWIDTH:
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
        {
          /* 32bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3301      	adds	r3, #1
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3302      	adds	r3, #2
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	441a      	add	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3303      	adds	r3, #3
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	041b      	lsls	r3, r3, #16
 800387a:	441a      	add	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3304      	adds	r3, #4
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	061b      	lsls	r3, r3, #24
 8003884:	4413      	add	r3, r2
 8003886:	64fb      	str	r3, [r7, #76]	; 0x4c
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f897 1051 	ldrb.w	r1, [r7, #81]	; 0x51
 800388e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003890:	4618      	mov	r0, r3
 8003892:	f000 ffc7 	bl	8004824 <UI_SetReg>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        }
        break;
 800389c:	e003      	b.n	80038a6 <MCP_ReceivedFrame+0x3b2>

      default:
        {
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 800389e:	2302      	movs	r3, #2
 80038a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        }
        break;
 80038a4:	bf00      	nop
      }
    }
    break;
 80038a6:	e27e      	b.n	8003da6 <MCP_ReceivedFrame+0x8b2>

  case MC_PROTOCOL_CODE_GET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80038b0:	2303      	movs	r3, #3
 80038b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

      switch (bRegID)
 80038b6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80038ba:	2b88      	cmp	r3, #136	; 0x88
 80038bc:	f200 8182 	bhi.w	8003bc4 <MCP_ReceivedFrame+0x6d0>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <MCP_ReceivedFrame+0x3d4>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	08003aed 	.word	0x08003aed
 80038cc:	08003b59 	.word	0x08003b59
 80038d0:	08003aed 	.word	0x08003aed
 80038d4:	08003aed 	.word	0x08003aed
 80038d8:	08003b59 	.word	0x08003b59
 80038dc:	08003b23 	.word	0x08003b23
 80038e0:	08003b23 	.word	0x08003b23
 80038e4:	08003b23 	.word	0x08003b23
 80038e8:	08003b23 	.word	0x08003b23
 80038ec:	08003b23 	.word	0x08003b23
 80038f0:	08003b23 	.word	0x08003b23
 80038f4:	08003b23 	.word	0x08003b23
 80038f8:	08003b23 	.word	0x08003b23
 80038fc:	08003b23 	.word	0x08003b23
 8003900:	08003b23 	.word	0x08003b23
 8003904:	08003b23 	.word	0x08003b23
 8003908:	08003b23 	.word	0x08003b23
 800390c:	08003b23 	.word	0x08003b23
 8003910:	08003b23 	.word	0x08003b23
 8003914:	08003b23 	.word	0x08003b23
 8003918:	08003b23 	.word	0x08003b23
 800391c:	08003b23 	.word	0x08003b23
 8003920:	08003b23 	.word	0x08003b23
 8003924:	08003b23 	.word	0x08003b23
 8003928:	08003b23 	.word	0x08003b23
 800392c:	08003b23 	.word	0x08003b23
 8003930:	08003b23 	.word	0x08003b23
 8003934:	08003b23 	.word	0x08003b23
 8003938:	08003bcd 	.word	0x08003bcd
 800393c:	08003bcd 	.word	0x08003bcd
 8003940:	08003b59 	.word	0x08003b59
 8003944:	08003b23 	.word	0x08003b23
 8003948:	08003b23 	.word	0x08003b23
 800394c:	08003b23 	.word	0x08003b23
 8003950:	08003aed 	.word	0x08003aed
 8003954:	08003bc5 	.word	0x08003bc5
 8003958:	08003bc5 	.word	0x08003bc5
 800395c:	08003bc5 	.word	0x08003bc5
 8003960:	08003bc5 	.word	0x08003bc5
 8003964:	08003bc5 	.word	0x08003bc5
 8003968:	08003bc5 	.word	0x08003bc5
 800396c:	08003bc5 	.word	0x08003bc5
 8003970:	08003bc5 	.word	0x08003bc5
 8003974:	08003bc5 	.word	0x08003bc5
 8003978:	08003bc5 	.word	0x08003bc5
 800397c:	08003bc5 	.word	0x08003bc5
 8003980:	08003bc5 	.word	0x08003bc5
 8003984:	08003bc5 	.word	0x08003bc5
 8003988:	08003bc5 	.word	0x08003bc5
 800398c:	08003bc5 	.word	0x08003bc5
 8003990:	08003bc5 	.word	0x08003bc5
 8003994:	08003bc5 	.word	0x08003bc5
 8003998:	08003bc5 	.word	0x08003bc5
 800399c:	08003bc5 	.word	0x08003bc5
 80039a0:	08003bc5 	.word	0x08003bc5
 80039a4:	08003bc5 	.word	0x08003bc5
 80039a8:	08003bc5 	.word	0x08003bc5
 80039ac:	08003bc5 	.word	0x08003bc5
 80039b0:	08003bc5 	.word	0x08003bc5
 80039b4:	08003bc5 	.word	0x08003bc5
 80039b8:	08003bc5 	.word	0x08003bc5
 80039bc:	08003bc5 	.word	0x08003bc5
 80039c0:	08003bc5 	.word	0x08003bc5
 80039c4:	08003bc5 	.word	0x08003bc5
 80039c8:	08003bc5 	.word	0x08003bc5
 80039cc:	08003b23 	.word	0x08003b23
 80039d0:	08003bc5 	.word	0x08003bc5
 80039d4:	08003bc5 	.word	0x08003bc5
 80039d8:	08003bc5 	.word	0x08003bc5
 80039dc:	08003bc5 	.word	0x08003bc5
 80039e0:	08003b59 	.word	0x08003b59
 80039e4:	08003b59 	.word	0x08003b59
 80039e8:	08003b59 	.word	0x08003b59
 80039ec:	08003b23 	.word	0x08003b23
 80039f0:	08003b23 	.word	0x08003b23
 80039f4:	08003b23 	.word	0x08003b23
 80039f8:	08003b23 	.word	0x08003b23
 80039fc:	08003aed 	.word	0x08003aed
 8003a00:	08003b59 	.word	0x08003b59
 8003a04:	08003b23 	.word	0x08003b23
 8003a08:	08003b23 	.word	0x08003b23
 8003a0c:	08003b23 	.word	0x08003b23
 8003a10:	08003b23 	.word	0x08003b23
 8003a14:	08003b23 	.word	0x08003b23
 8003a18:	08003b23 	.word	0x08003b23
 8003a1c:	08003b23 	.word	0x08003b23
 8003a20:	08003b23 	.word	0x08003b23
 8003a24:	08003b23 	.word	0x08003b23
 8003a28:	08003b23 	.word	0x08003b23
 8003a2c:	08003b23 	.word	0x08003b23
 8003a30:	08003aed 	.word	0x08003aed
 8003a34:	08003b59 	.word	0x08003b59
 8003a38:	08003bc5 	.word	0x08003bc5
 8003a3c:	08003b23 	.word	0x08003b23
 8003a40:	08003b23 	.word	0x08003b23
 8003a44:	08003b23 	.word	0x08003b23
 8003a48:	08003b23 	.word	0x08003b23
 8003a4c:	08003b23 	.word	0x08003b23
 8003a50:	08003bc5 	.word	0x08003bc5
 8003a54:	08003bc5 	.word	0x08003bc5
 8003a58:	08003b23 	.word	0x08003b23
 8003a5c:	08003b23 	.word	0x08003b23
 8003a60:	08003aed 	.word	0x08003aed
 8003a64:	08003aed 	.word	0x08003aed
 8003a68:	08003b59 	.word	0x08003b59
 8003a6c:	08003b59 	.word	0x08003b59
 8003a70:	08003b59 	.word	0x08003b59
 8003a74:	08003b59 	.word	0x08003b59
 8003a78:	08003b59 	.word	0x08003b59
 8003a7c:	08003aed 	.word	0x08003aed
 8003a80:	08003b23 	.word	0x08003b23
 8003a84:	08003b23 	.word	0x08003b23
 8003a88:	08003b59 	.word	0x08003b59
 8003a8c:	08003bc5 	.word	0x08003bc5
 8003a90:	08003b23 	.word	0x08003b23
 8003a94:	08003b23 	.word	0x08003b23
 8003a98:	08003aed 	.word	0x08003aed
 8003a9c:	08003b59 	.word	0x08003b59
 8003aa0:	08003b59 	.word	0x08003b59
 8003aa4:	08003b59 	.word	0x08003b59
 8003aa8:	08003b59 	.word	0x08003b59
 8003aac:	08003b59 	.word	0x08003b59
 8003ab0:	08003b59 	.word	0x08003b59
 8003ab4:	08003b59 	.word	0x08003b59
 8003ab8:	08003b59 	.word	0x08003b59
 8003abc:	08003b59 	.word	0x08003b59
 8003ac0:	08003b59 	.word	0x08003b59
 8003ac4:	08003b59 	.word	0x08003b59
 8003ac8:	08003aed 	.word	0x08003aed
 8003acc:	08003bc5 	.word	0x08003bc5
 8003ad0:	08003aed 	.word	0x08003aed
 8003ad4:	08003b8f 	.word	0x08003b8f
 8003ad8:	08003b8f 	.word	0x08003b8f
 8003adc:	08003b8f 	.word	0x08003b8f
 8003ae0:	08003b23 	.word	0x08003b23
 8003ae4:	08003b23 	.word	0x08003b23
 8003ae8:	08003b23 	.word	0x08003b23
      case MC_PROTOCOL_REG_SC_PP:
      case MC_PROTOCOL_REG_SC_FOC_REP_RATE:
      case MC_PROTOCOL_REG_SC_COMPLETED:
        {
          /* 8bit variables */
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f107 0243 	add.w	r2, r7, #67	; 0x43
 8003af2:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fef2 	bl	80048e0 <UI_GetReg>
 8003afc:	4603      	mov	r3, r0
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
           if ( bNoError == true )
 8003b00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d063      	beq.n	8003bd0 <MCP_ReceivedFrame+0x6dc>
          {
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	699c      	ldr	r4, [r3, #24]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6958      	ldr	r0, [r3, #20]
 8003b10:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b14:	2301      	movs	r3, #1
 8003b16:	21f0      	movs	r1, #240	; 0xf0
 8003b18:	47a0      	blx	r4
            RequireAck = false;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
          }
        }
        break;
 8003b20:	e056      	b.n	8003bd0 <MCP_ReceivedFrame+0x6dc>
      case MC_PROTOCOL_REG_PWBDID:
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f107 0243 	add.w	r2, r7, #67	; 0x43
 8003b28:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fed7 	bl	80048e0 <UI_GetReg>
 8003b32:	4603      	mov	r3, r0
 8003b34:	63bb      	str	r3, [r7, #56]	; 0x38
          if ( bNoError == true )
 8003b36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d04a      	beq.n	8003bd4 <MCP_ReceivedFrame+0x6e0>
          {
            /* 16bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	699c      	ldr	r4, [r3, #24]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6958      	ldr	r0, [r3, #20]
 8003b46:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	21f0      	movs	r1, #240	; 0xf0
 8003b4e:	47a0      	blx	r4
            RequireAck = false;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
          }
        }
        break;
 8003b56:	e03d      	b.n	8003bd4 <MCP_ReceivedFrame+0x6e0>
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
      case MC_PROTOCOL_REG_SC_PWM_FREQUENCY:
      case MC_PROTOCOL_REG_UID:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f107 0243 	add.w	r2, r7, #67	; 0x43
 8003b5e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 febc 	bl	80048e0 <UI_GetReg>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
          if ( bNoError == true )
 8003b6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d031      	beq.n	8003bd8 <MCP_ReceivedFrame+0x6e4>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	699c      	ldr	r4, [r3, #24]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6958      	ldr	r0, [r3, #20]
 8003b7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003b80:	2304      	movs	r3, #4
 8003b82:	21f0      	movs	r1, #240	; 0xf0
 8003b84:	47a0      	blx	r4
            RequireAck = false;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
          }
        }
        break;
 8003b8c:	e024      	b.n	8003bd8 <MCP_ReceivedFrame+0x6e4>

      case MC_PROTOCOL_REG_CURRENT_POSITION:
      case MC_PROTOCOL_REG_TARGET_POSITION:
      case MC_PROTOCOL_REG_MOVE_DURATION:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f107 0243 	add.w	r2, r7, #67	; 0x43
 8003b94:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fea1 	bl	80048e0 <UI_GetReg>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
          if ( bNoError == true )
 8003ba2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d018      	beq.n	8003bdc <MCP_ReceivedFrame+0x6e8>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	699c      	ldr	r4, [r3, #24]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6958      	ldr	r0, [r3, #20]
 8003bb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	21f0      	movs	r1, #240	; 0xf0
 8003bba:	47a0      	blx	r4
            RequireAck = false;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
          }
        }
        break;
 8003bc2:	e00b      	b.n	8003bdc <MCP_ReceivedFrame+0x6e8>

      default:
        bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8003bca:	e008      	b.n	8003bde <MCP_ReceivedFrame+0x6ea>
        break;
 8003bcc:	bf00      	nop
 8003bce:	e0ea      	b.n	8003da6 <MCP_ReceivedFrame+0x8b2>
        break;
 8003bd0:	bf00      	nop
 8003bd2:	e0e8      	b.n	8003da6 <MCP_ReceivedFrame+0x8b2>
        break;
 8003bd4:	bf00      	nop
 8003bd6:	e0e6      	b.n	8003da6 <MCP_ReceivedFrame+0x8b2>
        break;
 8003bd8:	bf00      	nop
 8003bda:	e0e4      	b.n	8003da6 <MCP_ReceivedFrame+0x8b2>
        break;
 8003bdc:	bf00      	nop
      }
    }
    break;
 8003bde:	e0e2      	b.n	8003da6 <MCP_ReceivedFrame+0x8b2>

  case MC_PROTOCOL_CODE_EXECUTE_CMD:
    {
      uint8_t bCmdID = buffer[0];
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8003be8:	2307      	movs	r3, #7
 8003bea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 ffe4 	bl	8004bc4 <UI_ExecCmd>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }
    break;
 8003c02:	e0d0      	b.n	8003da6 <MCP_ReceivedFrame+0x8b2>
  case MC_PROTOCOL_CODE_GET_BOARD_INFO:
    {
      /* GetBoardInfo */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; i < 32; i++)
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8003c0a:	e00b      	b.n	8003c24 <MCP_ReceivedFrame+0x730>
      {
        outBuff[i] = 0;
 8003c0c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c10:	3360      	adds	r3, #96	; 0x60
 8003c12:	443b      	add	r3, r7
 8003c14:	2200      	movs	r2, #0
 8003c16:	f803 2c50 	strb.w	r2, [r3, #-80]
      for (i = 0; i < 32; i++)
 8003c1a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8003c24:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c28:	2b1f      	cmp	r3, #31
 8003c2a:	d9ef      	bls.n	8003c0c <MCP_ReceivedFrame+0x718>
      }
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8003c32:	e012      	b.n	8003c5a <MCP_ReceivedFrame+0x766>
      {
        outBuff[3+i] = pHandle->s_fwVer[i];
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003c3a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c3e:	441a      	add	r2, r3
 8003c40:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c44:	3303      	adds	r3, #3
 8003c46:	7812      	ldrb	r2, [r2, #0]
 8003c48:	3360      	adds	r3, #96	; 0x60
 8003c4a:	443b      	add	r3, r7
 8003c4c:	f803 2c50 	strb.w	r2, [r3, #-80]
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8003c50:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c54:	3301      	adds	r3, #1
 8003c56:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8003c5a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c5e:	2b1c      	cmp	r3, #28
 8003c60:	d808      	bhi.n	8003c74 <MCP_ReceivedFrame+0x780>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003c68:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c6c:	4413      	add	r3, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b09      	cmp	r3, #9
 8003c72:	d1df      	bne.n	8003c34 <MCP_ReceivedFrame+0x740>
      }
      outBuff[0] = pHandle->s_fwVer[i+5];
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003c7a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c7e:	3305      	adds	r3, #5
 8003c80:	4413      	add	r3, r2
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	743b      	strb	r3, [r7, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003c8c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003c90:	3307      	adds	r3, #7
 8003c92:	4413      	add	r3, r2
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	747b      	strb	r3, [r7, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003c9e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003ca2:	3309      	adds	r3, #9
 8003ca4:	4413      	add	r3, r2
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	74bb      	strb	r3, [r7, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	699c      	ldr	r4, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6958      	ldr	r0, [r3, #20]
 8003cb2:	f107 0210 	add.w	r2, r7, #16
 8003cb6:	2320      	movs	r3, #32
 8003cb8:	21f0      	movs	r1, #240	; 0xf0
 8003cba:	47a0      	blx	r4
      bNoError = true;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }
    break;
 8003cc2:	e070      	b.n	8003da6 <MCP_ReceivedFrame+0x8b2>

  case MC_PROTOCOL_CODE_SET_SPEED_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3305      	adds	r3, #5
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	441a      	add	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	041b      	lsls	r3, r3, #16
 8003cf6:	441a      	add	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3303      	adds	r3, #3
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	4413      	add	r3, r2
 8003d02:	657b      	str	r3, [r7, #84]	; 0x54
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8003d0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f001 f801 	bl	8004d14 <UI_ExecSpeedRamp>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }
    break;
 8003d18:	e045      	b.n	8003da6 <MCP_ReceivedFrame+0x8b2>
    case MC_PROTOCOL_CODE_GET_FW_VERSION:
    {
      /* Get Firmware Version */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8003d20:	e011      	b.n	8003d46 <MCP_ReceivedFrame+0x852>
      {
        outBuff[i] = pHandle->s_fwVer[i];
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003d28:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003d2c:	441a      	add	r2, r3
 8003d2e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003d32:	7812      	ldrb	r2, [r2, #0]
 8003d34:	3360      	adds	r3, #96	; 0x60
 8003d36:	443b      	add	r3, r7
 8003d38:	f803 2c50 	strb.w	r2, [r3, #-80]
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8003d3c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003d40:	3301      	adds	r3, #1
 8003d42:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8003d46:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003d4a:	2b1f      	cmp	r3, #31
 8003d4c:	d815      	bhi.n	8003d7a <MCP_ReceivedFrame+0x886>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003d54:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003d58:	4413      	add	r3, r2
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e0      	bne.n	8003d22 <MCP_ReceivedFrame+0x82e>
      }

      for (; i < 32; i++)
 8003d60:	e00b      	b.n	8003d7a <MCP_ReceivedFrame+0x886>
      {
        outBuff[i] = 0;
 8003d62:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003d66:	3360      	adds	r3, #96	; 0x60
 8003d68:	443b      	add	r3, r7
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f803 2c50 	strb.w	r2, [r3, #-80]
      for (; i < 32; i++)
 8003d70:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003d74:	3301      	adds	r3, #1
 8003d76:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8003d7a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003d7e:	2b1f      	cmp	r3, #31
 8003d80:	d9ef      	bls.n	8003d62 <MCP_ReceivedFrame+0x86e>
      }

      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	699c      	ldr	r4, [r3, #24]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6958      	ldr	r0, [r3, #20]
 8003d8a:	f107 0210 	add.w	r2, r7, #16
 8003d8e:	2320      	movs	r3, #32
 8003d90:	21f0      	movs	r1, #240	; 0xf0
 8003d92:	47a0      	blx	r4
      bNoError = true;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }
    break;
 8003d9a:	e004      	b.n	8003da6 <MCP_ReceivedFrame+0x8b2>
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    }
    break;
 8003da2:	e000      	b.n	8003da6 <MCP_ReceivedFrame+0x8b2>
    break;
 8003da4:	bf00      	nop
  }

  if (RequireAck)
 8003da6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d015      	beq.n	8003dda <MCP_ReceivedFrame+0x8e6>
  {
    if (bNoError)
 8003dae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <MCP_ReceivedFrame+0x8d4>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699c      	ldr	r4, [r3, #24]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6958      	ldr	r0, [r3, #20]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	21f0      	movs	r1, #240	; 0xf0
 8003dc4:	47a0      	blx	r4
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
    }
  }
}
 8003dc6:	e008      	b.n	8003dda <MCP_ReceivedFrame+0x8e6>
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	699c      	ldr	r4, [r3, #24]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6958      	ldr	r0, [r3, #20]
 8003dd0:	f107 0242 	add.w	r2, r7, #66	; 0x42
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	21ff      	movs	r1, #255	; 0xff
 8003dd8:	47a0      	blx	r4
}
 8003dda:	bf00      	nop
 8003ddc:	3764      	adds	r7, #100	; 0x64
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd90      	pop	{r4, r7, pc}
 8003de2:	bf00      	nop

08003de4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  pMCI[0] = &Motor_Device1;
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <MX_MotorControl_Init+0x20>)
 8003dea:	4a07      	ldr	r2, [pc, #28]	; (8003e08 <MX_MotorControl_Init+0x24>)
 8003dec:	601a      	str	r2, [r3, #0]

  /* Initialize the Motor Control Subsystem */
  MCboot( pMCI );
 8003dee:	4805      	ldr	r0, [pc, #20]	; (8003e04 <MX_MotorControl_Init+0x20>)
 8003df0:	f7fe ff02 	bl	8002bf8 <MCboot>

  /* Initialize the MC User Interface */
  UI_TaskInit( 0, NUMBER_OF_DEVICES, pMCI, s_fwVer );
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <MX_MotorControl_Init+0x28>)
 8003df6:	4a03      	ldr	r2, [pc, #12]	; (8003e04 <MX_MotorControl_Init+0x20>)
 8003df8:	2101      	movs	r1, #1
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f000 fbbe 	bl	800457c <UI_TaskInit>
}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	200003c0 	.word	0x200003c0
 8003e08:	20000164 	.word	0x20000164
 8003e0c:	0800b9d8 	.word	0x0800b9d8

08003e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e16:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <HAL_MspInit+0x44>)
 8003e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1a:	4a0e      	ldr	r2, [pc, #56]	; (8003e54 <HAL_MspInit+0x44>)
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	6613      	str	r3, [r2, #96]	; 0x60
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <HAL_MspInit+0x44>)
 8003e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e2e:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <HAL_MspInit+0x44>)
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	4a08      	ldr	r2, [pc, #32]	; (8003e54 <HAL_MspInit+0x44>)
 8003e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e38:	6593      	str	r3, [r2, #88]	; 0x58
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_MspInit+0x44>)
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003e46:	f003 fe9b 	bl	8007b80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000

08003e58 <HardFault_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e5c:	e7fe      	b.n	8003e5c <HardFault_Handler+0x4>

08003e5e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e62:	e7fe      	b.n	8003e62 <MemManage_Handler+0x4>

08003e64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e68:	e7fe      	b.n	8003e68 <BusFault_Handler+0x4>

08003e6a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e6e:	e7fe      	b.n	8003e6e <UsageFault_Handler+0x4>

08003e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <DMA1_Channel1_IRQHandler+0x10>)
 8003e86:	f003 f9c1 	bl	800720c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	200005e8 	.word	0x200005e8

08003e94 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e98:	4803      	ldr	r0, [pc, #12]	; (8003ea8 <ADC1_2_IRQHandler+0x14>)
 8003e9a:	f001 fd97 	bl	80059cc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003e9e:	4803      	ldr	r0, [pc, #12]	; (8003eac <ADC1_2_IRQHandler+0x18>)
 8003ea0:	f001 fd94 	bl	80059cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003ea4:	bf00      	nop
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	200002bc 	.word	0x200002bc
 8003eac:	20000328 	.word	0x20000328

08003eb0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <TIM4_IRQHandler+0x10>)
 8003eb6:	f004 ff8f 	bl	8008dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	2000045c 	.word	0x2000045c

08003ec4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003ec8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ecc:	f003 fd9c 	bl	8007a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d101      	bne.n	8003eec <LL_USART_IsActiveFlag_ORE+0x18>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <LL_USART_IsActiveFlag_ORE+0x1a>
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d101      	bne.n	8003f12 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	2b80      	cmp	r3, #128	; 0x80
 8003f32:	d101      	bne.n	8003f38 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2208      	movs	r2, #8
 8003f52:	621a      	str	r2, [r3, #32]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	b2db      	uxtb	r3, r3
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003f80:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <USART2_IRQHandler+0x70>)
 8003f82:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff ffb7 	bl	8003efa <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <USART2_IRQHandler+0x2e>
  {
    (void) UFCP_RX_IRQ_Handler( &pUSART, LL_USART_ReceiveData8(pUSART.USARTx) );
 8003f92:	4b16      	ldr	r3, [pc, #88]	; (8003fec <USART2_IRQHandler+0x70>)
 8003f94:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ffe1 	bl	8003f60 <LL_USART_ReceiveData8>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4811      	ldr	r0, [pc, #68]	; (8003fec <USART2_IRQHandler+0x70>)
 8003fa6:	f007 fb4f 	bl	800b648 <UFCP_RX_IRQ_Handler>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <USART2_IRQHandler+0x70>)
 8003fac:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ffb5 	bl	8003f20 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <USART2_IRQHandler+0x46>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8003fbc:	480b      	ldr	r0, [pc, #44]	; (8003fec <USART2_IRQHandler+0x70>)
 8003fbe:	f007 fbe7 	bl	800b790 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <USART2_IRQHandler+0x70>)
 8003fc4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff83 	bl	8003ed4 <LL_USART_IsActiveFlag_ORE>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <USART2_IRQHandler+0x6a>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8003fd4:	4805      	ldr	r0, [pc, #20]	; (8003fec <USART2_IRQHandler+0x70>)
 8003fd6:	f007 fc39 	bl	800b84c <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003fda:	4b04      	ldr	r3, [pc, #16]	; (8003fec <USART2_IRQHandler+0x70>)
 8003fdc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ffb0 	bl	8003f46 <LL_USART_ClearFlag_ORE>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8003fe6:	bf00      	nop
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000000 	.word	0x20000000

08003ff0 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ff4:	f7fc ffae 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003ff8:	f002 fe8f 	bl	8006d1a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003ffc:	bf00      	nop
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <TIM1_BRK_TIM15_IRQHandler>:
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  * @param  None
  * @retval None
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
  Motor_Device1.status = MC_OVERCURRENT;
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8004006:	2207      	movs	r2, #7
 8004008:	705a      	strb	r2, [r3, #1]
  MC_Core_LL_Error(&Motor_Device1);
 800400a:	4804      	ldr	r0, [pc, #16]	; (800401c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 800400c:	f7fd f82d 	bl	800106a <MC_Core_LL_Error>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004010:	4803      	ldr	r0, [pc, #12]	; (8004020 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8004012:	f004 fee1 	bl	8008dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000164 	.word	0x20000164
 8004020:	200003c4 	.word	0x200003c4

08004024 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b0a4      	sub	sp, #144	; 0x90
 8004028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800402a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	605a      	str	r2, [r3, #4]
 8004034:	609a      	str	r2, [r3, #8]
 8004036:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004038:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004048:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8004054:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004060:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]
 8004070:	615a      	str	r2, [r3, #20]
 8004072:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004074:	1d3b      	adds	r3, r7, #4
 8004076:	2234      	movs	r2, #52	; 0x34
 8004078:	2100      	movs	r1, #0
 800407a:	4618      	mov	r0, r3
 800407c:	f007 fc98 	bl	800b9b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004080:	4b69      	ldr	r3, [pc, #420]	; (8004228 <MX_TIM1_Init+0x204>)
 8004082:	4a6a      	ldr	r2, [pc, #424]	; (800422c <MX_TIM1_Init+0x208>)
 8004084:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = HF_TIMX_PSC;
 8004086:	4b68      	ldr	r3, [pc, #416]	; (8004228 <MX_TIM1_Init+0x204>)
 8004088:	2200      	movs	r2, #0
 800408a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800408c:	4b66      	ldr	r3, [pc, #408]	; (8004228 <MX_TIM1_Init+0x204>)
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 8004092:	4b65      	ldr	r3, [pc, #404]	; (8004228 <MX_TIM1_Init+0x204>)
 8004094:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8004098:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800409a:	4b63      	ldr	r3, [pc, #396]	; (8004228 <MX_TIM1_Init+0x204>)
 800409c:	2200      	movs	r2, #0
 800409e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80040a0:	4b61      	ldr	r3, [pc, #388]	; (8004228 <MX_TIM1_Init+0x204>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040a6:	4b60      	ldr	r3, [pc, #384]	; (8004228 <MX_TIM1_Init+0x204>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80040ac:	485e      	ldr	r0, [pc, #376]	; (8004228 <MX_TIM1_Init+0x204>)
 80040ae:	f004 fcab 	bl	8008a08 <HAL_TIM_Base_Init>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80040b8:	f7ff f9b7 	bl	800342a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80040c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040c8:	4619      	mov	r1, r3
 80040ca:	4857      	ldr	r0, [pc, #348]	; (8004228 <MX_TIM1_Init+0x204>)
 80040cc:	f005 f918 	bl	8009300 <HAL_TIM_ConfigClockSource>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80040d6:	f7ff f9a8 	bl	800342a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80040da:	4853      	ldr	r0, [pc, #332]	; (8004228 <MX_TIM1_Init+0x204>)
 80040dc:	f004 fd85 	bl	8008bea <HAL_TIM_PWM_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80040e6:	f7ff f9a0 	bl	800342a <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80040ea:	2304      	movs	r3, #4
 80040ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80040ee:	2330      	movs	r3, #48	; 0x30
 80040f0:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80040f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80040f6:	4619      	mov	r1, r3
 80040f8:	484b      	ldr	r0, [pc, #300]	; (8004228 <MX_TIM1_Init+0x204>)
 80040fa:	f005 f9fb 	bl	80094f4 <HAL_TIM_SlaveConfigSynchro>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8004104:	f7ff f991 	bl	800342a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8004108:	2370      	movs	r3, #112	; 0x70
 800410a:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800410c:	2300      	movs	r3, #0
 800410e:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004114:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004118:	4619      	mov	r1, r3
 800411a:	4843      	ldr	r0, [pc, #268]	; (8004228 <MX_TIM1_Init+0x204>)
 800411c:	f005 ffde 	bl	800a0dc <HAL_TIMEx_MasterConfigSynchronization>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004126:	f7ff f980 	bl	800342a <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800412a:	2301      	movs	r3, #1
 800412c:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800412e:	2301      	movs	r3, #1
 8004130:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 8004132:	2301      	movs	r3, #1
 8004134:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8004136:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800413a:	461a      	mov	r2, r3
 800413c:	2101      	movs	r1, #1
 800413e:	483a      	ldr	r0, [pc, #232]	; (8004228 <MX_TIM1_Init+0x204>)
 8004140:	f006 f8ee 	bl	800a320 <HAL_TIMEx_ConfigBreakInput>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800414a:	f7ff f96e 	bl	800342a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800414e:	2360      	movs	r3, #96	; 0x60
 8004150:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004156:	2300      	movs	r3, #0
 8004158:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800415a:	2300      	movs	r3, #0
 800415c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800415e:	2300      	movs	r3, #0
 8004160:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004166:	2300      	movs	r3, #0
 8004168:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800416a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800416e:	2200      	movs	r2, #0
 8004170:	4619      	mov	r1, r3
 8004172:	482d      	ldr	r0, [pc, #180]	; (8004228 <MX_TIM1_Init+0x204>)
 8004174:	f004 ffb0 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 800417e:	f7ff f954 	bl	800342a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004182:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004186:	2204      	movs	r2, #4
 8004188:	4619      	mov	r1, r3
 800418a:	4827      	ldr	r0, [pc, #156]	; (8004228 <MX_TIM1_Init+0x204>)
 800418c:	f004 ffa4 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 8004196:	f7ff f948 	bl	800342a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800419a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800419e:	2208      	movs	r2, #8
 80041a0:	4619      	mov	r1, r3
 80041a2:	4821      	ldr	r0, [pc, #132]	; (8004228 <MX_TIM1_Init+0x204>)
 80041a4:	f004 ff98 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <MX_TIM1_Init+0x18e>
  {
    Error_Handler();
 80041ae:	f7ff f93c 	bl	800342a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80041b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80041b6:	220c      	movs	r2, #12
 80041b8:	4619      	mov	r1, r3
 80041ba:	481b      	ldr	r0, [pc, #108]	; (8004228 <MX_TIM1_Init+0x204>)
 80041bc:	f004 ff8c 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <MX_TIM1_Init+0x1a6>
  {
    Error_Handler();
 80041c6:	f7ff f930 	bl	800342a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80041da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 15;
 80041e6:	230f      	movs	r3, #15
 80041e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80041ea:	2300      	movs	r3, #0
 80041ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80041f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80041fc:	2300      	movs	r3, #0
 80041fe:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004200:	2300      	movs	r3, #0
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	4619      	mov	r1, r3
 8004208:	4807      	ldr	r0, [pc, #28]	; (8004228 <MX_TIM1_Init+0x204>)
 800420a:	f005 ffe9 	bl	800a1e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <MX_TIM1_Init+0x1f4>
  {
    Error_Handler();
 8004214:	f7ff f909 	bl	800342a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004218:	4803      	ldr	r0, [pc, #12]	; (8004228 <MX_TIM1_Init+0x204>)
 800421a:	f000 f951 	bl	80044c0 <HAL_TIM_MspPostInit>

}
 800421e:	bf00      	nop
 8004220:	3790      	adds	r7, #144	; 0x90
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	200003c4 	.word	0x200003c4
 800422c:	40012c00 	.word	0x40012c00

08004230 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b094      	sub	sp, #80	; 0x50
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004236:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	609a      	str	r2, [r3, #8]
 8004242:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004254:	f107 0320 	add.w	r3, r7, #32
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004260:	1d3b      	adds	r3, r7, #4
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	605a      	str	r2, [r3, #4]
 8004268:	609a      	str	r2, [r3, #8]
 800426a:	60da      	str	r2, [r3, #12]
 800426c:	611a      	str	r2, [r3, #16]
 800426e:	615a      	str	r2, [r3, #20]
 8004270:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004272:	4b34      	ldr	r3, [pc, #208]	; (8004344 <MX_TIM3_Init+0x114>)
 8004274:	4a34      	ldr	r2, [pc, #208]	; (8004348 <MX_TIM3_Init+0x118>)
 8004276:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = HF_TIMX_PSC;
 8004278:	4b32      	ldr	r3, [pc, #200]	; (8004344 <MX_TIM3_Init+0x114>)
 800427a:	2200      	movs	r2, #0
 800427c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800427e:	4b31      	ldr	r3, [pc, #196]	; (8004344 <MX_TIM3_Init+0x114>)
 8004280:	2200      	movs	r2, #0
 8004282:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1699;
 8004284:	4b2f      	ldr	r3, [pc, #188]	; (8004344 <MX_TIM3_Init+0x114>)
 8004286:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800428a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800428c:	4b2d      	ldr	r3, [pc, #180]	; (8004344 <MX_TIM3_Init+0x114>)
 800428e:	2200      	movs	r2, #0
 8004290:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004292:	4b2c      	ldr	r3, [pc, #176]	; (8004344 <MX_TIM3_Init+0x114>)
 8004294:	2200      	movs	r2, #0
 8004296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004298:	482a      	ldr	r0, [pc, #168]	; (8004344 <MX_TIM3_Init+0x114>)
 800429a:	f004 fbb5 	bl	8008a08 <HAL_TIM_Base_Init>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80042a4:	f7ff f8c1 	bl	800342a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ac:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042b2:	4619      	mov	r1, r3
 80042b4:	4823      	ldr	r0, [pc, #140]	; (8004344 <MX_TIM3_Init+0x114>)
 80042b6:	f005 f823 	bl	8009300 <HAL_TIM_ConfigClockSource>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80042c0:	f7ff f8b3 	bl	800342a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80042c4:	481f      	ldr	r0, [pc, #124]	; (8004344 <MX_TIM3_Init+0x114>)
 80042c6:	f004 fc90 	bl	8008bea <HAL_TIM_PWM_Init>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 80042d0:	f7ff f8ab 	bl	800342a <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80042d4:	2304      	movs	r3, #4
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80042d8:	2330      	movs	r3, #48	; 0x30
 80042da:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80042dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042e0:	4619      	mov	r1, r3
 80042e2:	4818      	ldr	r0, [pc, #96]	; (8004344 <MX_TIM3_Init+0x114>)
 80042e4:	f005 f906 	bl	80094f4 <HAL_TIM_SlaveConfigSynchro>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80042ee:	f7ff f89c 	bl	800342a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042f2:	2300      	movs	r3, #0
 80042f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042fa:	f107 0320 	add.w	r3, r7, #32
 80042fe:	4619      	mov	r1, r3
 8004300:	4810      	ldr	r0, [pc, #64]	; (8004344 <MX_TIM3_Init+0x114>)
 8004302:	f005 feeb 	bl	800a0dc <HAL_TIMEx_MasterConfigSynchronization>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800430c:	f7ff f88d 	bl	800342a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004310:	2370      	movs	r3, #112	; 0x70
 8004312:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004318:	2302      	movs	r3, #2
 800431a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004320:	1d3b      	adds	r3, r7, #4
 8004322:	2200      	movs	r2, #0
 8004324:	4619      	mov	r1, r3
 8004326:	4807      	ldr	r0, [pc, #28]	; (8004344 <MX_TIM3_Init+0x114>)
 8004328:	f004 fed6 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8004332:	f7ff f87a 	bl	800342a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004336:	4803      	ldr	r0, [pc, #12]	; (8004344 <MX_TIM3_Init+0x114>)
 8004338:	f000 f8c2 	bl	80044c0 <HAL_TIM_MspPostInit>

}
 800433c:	bf00      	nop
 800433e:	3750      	adds	r7, #80	; 0x50
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000410 	.word	0x20000410
 8004348:	40000400 	.word	0x40000400

0800434c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004352:	f107 0310 	add.w	r3, r7, #16
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004360:	1d3b      	adds	r3, r7, #4
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800436a:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <MX_TIM4_Init+0x94>)
 800436c:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <MX_TIM4_Init+0x98>)
 800436e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = LF_TIMX_PSC;
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <MX_TIM4_Init+0x94>)
 8004372:	2215      	movs	r2, #21
 8004374:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004376:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <MX_TIM4_Init+0x94>)
 8004378:	2200      	movs	r2, #0
 800437a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = LF_TIMX_ARR;
 800437c:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <MX_TIM4_Init+0x94>)
 800437e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004382:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004384:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <MX_TIM4_Init+0x94>)
 8004386:	2200      	movs	r2, #0
 8004388:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800438a:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <MX_TIM4_Init+0x94>)
 800438c:	2200      	movs	r2, #0
 800438e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004390:	4813      	ldr	r0, [pc, #76]	; (80043e0 <MX_TIM4_Init+0x94>)
 8004392:	f004 fb39 	bl	8008a08 <HAL_TIM_Base_Init>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800439c:	f7ff f845 	bl	800342a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80043a6:	f107 0310 	add.w	r3, r7, #16
 80043aa:	4619      	mov	r1, r3
 80043ac:	480c      	ldr	r0, [pc, #48]	; (80043e0 <MX_TIM4_Init+0x94>)
 80043ae:	f004 ffa7 	bl	8009300 <HAL_TIM_ConfigClockSource>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80043b8:	f7ff f837 	bl	800342a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80043bc:	2310      	movs	r3, #16
 80043be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	4619      	mov	r1, r3
 80043c8:	4805      	ldr	r0, [pc, #20]	; (80043e0 <MX_TIM4_Init+0x94>)
 80043ca:	f005 fe87 	bl	800a0dc <HAL_TIMEx_MasterConfigSynchronization>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80043d4:	f7ff f829 	bl	800342a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80043d8:	bf00      	nop
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	2000045c 	.word	0x2000045c
 80043e4:	40000800 	.word	0x40000800

080043e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08c      	sub	sp, #48	; 0x30
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f0:	f107 031c 	add.w	r3, r7, #28
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a29      	ldr	r2, [pc, #164]	; (80044ac <HAL_TIM_Base_MspInit+0xc4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d129      	bne.n	800445e <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800440a:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <HAL_TIM_Base_MspInit+0xc8>)
 800440c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440e:	4a28      	ldr	r2, [pc, #160]	; (80044b0 <HAL_TIM_Base_MspInit+0xc8>)
 8004410:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004414:	6613      	str	r3, [r2, #96]	; 0x60
 8004416:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <HAL_TIM_Base_MspInit+0xc8>)
 8004418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004422:	4b23      	ldr	r3, [pc, #140]	; (80044b0 <HAL_TIM_Base_MspInit+0xc8>)
 8004424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004426:	4a22      	ldr	r2, [pc, #136]	; (80044b0 <HAL_TIM_Base_MspInit+0xc8>)
 8004428:	f043 0302 	orr.w	r3, r3, #2
 800442c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800442e:	4b20      	ldr	r3, [pc, #128]	; (80044b0 <HAL_TIM_Base_MspInit+0xc8>)
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = EN_FAULT_Pin;
 800443a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800443e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004440:	2312      	movs	r3, #18
 8004442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	2300      	movs	r3, #0
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004448:	2300      	movs	r3, #0
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800444c:	2306      	movs	r3, #6
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EN_FAULT_GPIO_Port, &GPIO_InitStruct);
 8004450:	f107 031c 	add.w	r3, r7, #28
 8004454:	4619      	mov	r1, r3
 8004456:	4817      	ldr	r0, [pc, #92]	; (80044b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004458:	f003 f828 	bl	80074ac <HAL_GPIO_Init>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800445c:	e022      	b.n	80044a4 <HAL_TIM_Base_MspInit+0xbc>
  else if(tim_baseHandle->Instance==TIM3)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a15      	ldr	r2, [pc, #84]	; (80044b8 <HAL_TIM_Base_MspInit+0xd0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d10c      	bne.n	8004482 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_TIM_Base_MspInit+0xc8>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446c:	4a10      	ldr	r2, [pc, #64]	; (80044b0 <HAL_TIM_Base_MspInit+0xc8>)
 800446e:	f043 0302 	orr.w	r3, r3, #2
 8004472:	6593      	str	r3, [r2, #88]	; 0x58
 8004474:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <HAL_TIM_Base_MspInit+0xc8>)
 8004476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	693b      	ldr	r3, [r7, #16]
}
 8004480:	e010      	b.n	80044a4 <HAL_TIM_Base_MspInit+0xbc>
  else if(tim_baseHandle->Instance==TIM4)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <HAL_TIM_Base_MspInit+0xd4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d10b      	bne.n	80044a4 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800448c:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <HAL_TIM_Base_MspInit+0xc8>)
 800448e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004490:	4a07      	ldr	r2, [pc, #28]	; (80044b0 <HAL_TIM_Base_MspInit+0xc8>)
 8004492:	f043 0304 	orr.w	r3, r3, #4
 8004496:	6593      	str	r3, [r2, #88]	; 0x58
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_TIM_Base_MspInit+0xc8>)
 800449a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
}
 80044a4:	bf00      	nop
 80044a6:	3730      	adds	r7, #48	; 0x30
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40021000 	.word	0x40021000
 80044b4:	48000400 	.word	0x48000400
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800

080044c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	; 0x28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c8:	f107 0314 	add.w	r3, r7, #20
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a23      	ldr	r2, [pc, #140]	; (800456c <HAL_TIM_MspPostInit+0xac>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d11e      	bne.n	8004520 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e2:	4b23      	ldr	r3, [pc, #140]	; (8004570 <HAL_TIM_MspPostInit+0xb0>)
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	4a22      	ldr	r2, [pc, #136]	; (8004570 <HAL_TIM_MspPostInit+0xb0>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_TIM_MspPostInit+0xb0>)
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = INU_Pin|INV_Pin|INW_Pin;
 80044fa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80044fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004500:	2302      	movs	r3, #2
 8004502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004504:	2302      	movs	r3, #2
 8004506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004508:	2302      	movs	r3, #2
 800450a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800450c:	2306      	movs	r3, #6
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004510:	f107 0314 	add.w	r3, r7, #20
 8004514:	4619      	mov	r1, r3
 8004516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800451a:	f002 ffc7 	bl	80074ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800451e:	e020      	b.n	8004562 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a13      	ldr	r2, [pc, #76]	; (8004574 <HAL_TIM_MspPostInit+0xb4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d11b      	bne.n	8004562 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800452a:	4b11      	ldr	r3, [pc, #68]	; (8004570 <HAL_TIM_MspPostInit+0xb0>)
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	4a10      	ldr	r2, [pc, #64]	; (8004570 <HAL_TIM_MspPostInit+0xb0>)
 8004530:	f043 0302 	orr.w	r3, r3, #2
 8004534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004536:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <HAL_TIM_MspPostInit+0xb0>)
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_REF_Pin;
 8004542:	2310      	movs	r3, #16
 8004544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004546:	2302      	movs	r3, #2
 8004548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454e:	2300      	movs	r3, #0
 8004550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004552:	2302      	movs	r3, #2
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CURRENT_REF_GPIO_Port, &GPIO_InitStruct);
 8004556:	f107 0314 	add.w	r3, r7, #20
 800455a:	4619      	mov	r1, r3
 800455c:	4806      	ldr	r0, [pc, #24]	; (8004578 <HAL_TIM_MspPostInit+0xb8>)
 800455e:	f002 ffa5 	bl	80074ac <HAL_GPIO_Init>
}
 8004562:	bf00      	nop
 8004564:	3728      	adds	r7, #40	; 0x28
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40021000 	.word	0x40021000
 8004574:	40000400 	.word	0x40000400
 8004578:	48000400 	.word	0x48000400

0800457c <UI_TaskInit>:

MCP_Handle_t * pMCP = MC_NULL;
MCP_Handle_t MCP_UI_Params;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MC_Handle_t * pMCIList[], const char* s_fwVer )
{
 800457c:	b5b0      	push	{r4, r5, r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	607a      	str	r2, [r7, #4]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	460b      	mov	r3, r1
 800458a:	72fb      	strb	r3, [r7, #11]

    pMCP = &MCP_UI_Params;
 800458c:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <UI_TaskInit+0x5c>)
 800458e:	4a13      	ldr	r2, [pc, #76]	; (80045dc <UI_TaskInit+0x60>)
 8004590:	601a      	str	r2, [r3, #0]
    pMCP->_Super = UI_Params;
 8004592:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <UI_TaskInit+0x5c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <UI_TaskInit+0x64>)
 8004598:	461c      	mov	r4, r3
 800459a:	4615      	mov	r5, r2
 800459c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800459e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	6023      	str	r3, [r4, #0]

    UFCP_Init( & pUSART );
 80045a4:	480f      	ldr	r0, [pc, #60]	; (80045e4 <UI_TaskInit+0x68>)
 80045a6:	f007 f842 	bl	800b62e <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <UI_TaskInit+0x5c>)
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <UI_TaskInit+0x6c>)
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <UI_TaskInit+0x70>)
 80045b8:	4a0d      	ldr	r2, [pc, #52]	; (80045f0 <UI_TaskInit+0x74>)
 80045ba:	490a      	ldr	r1, [pc, #40]	; (80045e4 <UI_TaskInit+0x68>)
 80045bc:	f7fe ff3a 	bl	8003434 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pUICfg ); /* Initialize UI and link MC components */
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <UI_TaskInit+0x5c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	7af9      	ldrb	r1, [r7, #11]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	f000 f8ea 	bl	80047a4 <UI_Init>

}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bdb0      	pop	{r4, r5, r7, pc}
 80045d8:	200004a8 	.word	0x200004a8
 80045dc:	200004ac 	.word	0x200004ac
 80045e0:	200003ac 	.word	0x200003ac
 80045e4:	20000000 	.word	0x20000000
 80045e8:	0800b94d 	.word	0x0800b94d
 80045ec:	0800b873 	.word	0x0800b873
 80045f0:	0800b8b9 	.word	0x0800b8b9

080045f4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045f8:	4b22      	ldr	r3, [pc, #136]	; (8004684 <MX_USART2_UART_Init+0x90>)
 80045fa:	4a23      	ldr	r2, [pc, #140]	; (8004688 <MX_USART2_UART_Init+0x94>)
 80045fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80045fe:	4b21      	ldr	r3, [pc, #132]	; (8004684 <MX_USART2_UART_Init+0x90>)
 8004600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004606:	4b1f      	ldr	r3, [pc, #124]	; (8004684 <MX_USART2_UART_Init+0x90>)
 8004608:	2200      	movs	r2, #0
 800460a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <MX_USART2_UART_Init+0x90>)
 800460e:	2200      	movs	r2, #0
 8004610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004612:	4b1c      	ldr	r3, [pc, #112]	; (8004684 <MX_USART2_UART_Init+0x90>)
 8004614:	2200      	movs	r2, #0
 8004616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004618:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <MX_USART2_UART_Init+0x90>)
 800461a:	220c      	movs	r2, #12
 800461c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800461e:	4b19      	ldr	r3, [pc, #100]	; (8004684 <MX_USART2_UART_Init+0x90>)
 8004620:	2200      	movs	r2, #0
 8004622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004624:	4b17      	ldr	r3, [pc, #92]	; (8004684 <MX_USART2_UART_Init+0x90>)
 8004626:	2200      	movs	r2, #0
 8004628:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <MX_USART2_UART_Init+0x90>)
 800462c:	2200      	movs	r2, #0
 800462e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <MX_USART2_UART_Init+0x90>)
 8004632:	2200      	movs	r2, #0
 8004634:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004636:	4b13      	ldr	r3, [pc, #76]	; (8004684 <MX_USART2_UART_Init+0x90>)
 8004638:	2200      	movs	r2, #0
 800463a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800463c:	4811      	ldr	r0, [pc, #68]	; (8004684 <MX_USART2_UART_Init+0x90>)
 800463e:	f005 ff8d 	bl	800a55c <HAL_UART_Init>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004648:	f7fe feef 	bl	800342a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800464c:	2100      	movs	r1, #0
 800464e:	480d      	ldr	r0, [pc, #52]	; (8004684 <MX_USART2_UART_Init+0x90>)
 8004650:	f006 fc8e 	bl	800af70 <HAL_UARTEx_SetTxFifoThreshold>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800465a:	f7fe fee6 	bl	800342a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800465e:	2100      	movs	r1, #0
 8004660:	4808      	ldr	r0, [pc, #32]	; (8004684 <MX_USART2_UART_Init+0x90>)
 8004662:	f006 fcc3 	bl	800afec <HAL_UARTEx_SetRxFifoThreshold>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800466c:	f7fe fedd 	bl	800342a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004670:	4804      	ldr	r0, [pc, #16]	; (8004684 <MX_USART2_UART_Init+0x90>)
 8004672:	f006 fc44 	bl	800aefe <HAL_UARTEx_DisableFifoMode>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800467c:	f7fe fed5 	bl	800342a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004680:	bf00      	nop
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20000558 	.word	0x20000558
 8004688:	40004400 	.word	0x40004400

0800468c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08e      	sub	sp, #56	; 0x38
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 80046a4:	f107 0314 	add.w	r3, r7, #20
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a37      	ldr	r2, [pc, #220]	; (8004794 <HAL_UART_MspInit+0x108>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d166      	bne.n	800478a <HAL_UART_MspInit+0xfe>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046bc:	4b36      	ldr	r3, [pc, #216]	; (8004798 <HAL_UART_MspInit+0x10c>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	4a35      	ldr	r2, [pc, #212]	; (8004798 <HAL_UART_MspInit+0x10c>)
 80046c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c6:	6593      	str	r3, [r2, #88]	; 0x58
 80046c8:	4b33      	ldr	r3, [pc, #204]	; (8004798 <HAL_UART_MspInit+0x10c>)
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046d4:	4b30      	ldr	r3, [pc, #192]	; (8004798 <HAL_UART_MspInit+0x10c>)
 80046d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d8:	4a2f      	ldr	r2, [pc, #188]	; (8004798 <HAL_UART_MspInit+0x10c>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046e0:	4b2d      	ldr	r3, [pc, #180]	; (8004798 <HAL_UART_MspInit+0x10c>)
 80046e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80046ec:	230c      	movs	r3, #12
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f0:	2302      	movs	r3, #2
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f8:	2300      	movs	r3, #0
 80046fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046fc:	2307      	movs	r3, #7
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004704:	4619      	mov	r1, r3
 8004706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800470a:	f002 fecf 	bl	80074ac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800470e:	4b23      	ldr	r3, [pc, #140]	; (800479c <HAL_UART_MspInit+0x110>)
 8004710:	4a23      	ldr	r2, [pc, #140]	; (80047a0 <HAL_UART_MspInit+0x114>)
 8004712:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004714:	4b21      	ldr	r3, [pc, #132]	; (800479c <HAL_UART_MspInit+0x110>)
 8004716:	221b      	movs	r2, #27
 8004718:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <HAL_UART_MspInit+0x110>)
 800471c:	2210      	movs	r2, #16
 800471e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004720:	4b1e      	ldr	r3, [pc, #120]	; (800479c <HAL_UART_MspInit+0x110>)
 8004722:	2200      	movs	r2, #0
 8004724:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_UART_MspInit+0x110>)
 8004728:	2280      	movs	r2, #128	; 0x80
 800472a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800472c:	4b1b      	ldr	r3, [pc, #108]	; (800479c <HAL_UART_MspInit+0x110>)
 800472e:	2200      	movs	r2, #0
 8004730:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004732:	4b1a      	ldr	r3, [pc, #104]	; (800479c <HAL_UART_MspInit+0x110>)
 8004734:	2200      	movs	r2, #0
 8004736:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004738:	4b18      	ldr	r3, [pc, #96]	; (800479c <HAL_UART_MspInit+0x110>)
 800473a:	2200      	movs	r2, #0
 800473c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800473e:	4b17      	ldr	r3, [pc, #92]	; (800479c <HAL_UART_MspInit+0x110>)
 8004740:	2200      	movs	r2, #0
 8004742:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004744:	4815      	ldr	r0, [pc, #84]	; (800479c <HAL_UART_MspInit+0x110>)
 8004746:	f002 fcb9 	bl	80070bc <HAL_DMA_Init>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8004750:	f7fe fe6b 	bl	800342a <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI13;
 8004754:	230d      	movs	r3, #13
 8004756:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8004758:	2300      	movs	r3, #0
 800475a:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 800475c:	2300      	movs	r3, #0
 800475e:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = DISABLE;
 8004760:	2300      	movs	r3, #0
 8004762:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8004764:	2301      	movs	r3, #1
 8004766:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart2_tx, &pSyncConfig) != HAL_OK)
 8004768:	f107 0314 	add.w	r3, r7, #20
 800476c:	4619      	mov	r1, r3
 800476e:	480b      	ldr	r0, [pc, #44]	; (800479c <HAL_UART_MspInit+0x110>)
 8004770:	f002 fe5e 	bl	8007430 <HAL_DMAEx_ConfigMuxSync>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 800477a:	f7fe fe56 	bl	800342a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a06      	ldr	r2, [pc, #24]	; (800479c <HAL_UART_MspInit+0x110>)
 8004782:	679a      	str	r2, [r3, #120]	; 0x78
 8004784:	4a05      	ldr	r2, [pc, #20]	; (800479c <HAL_UART_MspInit+0x110>)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800478a:	bf00      	nop
 800478c:	3738      	adds	r7, #56	; 0x38
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40004400 	.word	0x40004400
 8004798:	40021000 	.word	0x40021000
 800479c:	200005e8 	.word	0x200005e8
 80047a0:	40020008 	.word	0x40020008

080047a4 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MC_Handle_t ** pMCI, uint32_t* pUICfg)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	460b      	mov	r3, r1
 80047b2:	72fb      	strb	r3, [r7, #11]
  pHandle->bDriveNum = bMCNum;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	7afa      	ldrb	r2, [r7, #11]
 80047b8:	711a      	strb	r2, [r3, #4]
  pHandle->pMCI = pMCI;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	609a      	str	r2, [r3, #8]
  pHandle->bSelectedDrive = 0u;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	741a      	strb	r2, [r3, #16]
  pHandle->pUICfg = pUICfg;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	60da      	str	r2, [r3, #12]
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UI_SelectMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @param  bSelectMC: The new selected MC, zero based, on which UI operates.
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
  if (bSelectMC  >= pHandle->bDriveNum)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	791b      	ldrb	r3, [r3, #4]
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <UI_SelectMC+0x20>
  {
    retVal = false;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
 80047f6:	e002      	b.n	80047fe <UI_SelectMC+0x26>
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	741a      	strb	r2, [r3, #16]
  }
  return retVal;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <UI_GetSelectedMC>:
  * @brief  Allow to retrieve the MC on which UI currently operates.
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  return (pHandle->bSelectedDrive);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	7c1b      	ldrb	r3, [r3, #16]
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	460b      	mov	r3, r1
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	72fb      	strb	r3, [r7, #11]
  MC_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	7c1b      	ldrb	r3, [r3, #16]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	613b      	str	r3, [r7, #16]

  bool retVal = true;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
  switch (bRegID)
 8004846:	7afb      	ldrb	r3, [r7, #11]
 8004848:	2b07      	cmp	r3, #7
 800484a:	dc17      	bgt.n	800487c <UI_SetReg+0x58>
 800484c:	2b00      	cmp	r3, #0
 800484e:	db3c      	blt.n	80048ca <UI_SetReg+0xa6>
 8004850:	2b07      	cmp	r3, #7
 8004852:	d83a      	bhi.n	80048ca <UI_SetReg+0xa6>
 8004854:	a201      	add	r2, pc, #4	; (adr r2, 800485c <UI_SetReg+0x38>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	08004883 	.word	0x08004883
 8004860:	080048cb 	.word	0x080048cb
 8004864:	080048cb 	.word	0x080048cb
 8004868:	080048cb 	.word	0x080048cb
 800486c:	08004895 	.word	0x08004895
 8004870:	080048a9 	.word	0x080048a9
 8004874:	080048b5 	.word	0x080048b5
 8004878:	080048c1 	.word	0x080048c1
 800487c:	2b5b      	cmp	r3, #91	; 0x5b
 800487e:	d00d      	beq.n	800489c <UI_SetReg+0x78>
 8004880:	e023      	b.n	80048ca <UI_SetReg+0xa6>
  {
  case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	4619      	mov	r1, r3
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff ffa5 	bl	80047d8 <UI_SelectMC>
 800488e:	4603      	mov	r3, r0
 8004890:	75fb      	strb	r3, [r7, #23]
    }
    break;
 8004892:	e01d      	b.n	80048d0 <UI_SetReg+0xac>

  case MC_PROTOCOL_REG_SPEED_REF:
    {

      pMCI->speed_target_value = wValue;
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	675a      	str	r2, [r3, #116]	; 0x74

    }
    break;
 800489a:	e019      	b.n	80048d0 <UI_SetReg+0xac>

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      (void)MC_Core_SetSpeed( pMCI, wValue );
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4619      	mov	r1, r3
 80048a0:	6938      	ldr	r0, [r7, #16]
 80048a2:	f7fe f8b5 	bl	8002a10 <MC_Core_SetSpeed>
    }
    break;
 80048a6:	e013      	b.n	80048d0 <UI_SetReg+0xac>

  case MC_PROTOCOL_REG_SPEED_KP:
    {
      pMCI->pid_parameters.kp = wValue;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    }
    break;
 80048b2:	e00d      	b.n	80048d0 <UI_SetReg+0xac>

  case MC_PROTOCOL_REG_SPEED_KI:
    {
      pMCI->pid_parameters.ki = wValue;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    }
    break;
 80048be:	e007      	b.n	80048d0 <UI_SetReg+0xac>

  case MC_PROTOCOL_REG_SPEED_KD:
    {
      pMCI->pid_parameters.kd = wValue;
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }
    break;
 80048c8:	e002      	b.n	80048d0 <UI_SetReg+0xac>

  default:
    retVal = false;
 80048ca:	2300      	movs	r3, #0
 80048cc:	75fb      	strb	r3, [r7, #23]
    break;
 80048ce:	bf00      	nop
  }

  return retVal;
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	0000      	movs	r0, r0
	...

080048e0 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	460b      	mov	r3, r1
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	72fb      	strb	r3, [r7, #11]
  MC_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	7c1b      	ldrb	r3, [r3, #16]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	613b      	str	r3, [r7, #16]

  int32_t bRetVal = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]

  if ( success != (bool *) 0 )
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <UI_GetReg+0x2e>
  {
    *success = true;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
  }

  switch (bRegID)
 800490e:	7afb      	ldrb	r3, [r7, #11]
 8004910:	2b1e      	cmp	r3, #30
 8004912:	dc71      	bgt.n	80049f8 <UI_GetReg+0x118>
 8004914:	2b00      	cmp	r3, #0
 8004916:	da2b      	bge.n	8004970 <UI_GetReg+0x90>
 8004918:	e144      	b.n	8004ba4 <UI_GetReg+0x2c4>
 800491a:	3b70      	subs	r3, #112	; 0x70
 800491c:	2b11      	cmp	r3, #17
 800491e:	f200 8141 	bhi.w	8004ba4 <UI_GetReg+0x2c4>
 8004922:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <UI_GetReg+0x48>)
 8004924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004928:	08004b79 	.word	0x08004b79
 800492c:	08004ba5 	.word	0x08004ba5
 8004930:	08004b7f 	.word	0x08004b7f
 8004934:	08004b85 	.word	0x08004b85
 8004938:	08004ba5 	.word	0x08004ba5
 800493c:	08004ba5 	.word	0x08004ba5
 8004940:	08004ba5 	.word	0x08004ba5
 8004944:	08004ba5 	.word	0x08004ba5
 8004948:	08004ba5 	.word	0x08004ba5
 800494c:	08004ba5 	.word	0x08004ba5
 8004950:	08004ba5 	.word	0x08004ba5
 8004954:	08004ba5 	.word	0x08004ba5
 8004958:	08004ba5 	.word	0x08004ba5
 800495c:	08004ba5 	.word	0x08004ba5
 8004960:	08004ba5 	.word	0x08004ba5
 8004964:	08004ba5 	.word	0x08004ba5
 8004968:	08004ba5 	.word	0x08004ba5
 800496c:	08004b8b 	.word	0x08004b8b
 8004970:	2b1e      	cmp	r3, #30
 8004972:	f200 8117 	bhi.w	8004ba4 <UI_GetReg+0x2c4>
 8004976:	a201      	add	r2, pc, #4	; (adr r2, 800497c <UI_GetReg+0x9c>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	08004a05 	.word	0x08004a05
 8004980:	08004a11 	.word	0x08004a11
 8004984:	08004a83 	.word	0x08004a83
 8004988:	08004ba5 	.word	0x08004ba5
 800498c:	08004af7 	.word	0x08004af7
 8004990:	08004aff 	.word	0x08004aff
 8004994:	08004b09 	.word	0x08004b09
 8004998:	08004b13 	.word	0x08004b13
 800499c:	08004b91 	.word	0x08004b91
 80049a0:	08004ba5 	.word	0x08004ba5
 80049a4:	08004ba5 	.word	0x08004ba5
 80049a8:	08004ba5 	.word	0x08004ba5
 80049ac:	08004b9b 	.word	0x08004b9b
 80049b0:	08004ba5 	.word	0x08004ba5
 80049b4:	08004ba5 	.word	0x08004ba5
 80049b8:	08004ba5 	.word	0x08004ba5
 80049bc:	08004ba5 	.word	0x08004ba5
 80049c0:	08004ba5 	.word	0x08004ba5
 80049c4:	08004ba5 	.word	0x08004ba5
 80049c8:	08004ba5 	.word	0x08004ba5
 80049cc:	08004ba5 	.word	0x08004ba5
 80049d0:	08004ba5 	.word	0x08004ba5
 80049d4:	08004ba5 	.word	0x08004ba5
 80049d8:	08004ba5 	.word	0x08004ba5
 80049dc:	08004ba5 	.word	0x08004ba5
 80049e0:	08004b1d 	.word	0x08004b1d
 80049e4:	08004b45 	.word	0x08004b45
 80049e8:	08004ba5 	.word	0x08004ba5
 80049ec:	08004ba5 	.word	0x08004ba5
 80049f0:	08004ba5 	.word	0x08004ba5
 80049f4:	08004b6d 	.word	0x08004b6d
 80049f8:	2b81      	cmp	r3, #129	; 0x81
 80049fa:	f300 80d3 	bgt.w	8004ba4 <UI_GetReg+0x2c4>
 80049fe:	2b70      	cmp	r3, #112	; 0x70
 8004a00:	da8b      	bge.n	800491a <UI_GetReg+0x3a>
 8004a02:	e0cf      	b.n	8004ba4 <UI_GetReg+0x2c4>
  {
    case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff ff01 	bl	800480c <UI_GetSelectedMC>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	617b      	str	r3, [r7, #20]
    }
    break;
 8004a0e:	e0cc      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_FLAGS:
    {
      switch ( pMCI->status )
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	2b0b      	cmp	r3, #11
 8004a16:	d830      	bhi.n	8004a7a <UI_GetReg+0x19a>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <UI_GetReg+0x140>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a51 	.word	0x08004a51
 8004a24:	08004a51 	.word	0x08004a51
 8004a28:	08004a51 	.word	0x08004a51
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a51 	.word	0x08004a51
 8004a34:	08004a51 	.word	0x08004a51
 8004a38:	08004a57 	.word	0x08004a57
 8004a3c:	08004a5d 	.word	0x08004a5d
 8004a40:	08004a63 	.word	0x08004a63
 8004a44:	08004a69 	.word	0x08004a69
 8004a48:	08004a6f 	.word	0x08004a6f
 8004a4c:	08004a75 	.word	0x08004a75
        case MC_STOP:
        case MC_ALIGNMENT:
        case MC_STARTUP:
        case MC_VALIDATION:
        case MC_RUN:
          bRetVal = (int32_t) 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
          break;
 8004a54:	e014      	b.n	8004a80 <UI_GetReg+0x1a0>
        case MC_SPEEDFBKERROR:
          bRetVal = MC_SPEED_FDBK;
 8004a56:	2320      	movs	r3, #32
 8004a58:	617b      	str	r3, [r7, #20]
          break;
 8004a5a:	e011      	b.n	8004a80 <UI_GetReg+0x1a0>
        case MC_OVERCURRENT:
          bRetVal = MC_BREAK_IN;
 8004a5c:	2340      	movs	r3, #64	; 0x40
 8004a5e:	617b      	str	r3, [r7, #20]
          break;
 8004a60:	e00e      	b.n	8004a80 <UI_GetReg+0x1a0>
        case MC_VALIDATION_FAILURE:
          bRetVal = MC_START_UP;
 8004a62:	2310      	movs	r3, #16
 8004a64:	617b      	str	r3, [r7, #20]
          break;
 8004a66:	e00b      	b.n	8004a80 <UI_GetReg+0x1a0>
        case MC_VALIDATION_BEMF_FAILURE:
          bRetVal = (MC_SW_ERROR | MC_SPEED_FDBK);
 8004a68:	23a0      	movs	r3, #160	; 0xa0
 8004a6a:	617b      	str	r3, [r7, #20]
          break;
 8004a6c:	e008      	b.n	8004a80 <UI_GetReg+0x1a0>
        case MC_VALIDATION_HALL_FAILURE:
          bRetVal = (MC_SW_ERROR | MC_SPEED_FDBK);
 8004a6e:	23a0      	movs	r3, #160	; 0xa0
 8004a70:	617b      	str	r3, [r7, #20]
          break;
 8004a72:	e005      	b.n	8004a80 <UI_GetReg+0x1a0>
        case MC_LF_TIMER_FAILURE:
          bRetVal = MC_FOC_DURATION;
 8004a74:	2301      	movs	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
          break;
 8004a78:	e002      	b.n	8004a80 <UI_GetReg+0x1a0>
        default:
          bRetVal = MC_SW_ERROR;
 8004a7a:	2380      	movs	r3, #128	; 0x80
 8004a7c:	617b      	str	r3, [r7, #20]
		  break;
 8004a7e:	bf00      	nop
	  }
    }
	break;
 8004a80:	e093      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_STATUS:
    {
      switch ( pMCI->status )
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d831      	bhi.n	8004aee <UI_GetReg+0x20e>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <UI_GetReg+0x1b0>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004ac5 	.word	0x08004ac5
 8004a94:	08004acb 	.word	0x08004acb
 8004a98:	08004ad1 	.word	0x08004ad1
 8004a9c:	08004ad7 	.word	0x08004ad7
 8004aa0:	08004add 	.word	0x08004add
 8004aa4:	08004ae3 	.word	0x08004ae3
 8004aa8:	08004ae9 	.word	0x08004ae9
 8004aac:	08004ae9 	.word	0x08004ae9
 8004ab0:	08004ae9 	.word	0x08004ae9
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004ae9 	.word	0x08004ae9
 8004abc:	08004ae9 	.word	0x08004ae9
 8004ac0:	08004ae9 	.word	0x08004ae9
        {
        case MC_IDLE:
          bRetVal = IDLE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
          break;
 8004ac8:	e014      	b.n	8004af4 <UI_GetReg+0x214>
        case MC_STOP:
          bRetVal = STOP;
 8004aca:	2308      	movs	r3, #8
 8004acc:	617b      	str	r3, [r7, #20]
          break;
 8004ace:	e011      	b.n	8004af4 <UI_GetReg+0x214>
        case MC_ALIGNMENT:
          bRetVal = ALIGNMENT;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	617b      	str	r3, [r7, #20]
          break;
 8004ad4:	e00e      	b.n	8004af4 <UI_GetReg+0x214>
        case MC_STARTUP:
          bRetVal = START;
 8004ad6:	2304      	movs	r3, #4
 8004ad8:	617b      	str	r3, [r7, #20]
          break;
 8004ada:	e00b      	b.n	8004af4 <UI_GetReg+0x214>
        case MC_VALIDATION:
          bRetVal = START_RUN;
 8004adc:	2305      	movs	r3, #5
 8004ade:	617b      	str	r3, [r7, #20]
          break;
 8004ae0:	e008      	b.n	8004af4 <UI_GetReg+0x214>
        case MC_RUN:
          bRetVal = RUN;
 8004ae2:	2306      	movs	r3, #6
 8004ae4:	617b      	str	r3, [r7, #20]
          break;
 8004ae6:	e005      	b.n	8004af4 <UI_GetReg+0x214>
        case MC_VALIDATION_FAILURE:
        case MC_VALIDATION_BEMF_FAILURE:
        case MC_VALIDATION_HALL_FAILURE:
        case MC_LF_TIMER_FAILURE:
        case MC_ADC_CALLBACK_FAILURE:
          bRetVal = FAULT_OVER;
 8004ae8:	230b      	movs	r3, #11
 8004aea:	617b      	str	r3, [r7, #20]
          break;
 8004aec:	e002      	b.n	8004af4 <UI_GetReg+0x214>
        default:
          bRetVal = FAULT_NOW;
 8004aee:	230a      	movs	r3, #10
 8004af0:	617b      	str	r3, [r7, #20]
		  break;
 8004af2:	bf00      	nop
		}
    }
	break;
 8004af4:	e059      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_SPEED_REF:
    {
      bRetVal = (int32_t) pMCI->speed_target_command;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afa:	617b      	str	r3, [r7, #20]
    }
    break;
 8004afc:	e055      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_SPEED_KP:
    {
      bRetVal = (int32_t) pMCI->pid_parameters.kp;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8004b04:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b06:	e050      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_SPEED_KI:
    {
      bRetVal = (int32_t) pMCI->pid_parameters.ki;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8004b0e:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b10:	e04b      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_SPEED_KD:
    {
      bRetVal = (int32_t) pMCI->pid_parameters.kd;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004b18:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b1a:	e046      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_BUS_VOLTAGE:
    {
      bRetVal = (int32_t) (3.30 / IHM16M1_ADC_FULL_SCALE / 0.0625 * pMCI->adc_user.measurement[MC_USER_MEAS_3]);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fb fdf4 	bl	8000710 <__aeabi_i2d>
 8004b28:	a324      	add	r3, pc, #144	; (adr r3, 8004bbc <UI_GetReg+0x2dc>)
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f7fb fb73 	bl	8000218 <__aeabi_dmul>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4610      	mov	r0, r2
 8004b38:	4619      	mov	r1, r3
 8004b3a:	f7fb fe53 	bl	80007e4 <__aeabi_d2iz>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b42:	e032      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_HEATS_TEMP:
    {
      bRetVal = (int32_t) (3.30 / IHM16M1_ADC_FULL_SCALE / 0.0625 * pMCI->adc_user.measurement[MC_USER_MEAS_4]);
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fb fde0 	bl	8000710 <__aeabi_i2d>
 8004b50:	a31a      	add	r3, pc, #104	; (adr r3, 8004bbc <UI_GetReg+0x2dc>)
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f7fb fb5f 	bl	8000218 <__aeabi_dmul>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	f7fb fe3f 	bl	80007e4 <__aeabi_d2iz>
 8004b66:	4603      	mov	r3, r0
 8004b68:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b6a:	e01e      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_SPEED_MEAS:
    {
      bRetVal = (int32_t) MC_Core_GetSpeed( pMCI );
 8004b6c:	6938      	ldr	r0, [r7, #16]
 8004b6e:	f7fd f83f 	bl	8001bf0 <MC_Core_GetSpeed>
 8004b72:	4603      	mov	r3, r0
 8004b74:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b76:	e018      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_UID:
    {
      bRetVal = (int32_t)(MC_UID);
 8004b78:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <UI_GetReg+0x2d8>)
 8004b7a:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b7c:	e015      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_CTRBDID:
    {
      bRetVal = CTRBDID;
 8004b7e:	231d      	movs	r3, #29
 8004b80:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b82:	e012      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_PWBDID:
    {
      bRetVal = PWBDID;
 8004b84:	2336      	movs	r3, #54	; 0x36
 8004b86:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b88:	e00f      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_PWBDID2:
    {
      bRetVal = (uint32_t) 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b8e:	e00c      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_TORQUE_REF:
    {
      bRetVal = (int32_t) pMCI->pulse_value;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b96:	617b      	str	r3, [r7, #20]
    }
    break;
 8004b98:	e007      	b.n	8004baa <UI_GetReg+0x2ca>

    case MC_PROTOCOL_REG_FLUX_REF:
    {
      bRetVal = (int32_t) pMCI->startup_reference;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ba0:	617b      	str	r3, [r7, #20]
    }
    break;
 8004ba2:	e002      	b.n	8004baa <UI_GetReg+0x2ca>

    default:
	{
      bRetVal = (int32_t) 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
	}
    break;
 8004ba8:	bf00      	nop
  }
  return bRetVal;
 8004baa:	697b      	ldr	r3, [r7, #20]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	f3af 8000 	nop.w
 8004bb8:	34a6847a 	.word	0x34a6847a
 8004bbc:	e734d9b4 	.word	0xe734d9b4
 8004bc0:	3f8a680c 	.word	0x3f8a680c

08004bc4 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	75fb      	strb	r3, [r7, #23]

  MC_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7c1b      	ldrb	r3, [r3, #16]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	613b      	str	r3, [r7, #16]

  switch (bCmdID)
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	2b0d      	cmp	r3, #13
 8004bea:	d87f      	bhi.n	8004cec <UI_ExecCmd+0x128>
 8004bec:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <UI_ExecCmd+0x30>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c2d 	.word	0x08004c2d
 8004bf8:	08004c4b 	.word	0x08004c4b
 8004bfc:	08004c63 	.word	0x08004c63
 8004c00:	08004ca9 	.word	0x08004ca9
 8004c04:	08004cf3 	.word	0x08004cf3
 8004c08:	08004c7b 	.word	0x08004c7b
 8004c0c:	08004cb1 	.word	0x08004cb1
 8004c10:	08004cf3 	.word	0x08004cf3
 8004c14:	08004cf3 	.word	0x08004cf3
 8004c18:	08004ced 	.word	0x08004ced
 8004c1c:	08004ced 	.word	0x08004ced
 8004c20:	08004ced 	.word	0x08004ced
 8004c24:	08004ced 	.word	0x08004ced
 8004c28:	08004c4b 	.word	0x08004c4b
  {
  case MC_PROTOCOL_CMD_START_MOTOR:
    {
      MC_Status_t mc_status = MC_Core_GetStatus( pMCI );
 8004c2c:	6938      	ldr	r0, [r7, #16]
 8004c2e:	f7fc ffeb 	bl	8001c08 <MC_Core_GetStatus>
 8004c32:	4603      	mov	r3, r0
 8004c34:	72fb      	strb	r3, [r7, #11]
      if ( mc_status == MC_IDLE || mc_status == MC_STOP )
 8004c36:	7afb      	ldrb	r3, [r7, #11]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <UI_ExecCmd+0x7e>
 8004c3c:	7afb      	ldrb	r3, [r7, #11]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d159      	bne.n	8004cf6 <UI_ExecCmd+0x132>
      {
        (void) MC_Core_Start( pMCI );
 8004c42:	6938      	ldr	r0, [r7, #16]
 8004c44:	f7fd ff0e 	bl	8002a64 <MC_Core_Start>
      }
    }
    break;
 8004c48:	e055      	b.n	8004cf6 <UI_ExecCmd+0x132>

  case MC_PROTOCOL_CMD_STOP_MOTOR:
  case MC_PROTOCOL_CMD_SC_STOP:
    {
      MC_Status_t mc_status = MC_Core_GetStatus( pMCI );
 8004c4a:	6938      	ldr	r0, [r7, #16]
 8004c4c:	f7fc ffdc 	bl	8001c08 <MC_Core_GetStatus>
 8004c50:	4603      	mov	r3, r0
 8004c52:	733b      	strb	r3, [r7, #12]
      if ( mc_status == MC_RUN )
 8004c54:	7b3b      	ldrb	r3, [r7, #12]
 8004c56:	2b05      	cmp	r3, #5
 8004c58:	d14f      	bne.n	8004cfa <UI_ExecCmd+0x136>
      {
        (void) MC_Core_Stop( pMCI );
 8004c5a:	6938      	ldr	r0, [r7, #16]
 8004c5c:	f7fd ff5c 	bl	8002b18 <MC_Core_Stop>
      }
    }
    break;
 8004c60:	e04b      	b.n	8004cfa <UI_ExecCmd+0x136>

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      MC_Status_t mc_status = MC_Core_GetStatus( pMCI );
 8004c62:	6938      	ldr	r0, [r7, #16]
 8004c64:	f7fc ffd0 	bl	8001c08 <MC_Core_GetStatus>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	737b      	strb	r3, [r7, #13]
      if ( mc_status == MC_RUN )
 8004c6c:	7b7b      	ldrb	r3, [r7, #13]
 8004c6e:	2b05      	cmp	r3, #5
 8004c70:	d145      	bne.n	8004cfe <UI_ExecCmd+0x13a>
      {
        (void) MC_Core_Stop( pMCI );
 8004c72:	6938      	ldr	r0, [r7, #16]
 8004c74:	f7fd ff50 	bl	8002b18 <MC_Core_Stop>
      }
    }
    break;
 8004c78:	e041      	b.n	8004cfe <UI_ExecCmd+0x13a>
    }
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      MC_Status_t mc_status = MC_Core_GetStatus( pMCI );
 8004c7a:	6938      	ldr	r0, [r7, #16]
 8004c7c:	f7fc ffc4 	bl	8001c08 <MC_Core_GetStatus>
 8004c80:	4603      	mov	r3, r0
 8004c82:	73bb      	strb	r3, [r7, #14]
      if ( mc_status == MC_IDLE || mc_status == MC_STOP )
 8004c84:	7bbb      	ldrb	r3, [r7, #14]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <UI_ExecCmd+0xcc>
 8004c8a:	7bbb      	ldrb	r3, [r7, #14]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d104      	bne.n	8004c9a <UI_ExecCmd+0xd6>
      {
        (void) MC_Core_Start( pMCI );
 8004c90:	6938      	ldr	r0, [r7, #16]
 8004c92:	f7fd fee7 	bl	8002a64 <MC_Core_Start>
 8004c96:	bf00      	nop
      else if ( mc_status == MC_RUN )
      {
        (void) MC_Core_Stop( pMCI );
      }
    }
    break;
 8004c98:	e033      	b.n	8004d02 <UI_ExecCmd+0x13e>
      else if ( mc_status == MC_RUN )
 8004c9a:	7bbb      	ldrb	r3, [r7, #14]
 8004c9c:	2b05      	cmp	r3, #5
 8004c9e:	d130      	bne.n	8004d02 <UI_ExecCmd+0x13e>
        (void) MC_Core_Stop( pMCI );
 8004ca0:	6938      	ldr	r0, [r7, #16]
 8004ca2:	f7fd ff39 	bl	8002b18 <MC_Core_Stop>
    break;
 8004ca6:	e02c      	b.n	8004d02 <UI_ExecCmd+0x13e>

  case MC_PROTOCOL_CMD_RESET:
    {
        (void) MC_Core_Reset( pMCI );
 8004ca8:	6938      	ldr	r0, [r7, #16]
 8004caa:	f7fd fddf 	bl	800286c <MC_Core_Reset>
    }
    break;
 8004cae:	e02b      	b.n	8004d08 <UI_ExecCmd+0x144>

  case MC_PROTOCOL_CMD_FAULT_ACK:
    {
      MC_Status_t mc_status = MC_Core_GetStatus( pMCI );
 8004cb0:	6938      	ldr	r0, [r7, #16]
 8004cb2:	f7fc ffa9 	bl	8001c08 <MC_Core_GetStatus>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	73fb      	strb	r3, [r7, #15]
      if ( mc_status == MC_SPEEDFBKERROR || mc_status == MC_OVERCURRENT || mc_status == MC_VALIDATION_FAILURE ||
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	2b06      	cmp	r3, #6
 8004cbe:	d011      	beq.n	8004ce4 <UI_ExecCmd+0x120>
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	2b07      	cmp	r3, #7
 8004cc4:	d00e      	beq.n	8004ce4 <UI_ExecCmd+0x120>
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d00b      	beq.n	8004ce4 <UI_ExecCmd+0x120>
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b09      	cmp	r3, #9
 8004cd0:	d008      	beq.n	8004ce4 <UI_ExecCmd+0x120>
           mc_status == MC_VALIDATION_BEMF_FAILURE || mc_status == MC_VALIDATION_HALL_FAILURE ||
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b0a      	cmp	r3, #10
 8004cd6:	d005      	beq.n	8004ce4 <UI_ExecCmd+0x120>
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d002      	beq.n	8004ce4 <UI_ExecCmd+0x120>
		   mc_status == MC_ADC_CALLBACK_FAILURE || mc_status == MC_LF_TIMER_FAILURE )
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	2b0b      	cmp	r3, #11
 8004ce2:	d110      	bne.n	8004d06 <UI_ExecCmd+0x142>
      {
        /* This call transitions the state to MC_STOP. Not an error state anymore and ready to start again. */
        (void) MC_Core_Stop( pMCI );
 8004ce4:	6938      	ldr	r0, [r7, #16]
 8004ce6:	f7fd ff17 	bl	8002b18 <MC_Core_Stop>
      }
    }
    break;
 8004cea:	e00c      	b.n	8004d06 <UI_ExecCmd+0x142>
    }
    break;

  default:
    {
    retVal = false;
 8004cec:	2300      	movs	r3, #0
 8004cee:	75fb      	strb	r3, [r7, #23]
	}
    break;
 8004cf0:	e00a      	b.n	8004d08 <UI_ExecCmd+0x144>
    break;
 8004cf2:	bf00      	nop
 8004cf4:	e008      	b.n	8004d08 <UI_ExecCmd+0x144>
    break;
 8004cf6:	bf00      	nop
 8004cf8:	e006      	b.n	8004d08 <UI_ExecCmd+0x144>
    break;
 8004cfa:	bf00      	nop
 8004cfc:	e004      	b.n	8004d08 <UI_ExecCmd+0x144>
    break;
 8004cfe:	bf00      	nop
 8004d00:	e002      	b.n	8004d08 <UI_ExecCmd+0x144>
    break;
 8004d02:	bf00      	nop
 8004d04:	e000      	b.n	8004d08 <UI_ExecCmd+0x144>
    break;
 8004d06:	bf00      	nop
  }
  return retVal;
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop

08004d14 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]
  MC_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	7c1b      	ldrb	r3, [r3, #16]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	617b      	str	r3, [r7, #20]

  if (wFinalMecSpeedUnit >= 0)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	db09      	blt.n	8004d4c <UI_ExecSpeedRamp+0x38>
  {
    (void)MC_Core_SetDirection( pMCI, 0 );
 8004d38:	2100      	movs	r1, #0
 8004d3a:	6978      	ldr	r0, [r7, #20]
 8004d3c:	f7fc ffe0 	bl	8001d00 <MC_Core_SetDirection>
    (void)MC_Core_SetSpeed( pMCI, wFinalMecSpeedUnit );
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4619      	mov	r1, r3
 8004d44:	6978      	ldr	r0, [r7, #20]
 8004d46:	f7fd fe63 	bl	8002a10 <MC_Core_SetSpeed>
 8004d4a:	e009      	b.n	8004d60 <UI_ExecSpeedRamp+0x4c>
  }
  else
  {
    (void)MC_Core_SetDirection( pMCI, 1 );
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	6978      	ldr	r0, [r7, #20]
 8004d50:	f7fc ffd6 	bl	8001d00 <MC_Core_SetDirection>
    (void)MC_Core_SetSpeed( pMCI, (-wFinalMecSpeedUnit) );
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	425b      	negs	r3, r3
 8004d58:	4619      	mov	r1, r3
 8004d5a:	6978      	ldr	r0, [r7, #20]
 8004d5c:	f7fd fe58 	bl	8002a10 <MC_Core_SetSpeed>
  }
  return true;
 8004d60:	2301      	movs	r3, #1
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004d70:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <SystemInit+0x20>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	4a05      	ldr	r2, [pc, #20]	; (8004d8c <SystemInit+0x20>)
 8004d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d80:	bf00      	nop
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	e000ed00 	.word	0xe000ed00

08004d90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <HAL_Init+0x3c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a0b      	ldr	r2, [pc, #44]	; (8004dcc <HAL_Init+0x3c>)
 8004da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004da6:	2003      	movs	r0, #3
 8004da8:	f001 ff78 	bl	8006c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004dac:	2003      	movs	r0, #3
 8004dae:	f000 f80f 	bl	8004dd0 <HAL_InitTick>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	71fb      	strb	r3, [r7, #7]
 8004dbc:	e001      	b.n	8004dc2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004dbe:	f7ff f827 	bl	8003e10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004dc2:	79fb      	ldrb	r3, [r7, #7]

}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40022000 	.word	0x40022000

08004dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004ddc:	4b16      	ldr	r3, [pc, #88]	; (8004e38 <HAL_InitTick+0x68>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d022      	beq.n	8004e2a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004de4:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <HAL_InitTick+0x6c>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <HAL_InitTick+0x68>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f001 ff82 	bl	8006d02 <HAL_SYSTICK_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10f      	bne.n	8004e24 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b0f      	cmp	r3, #15
 8004e08:	d809      	bhi.n	8004e1e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e12:	f001 ff4e 	bl	8006cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e16:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <HAL_InitTick+0x70>)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	e007      	b.n	8004e2e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	e004      	b.n	8004e2e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
 8004e28:	e001      	b.n	8004e2e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000144 	.word	0x20000144
 8004e3c:	2000013c 	.word	0x2000013c
 8004e40:	20000140 	.word	0x20000140

08004e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  return uwTick;
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <HAL_GetTick+0x14>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000648 	.word	0x20000648

08004e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e64:	f7ff ffee 	bl	8004e44 <HAL_GetTick>
 8004e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d004      	beq.n	8004e80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <HAL_Delay+0x40>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e80:	bf00      	nop
 8004e82:	f7ff ffdf 	bl	8004e44 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d8f7      	bhi.n	8004e82 <HAL_Delay+0x26>
  {
  }
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20000144 	.word	0x20000144

08004ea0 <LL_ADC_SetCommonClock>:
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	609a      	str	r2, [r3, #8]
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <LL_ADC_SetCommonPathInternalCh>:
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	609a      	str	r2, [r3, #8]
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <LL_ADC_GetCommonPathInternalCh>:
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <LL_ADC_SetOffset>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3360      	adds	r3, #96	; 0x60
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <LL_ADC_SetOffset+0x44>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	601a      	str	r2, [r3, #0]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	03fff000 	.word	0x03fff000

08004f50 <LL_ADC_GetOffsetChannel>:
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3360      	adds	r3, #96	; 0x60
 8004f5e:	461a      	mov	r2, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <LL_ADC_SetOffsetState>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3360      	adds	r3, #96	; 0x60
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	601a      	str	r2, [r3, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <LL_ADC_SetOffsetSign>:
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b087      	sub	sp, #28
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3360      	adds	r3, #96	; 0x60
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	601a      	str	r2, [r3, #0]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <LL_ADC_SetOffsetSaturation>:
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3360      	adds	r3, #96	; 0x60
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	431a      	orrs	r2, r3
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	601a      	str	r2, [r3, #0]
}
 8005012:	bf00      	nop
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	615a      	str	r2, [r3, #20]
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <LL_ADC_REG_SetSequencerRanks>:
{
 800506a:	b480      	push	{r7}
 800506c:	b087      	sub	sp, #28
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3330      	adds	r3, #48	; 0x30
 800507a:	461a      	mov	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	0a1b      	lsrs	r3, r3, #8
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	4413      	add	r3, r2
 8005088:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	211f      	movs	r1, #31
 8005096:	fa01 f303 	lsl.w	r3, r1, r3
 800509a:	43db      	mvns	r3, r3
 800509c:	401a      	ands	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	0e9b      	lsrs	r3, r3, #26
 80050a2:	f003 011f 	and.w	r1, r3, #31
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f003 031f 	and.w	r3, r3, #31
 80050ac:	fa01 f303 	lsl.w	r3, r1, r3
 80050b0:	431a      	orrs	r2, r3
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	601a      	str	r2, [r3, #0]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ce:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <LL_ADC_SetChannelSamplingTime>:
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3314      	adds	r3, #20
 80050f8:	461a      	mov	r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	0e5b      	lsrs	r3, r3, #25
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	4413      	add	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	0d1b      	lsrs	r3, r3, #20
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2107      	movs	r1, #7
 8005116:	fa01 f303 	lsl.w	r3, r1, r3
 800511a:	43db      	mvns	r3, r3
 800511c:	401a      	ands	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	0d1b      	lsrs	r3, r3, #20
 8005122:	f003 031f 	and.w	r3, r3, #31
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	fa01 f303 	lsl.w	r3, r1, r3
 800512c:	431a      	orrs	r2, r3
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	601a      	str	r2, [r3, #0]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <LL_ADC_SetChannelSingleDiff>:
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a0f      	ldr	r2, [pc, #60]	; (800518c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10a      	bne.n	800516a <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005160:	431a      	orrs	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005168:	e00a      	b.n	8005180 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005176:	43db      	mvns	r3, r3
 8005178:	401a      	ands	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	407f0000 	.word	0x407f0000

08005190 <LL_ADC_GetMultimode>:
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 031f 	and.w	r3, r3, #31
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <LL_ADC_GetMultiDMATransfer>:
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <LL_ADC_DisableDeepPowerDown>:
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80051d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6093      	str	r3, [r2, #8]
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <LL_ADC_IsDeepPowerDownEnabled>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005200:	d101      	bne.n	8005206 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <LL_ADC_EnableInternalRegulator>:
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005228:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	609a      	str	r2, [r3, #8]
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <LL_ADC_IsInternalRegulatorEnabled>:
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005250:	d101      	bne.n	8005256 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <LL_ADC_Enable>:
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005274:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005278:	f043 0201 	orr.w	r2, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	609a      	str	r2, [r3, #8]
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <LL_ADC_Disable>:
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800529c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052a0:	f043 0202 	orr.w	r2, r3, #2
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	609a      	str	r2, [r3, #8]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <LL_ADC_IsEnabled>:
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <LL_ADC_IsEnabled+0x18>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <LL_ADC_IsEnabled+0x1a>
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <LL_ADC_IsDisableOngoing>:
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d101      	bne.n	80052f2 <LL_ADC_IsDisableOngoing+0x18>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <LL_ADC_IsDisableOngoing+0x1a>
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <LL_ADC_REG_StartConversion>:
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005314:	f043 0204 	orr.w	r2, r3, #4
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	609a      	str	r2, [r3, #8]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LL_ADC_REG_StopConversion>:
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005338:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800533c:	f043 0210 	orr.w	r2, r3, #16
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <LL_ADC_REG_IsConversionOngoing>:
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b04      	cmp	r3, #4
 8005362:	d101      	bne.n	8005368 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005386:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800538a:	f043 0220 	orr.w	r2, r3, #32
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d101      	bne.n	80053b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053c4:	b590      	push	{r4, r7, lr}
 80053c6:	b089      	sub	sp, #36	; 0x24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e177      	b.n	80056ce <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d109      	bne.n	8005400 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7fd fd97 	bl	8002f20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff fef1 	bl	80051ec <LL_ADC_IsDeepPowerDownEnabled>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fed7 	bl	80051c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff ff0c 	bl	800523c <LL_ADC_IsInternalRegulatorEnabled>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d115      	bne.n	8005456 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff fef0 	bl	8005214 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005434:	4b9c      	ldr	r3, [pc, #624]	; (80056a8 <HAL_ADC_Init+0x2e4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	099b      	lsrs	r3, r3, #6
 800543a:	4a9c      	ldr	r2, [pc, #624]	; (80056ac <HAL_ADC_Init+0x2e8>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	099b      	lsrs	r3, r3, #6
 8005442:	3301      	adds	r3, #1
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005448:	e002      	b.n	8005450 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	3b01      	subs	r3, #1
 800544e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f9      	bne.n	800544a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff feee 	bl	800523c <LL_ADC_IsInternalRegulatorEnabled>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10d      	bne.n	8005482 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546a:	f043 0210 	orr.w	r2, r3, #16
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005476:	f043 0201 	orr.w	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff ff62 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 800548c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 8110 	bne.w	80056bc <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f040 810c 	bne.w	80056bc <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80054ac:	f043 0202 	orr.w	r2, r3, #2
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fefb 	bl	80052b4 <LL_ADC_IsEnabled>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d111      	bne.n	80054e8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80054c8:	f7ff fef4 	bl	80052b4 <LL_ADC_IsEnabled>
 80054cc:	4604      	mov	r4, r0
 80054ce:	4878      	ldr	r0, [pc, #480]	; (80056b0 <HAL_ADC_Init+0x2ec>)
 80054d0:	f7ff fef0 	bl	80052b4 <LL_ADC_IsEnabled>
 80054d4:	4603      	mov	r3, r0
 80054d6:	4323      	orrs	r3, r4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d105      	bne.n	80054e8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4619      	mov	r1, r3
 80054e2:	4874      	ldr	r0, [pc, #464]	; (80056b4 <HAL_ADC_Init+0x2f0>)
 80054e4:	f7ff fcdc 	bl	8004ea0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	7f5b      	ldrb	r3, [r3, #29]
 80054ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80054f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80054fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005506:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005508:	4313      	orrs	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005512:	2b01      	cmp	r3, #1
 8005514:	d106      	bne.n	8005524 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	3b01      	subs	r3, #1
 800551c:	045b      	lsls	r3, r3, #17
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4313      	orrs	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d009      	beq.n	8005540 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	4313      	orrs	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	4b5c      	ldr	r3, [pc, #368]	; (80056b8 <HAL_ADC_Init+0x2f4>)
 8005548:	4013      	ands	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	69b9      	ldr	r1, [r7, #24]
 8005550:	430b      	orrs	r3, r1
 8005552:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff feee 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 8005574:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ff0f 	bl	800539e <LL_ADC_INJ_IsConversionOngoing>
 8005580:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d16d      	bne.n	8005664 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d16a      	bne.n	8005664 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005592:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800559a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800559c:	4313      	orrs	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055aa:	f023 0302 	bic.w	r3, r3, #2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	69b9      	ldr	r1, [r7, #24]
 80055b4:	430b      	orrs	r3, r1
 80055b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d017      	beq.n	80055f0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691a      	ldr	r2, [r3, #16]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80055ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80055dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6911      	ldr	r1, [r2, #16]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	430b      	orrs	r3, r1
 80055ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80055ee:	e013      	b.n	8005618 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80055fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005610:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005614:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800561e:	2b01      	cmp	r3, #1
 8005620:	d118      	bne.n	8005654 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800562c:	f023 0304 	bic.w	r3, r3, #4
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005638:	4311      	orrs	r1, r2
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800563e:	4311      	orrs	r1, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005644:	430a      	orrs	r2, r1
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	611a      	str	r2, [r3, #16]
 8005652:	e007      	b.n	8005664 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d10c      	bne.n	8005686 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	f023 010f 	bic.w	r1, r3, #15
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	1e5a      	subs	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	631a      	str	r2, [r3, #48]	; 0x30
 8005684:	e007      	b.n	8005696 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 020f 	bic.w	r2, r2, #15
 8005694:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	f043 0201 	orr.w	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80056a6:	e011      	b.n	80056cc <HAL_ADC_Init+0x308>
 80056a8:	2000013c 	.word	0x2000013c
 80056ac:	053e2d63 	.word	0x053e2d63
 80056b0:	50000100 	.word	0x50000100
 80056b4:	50000300 	.word	0x50000300
 80056b8:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c0:	f043 0210 	orr.w	r2, r3, #16
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80056cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3724      	adds	r7, #36	; 0x24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd90      	pop	{r4, r7, pc}
 80056d6:	bf00      	nop

080056d8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056e0:	4894      	ldr	r0, [pc, #592]	; (8005934 <HAL_ADC_Start_IT+0x25c>)
 80056e2:	f7ff fd55 	bl	8005190 <LL_ADC_GetMultimode>
 80056e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff fe2f 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f040 8114 	bne.w	8005922 <HAL_ADC_Start_IT+0x24a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_ADC_Start_IT+0x30>
 8005704:	2302      	movs	r3, #2
 8005706:	e111      	b.n	800592c <HAL_ADC_Start_IT+0x254>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f001 f835 	bl	8006780 <ADC_Enable>
 8005716:	4603      	mov	r3, r0
 8005718:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800571a:	7dfb      	ldrb	r3, [r7, #23]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f040 80fb 	bne.w	8005918 <HAL_ADC_Start_IT+0x240>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a7f      	ldr	r2, [pc, #508]	; (8005938 <HAL_ADC_Start_IT+0x260>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d002      	beq.n	8005746 <HAL_ADC_Start_IT+0x6e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	e001      	b.n	800574a <HAL_ADC_Start_IT+0x72>
 8005746:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	4293      	cmp	r3, r2
 8005750:	d002      	beq.n	8005758 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d105      	bne.n	8005764 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d006      	beq.n	800577e <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005774:	f023 0206 	bic.w	r2, r3, #6
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	661a      	str	r2, [r3, #96]	; 0x60
 800577c:	e002      	b.n	8005784 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	221c      	movs	r2, #28
 800578a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 021c 	bic.w	r2, r2, #28
 80057a2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d108      	bne.n	80057be <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0208 	orr.w	r2, r2, #8
 80057ba:	605a      	str	r2, [r3, #4]
          break;
 80057bc:	e008      	b.n	80057d0 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0204 	orr.w	r2, r2, #4
 80057cc:	605a      	str	r2, [r3, #4]
          break;
 80057ce:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d107      	bne.n	80057e8 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0210 	orr.w	r2, r2, #16
 80057e6:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a52      	ldr	r2, [pc, #328]	; (8005938 <HAL_ADC_Start_IT+0x260>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d002      	beq.n	80057f8 <HAL_ADC_Start_IT+0x120>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	e001      	b.n	80057fc <HAL_ADC_Start_IT+0x124>
 80057f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	4293      	cmp	r3, r2
 8005802:	d008      	beq.n	8005816 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b05      	cmp	r3, #5
 800580e:	d002      	beq.n	8005816 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b09      	cmp	r3, #9
 8005814:	d13b      	bne.n	800588e <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d02d      	beq.n	8005880 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005828:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800582c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d110      	bne.n	800585e <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0220 	bic.w	r2, r2, #32
 800584a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800585a:	605a      	str	r2, [r3, #4]
              break;
 800585c:	e011      	b.n	8005882 <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0220 	orr.w	r2, r2, #32
 800587c:	605a      	str	r2, [r3, #4]
              break;
 800587e:	e000      	b.n	8005882 <HAL_ADC_Start_IT+0x1aa>
          }
        }
 8005880:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fd3a 	bl	8005300 <LL_ADC_REG_StartConversion>
 800588c:	e04d      	b.n	800592a <HAL_ADC_Start_IT+0x252>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005892:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a26      	ldr	r2, [pc, #152]	; (8005938 <HAL_ADC_Start_IT+0x260>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d002      	beq.n	80058aa <HAL_ADC_Start_IT+0x1d2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	e001      	b.n	80058ae <HAL_ADC_Start_IT+0x1d6>
 80058aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80058ae:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d035      	beq.n	8005928 <HAL_ADC_Start_IT+0x250>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d110      	bne.n	80058f6 <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0220 	bic.w	r2, r2, #32
 80058e2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f2:	605a      	str	r2, [r3, #4]
              break;
 80058f4:	e019      	b.n	800592a <HAL_ADC_Start_IT+0x252>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005904:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0220 	orr.w	r2, r2, #32
 8005914:	605a      	str	r2, [r3, #4]
              break;
 8005916:	e008      	b.n	800592a <HAL_ADC_Start_IT+0x252>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005920:	e003      	b.n	800592a <HAL_ADC_Start_IT+0x252>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005922:	2302      	movs	r3, #2
 8005924:	75fb      	strb	r3, [r7, #23]
 8005926:	e000      	b.n	800592a <HAL_ADC_Start_IT+0x252>
        }
 8005928:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	50000300 	.word	0x50000300
 8005938:	50000100 	.word	0x50000100

0800593c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_ADC_Stop_IT+0x16>
 800594e:	2302      	movs	r3, #2
 8005950:	e02b      	b.n	80059aa <HAL_ADC_Stop_IT+0x6e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800595a:	2103      	movs	r1, #3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fe53 	bl	8006608 <ADC_ConversionStop>
 8005962:	4603      	mov	r3, r0
 8005964:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d119      	bne.n	80059a0 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 021c 	bic.w	r2, r2, #28
 800597a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 ff61 	bl	8006844 <ADC_Disable>
 8005982:	4603      	mov	r3, r0
 8005984:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005990:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	f043 0201 	orr.w	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80059d4:	2300      	movs	r3, #0
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059e8:	4883      	ldr	r0, [pc, #524]	; (8005bf8 <HAL_ADC_IRQHandler+0x22c>)
 80059ea:	f7ff fbd1 	bl	8005190 <LL_ADC_GetMultimode>
 80059ee:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d017      	beq.n	8005a2a <HAL_ADC_IRQHandler+0x5e>
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d012      	beq.n	8005a2a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d105      	bne.n	8005a1c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a14:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 ffbe 	bl	800699e <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2202      	movs	r2, #2
 8005a28:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <HAL_ADC_IRQHandler+0x72>
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8085 	beq.w	8005b54 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d07f      	beq.n	8005b54 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff fae7 	bl	8005044 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d064      	beq.n	8005b46 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a5e      	ldr	r2, [pc, #376]	; (8005bfc <HAL_ADC_IRQHandler+0x230>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d002      	beq.n	8005a8c <HAL_ADC_IRQHandler+0xc0>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	e001      	b.n	8005a90 <HAL_ADC_IRQHandler+0xc4>
 8005a8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d008      	beq.n	8005aaa <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b05      	cmp	r3, #5
 8005aa2:	d002      	beq.n	8005aaa <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2b09      	cmp	r3, #9
 8005aa8:	d104      	bne.n	8005ab4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	623b      	str	r3, [r7, #32]
 8005ab2:	e00d      	b.n	8005ad0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a50      	ldr	r2, [pc, #320]	; (8005bfc <HAL_ADC_IRQHandler+0x230>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d002      	beq.n	8005ac4 <HAL_ADC_IRQHandler+0xf8>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	e001      	b.n	8005ac8 <HAL_ADC_IRQHandler+0xfc>
 8005ac4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005ac8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d135      	bne.n	8005b46 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d12e      	bne.n	8005b46 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fc2f 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d11a      	bne.n	8005b2e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 020c 	bic.w	r2, r2, #12
 8005b06:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d112      	bne.n	8005b46 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b24:	f043 0201 	orr.w	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b2c:	e00b      	b.n	8005b46 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b32:	f043 0210 	orr.w	r2, r3, #16
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3e:	f043 0201 	orr.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fb f9aa 	bl	8000ea0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	220c      	movs	r2, #12
 8005b52:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <HAL_ADC_IRQHandler+0x19c>
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10b      	bne.n	8005b80 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 809e 	beq.w	8005cb0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8098 	beq.w	8005cb0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d105      	bne.n	8005b98 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b90:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff fa90 	bl	80050c2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005ba2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fa4b 	bl	8005044 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005bae:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a11      	ldr	r2, [pc, #68]	; (8005bfc <HAL_ADC_IRQHandler+0x230>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d002      	beq.n	8005bc0 <HAL_ADC_IRQHandler+0x1f4>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	e001      	b.n	8005bc4 <HAL_ADC_IRQHandler+0x1f8>
 8005bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d008      	beq.n	8005bde <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b06      	cmp	r3, #6
 8005bd6:	d002      	beq.n	8005bde <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b07      	cmp	r3, #7
 8005bdc:	d104      	bne.n	8005be8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	623b      	str	r3, [r7, #32]
 8005be6:	e011      	b.n	8005c0c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a03      	ldr	r2, [pc, #12]	; (8005bfc <HAL_ADC_IRQHandler+0x230>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d006      	beq.n	8005c00 <HAL_ADC_IRQHandler+0x234>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	e005      	b.n	8005c04 <HAL_ADC_IRQHandler+0x238>
 8005bf8:	50000300 	.word	0x50000300
 8005bfc:	50000100 	.word	0x50000100
 8005c00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005c04:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d047      	beq.n	8005ca2 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <HAL_ADC_IRQHandler+0x260>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d03f      	beq.n	8005ca2 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d13a      	bne.n	8005ca2 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d133      	bne.n	8005ca2 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d12e      	bne.n	8005ca2 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff fba8 	bl	800539e <LL_ADC_INJ_IsConversionOngoing>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11a      	bne.n	8005c8a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c62:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d112      	bne.n	8005ca2 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c80:	f043 0201 	orr.w	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c88:	e00b      	b.n	8005ca2 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8e:	f043 0210 	orr.w	r2, r3, #16
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9a:	f043 0201 	orr.w	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fe53 	bl	800694e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2260      	movs	r2, #96	; 0x60
 8005cae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d011      	beq.n	8005cde <HAL_ADC_IRQHandler+0x312>
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00c      	beq.n	8005cde <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f895 	bl	8005e00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2280      	movs	r2, #128	; 0x80
 8005cdc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d012      	beq.n	8005d0e <HAL_ADC_IRQHandler+0x342>
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00d      	beq.n	8005d0e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fe39 	bl	8006976 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d012      	beq.n	8005d3e <HAL_ADC_IRQHandler+0x372>
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00d      	beq.n	8005d3e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fe2b 	bl	800698a <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d036      	beq.n	8005db6 <HAL_ADC_IRQHandler+0x3ea>
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d031      	beq.n	8005db6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5e:	e014      	b.n	8005d8a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d008      	beq.n	8005d78 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005d66:	4825      	ldr	r0, [pc, #148]	; (8005dfc <HAL_ADC_IRQHandler+0x430>)
 8005d68:	f7ff fa20 	bl	80051ac <LL_ADC_GetMultiDMATransfer>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8005d72:	2301      	movs	r3, #1
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
 8005d76:	e008      	b.n	8005d8a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8005d86:	2301      	movs	r3, #1
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d10e      	bne.n	8005dae <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da0:	f043 0202 	orr.w	r2, r3, #2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f833 	bl	8005e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2210      	movs	r2, #16
 8005db4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d018      	beq.n	8005df2 <HAL_ADC_IRQHandler+0x426>
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d013      	beq.n	8005df2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dce:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dda:	f043 0208 	orr.w	r2, r3, #8
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dea:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fdb8 	bl	8006962 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005df2:	bf00      	nop
 8005df4:	3728      	adds	r7, #40	; 0x28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	50000300 	.word	0x50000300

08005e00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b0b6      	sub	sp, #216	; 0xd8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_ADC_ConfigChannel+0x22>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e3c8      	b.n	80065dc <HAL_ADC_ConfigChannel+0x7b4>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff fa7a 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 83ad 	bne.w	80065be <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	6859      	ldr	r1, [r3, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	f7ff f8fa 	bl	800506a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fa68 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 8005e80:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff fa88 	bl	800539e <LL_ADC_INJ_IsConversionOngoing>
 8005e8e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 81d9 	bne.w	800624e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f040 81d4 	bne.w	800624e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eae:	d10f      	bne.n	8005ed0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4619      	mov	r1, r3
 8005ebc:	f7ff f914 	bl	80050e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff f8a8 	bl	800501e <LL_ADC_SetSamplingTimeCommonConfig>
 8005ece:	e00e      	b.n	8005eee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	6819      	ldr	r1, [r3, #0]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	461a      	mov	r2, r3
 8005ede:	f7ff f903 	bl	80050e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff f898 	bl	800501e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	08db      	lsrs	r3, r3, #3
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d022      	beq.n	8005f56 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6919      	ldr	r1, [r3, #16]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f20:	f7fe fff2 	bl	8004f08 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6818      	ldr	r0, [r3, #0]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6919      	ldr	r1, [r3, #16]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	461a      	mov	r2, r3
 8005f32:	f7ff f83e 	bl	8004fb2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6919      	ldr	r1, [r3, #16]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	7f1b      	ldrb	r3, [r3, #28]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d102      	bne.n	8005f4c <HAL_ADC_ConfigChannel+0x124>
 8005f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f4a:	e000      	b.n	8005f4e <HAL_ADC_ConfigChannel+0x126>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f7ff f84a 	bl	8004fe8 <LL_ADC_SetOffsetSaturation>
 8005f54:	e17b      	b.n	800624e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fe fff7 	bl	8004f50 <LL_ADC_GetOffsetChannel>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10a      	bne.n	8005f82 <HAL_ADC_ConfigChannel+0x15a>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe ffec 	bl	8004f50 <LL_ADC_GetOffsetChannel>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	0e9b      	lsrs	r3, r3, #26
 8005f7c:	f003 021f 	and.w	r2, r3, #31
 8005f80:	e01e      	b.n	8005fc0 <HAL_ADC_ConfigChannel+0x198>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2100      	movs	r1, #0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fe ffe1 	bl	8004f50 <LL_ADC_GetOffsetChannel>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f98:	fa93 f3a3 	rbit	r3, r3
 8005f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005fa0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005fa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	e004      	b.n	8005fbe <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8005fb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fb8:	fab3 f383 	clz	r3, r3
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <HAL_ADC_ConfigChannel+0x1b0>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	0e9b      	lsrs	r3, r3, #26
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	e018      	b.n	800600a <HAL_ADC_ConfigChannel+0x1e2>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fe4:	fa93 f3a3 	rbit	r3, r3
 8005fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005ff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8005ffc:	2320      	movs	r3, #32
 8005ffe:	e004      	b.n	800600a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006004:	fab3 f383 	clz	r3, r3
 8006008:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800600a:	429a      	cmp	r2, r3
 800600c:	d106      	bne.n	800601c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2200      	movs	r2, #0
 8006014:	2100      	movs	r1, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe ffb0 	bl	8004f7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2101      	movs	r1, #1
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe ff94 	bl	8004f50 <LL_ADC_GetOffsetChannel>
 8006028:	4603      	mov	r3, r0
 800602a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <HAL_ADC_ConfigChannel+0x220>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2101      	movs	r1, #1
 8006038:	4618      	mov	r0, r3
 800603a:	f7fe ff89 	bl	8004f50 <LL_ADC_GetOffsetChannel>
 800603e:	4603      	mov	r3, r0
 8006040:	0e9b      	lsrs	r3, r3, #26
 8006042:	f003 021f 	and.w	r2, r3, #31
 8006046:	e01e      	b.n	8006086 <HAL_ADC_ConfigChannel+0x25e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2101      	movs	r1, #1
 800604e:	4618      	mov	r0, r3
 8006050:	f7fe ff7e 	bl	8004f50 <LL_ADC_GetOffsetChannel>
 8006054:	4603      	mov	r3, r0
 8006056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800605e:	fa93 f3a3 	rbit	r3, r3
 8006062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800606a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800606e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006076:	2320      	movs	r3, #32
 8006078:	e004      	b.n	8006084 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800607a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800607e:	fab3 f383 	clz	r3, r3
 8006082:	b2db      	uxtb	r3, r3
 8006084:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <HAL_ADC_ConfigChannel+0x276>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	0e9b      	lsrs	r3, r3, #26
 8006098:	f003 031f 	and.w	r3, r3, #31
 800609c:	e018      	b.n	80060d0 <HAL_ADC_ConfigChannel+0x2a8>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060aa:	fa93 f3a3 	rbit	r3, r3
 80060ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80060b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80060ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80060c2:	2320      	movs	r3, #32
 80060c4:	e004      	b.n	80060d0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80060c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060ca:	fab3 f383 	clz	r3, r3
 80060ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d106      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2200      	movs	r2, #0
 80060da:	2101      	movs	r1, #1
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe ff4d 	bl	8004f7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2102      	movs	r1, #2
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fe ff31 	bl	8004f50 <LL_ADC_GetOffsetChannel>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <HAL_ADC_ConfigChannel+0x2e6>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2102      	movs	r1, #2
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fe ff26 	bl	8004f50 <LL_ADC_GetOffsetChannel>
 8006104:	4603      	mov	r3, r0
 8006106:	0e9b      	lsrs	r3, r3, #26
 8006108:	f003 021f 	and.w	r2, r3, #31
 800610c:	e01e      	b.n	800614c <HAL_ADC_ConfigChannel+0x324>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2102      	movs	r1, #2
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe ff1b 	bl	8004f50 <LL_ADC_GetOffsetChannel>
 800611a:	4603      	mov	r3, r0
 800611c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006120:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006124:	fa93 f3a3 	rbit	r3, r3
 8006128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800612c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006130:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006134:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800613c:	2320      	movs	r3, #32
 800613e:	e004      	b.n	800614a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8006140:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006144:	fab3 f383 	clz	r3, r3
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <HAL_ADC_ConfigChannel+0x33c>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	0e9b      	lsrs	r3, r3, #26
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	e016      	b.n	8006192 <HAL_ADC_ConfigChannel+0x36a>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006170:	fa93 f3a3 	rbit	r3, r3
 8006174:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006176:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800617c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006184:	2320      	movs	r3, #32
 8006186:	e004      	b.n	8006192 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8006188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800618c:	fab3 f383 	clz	r3, r3
 8006190:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006192:	429a      	cmp	r2, r3
 8006194:	d106      	bne.n	80061a4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2200      	movs	r2, #0
 800619c:	2102      	movs	r1, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe feec 	bl	8004f7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2103      	movs	r1, #3
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe fed0 	bl	8004f50 <LL_ADC_GetOffsetChannel>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <HAL_ADC_ConfigChannel+0x3a8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2103      	movs	r1, #3
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe fec5 	bl	8004f50 <LL_ADC_GetOffsetChannel>
 80061c6:	4603      	mov	r3, r0
 80061c8:	0e9b      	lsrs	r3, r3, #26
 80061ca:	f003 021f 	and.w	r2, r3, #31
 80061ce:	e017      	b.n	8006200 <HAL_ADC_ConfigChannel+0x3d8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2103      	movs	r1, #3
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fe feba 	bl	8004f50 <LL_ADC_GetOffsetChannel>
 80061dc:	4603      	mov	r3, r0
 80061de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e2:	fa93 f3a3 	rbit	r3, r3
 80061e6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80061e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80061ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80061f2:	2320      	movs	r3, #32
 80061f4:	e003      	b.n	80061fe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80061f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f8:	fab3 f383 	clz	r3, r3
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006208:	2b00      	cmp	r3, #0
 800620a:	d105      	bne.n	8006218 <HAL_ADC_ConfigChannel+0x3f0>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	0e9b      	lsrs	r3, r3, #26
 8006212:	f003 031f 	and.w	r3, r3, #31
 8006216:	e011      	b.n	800623c <HAL_ADC_ConfigChannel+0x414>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006220:	fa93 f3a3 	rbit	r3, r3
 8006224:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006228:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800622a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8006230:	2320      	movs	r3, #32
 8006232:	e003      	b.n	800623c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006236:	fab3 f383 	clz	r3, r3
 800623a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800623c:	429a      	cmp	r2, r3
 800623e:	d106      	bne.n	800624e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2200      	movs	r2, #0
 8006246:	2103      	movs	r1, #3
 8006248:	4618      	mov	r0, r3
 800624a:	f7fe fe97 	bl	8004f7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff f82e 	bl	80052b4 <LL_ADC_IsEnabled>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	f040 8140 	bne.w	80064e0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	6819      	ldr	r1, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	461a      	mov	r2, r3
 800626e:	f7fe ff67 	bl	8005140 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	4a8f      	ldr	r2, [pc, #572]	; (80064b4 <HAL_ADC_ConfigChannel+0x68c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	f040 8131 	bne.w	80064e0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10b      	bne.n	80062a6 <HAL_ADC_ConfigChannel+0x47e>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	0e9b      	lsrs	r3, r3, #26
 8006294:	3301      	adds	r3, #1
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	2b09      	cmp	r3, #9
 800629c:	bf94      	ite	ls
 800629e:	2301      	movls	r3, #1
 80062a0:	2300      	movhi	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	e019      	b.n	80062da <HAL_ADC_ConfigChannel+0x4b2>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062ae:	fa93 f3a3 	rbit	r3, r3
 80062b2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80062b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062b6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80062b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80062be:	2320      	movs	r3, #32
 80062c0:	e003      	b.n	80062ca <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80062c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c4:	fab3 f383 	clz	r3, r3
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	3301      	adds	r3, #1
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	2b09      	cmp	r3, #9
 80062d2:	bf94      	ite	ls
 80062d4:	2301      	movls	r3, #1
 80062d6:	2300      	movhi	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d079      	beq.n	80063d2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d107      	bne.n	80062fa <HAL_ADC_ConfigChannel+0x4d2>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	0e9b      	lsrs	r3, r3, #26
 80062f0:	3301      	adds	r3, #1
 80062f2:	069b      	lsls	r3, r3, #26
 80062f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062f8:	e015      	b.n	8006326 <HAL_ADC_ConfigChannel+0x4fe>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006302:	fa93 f3a3 	rbit	r3, r3
 8006306:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800630a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800630c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006312:	2320      	movs	r3, #32
 8006314:	e003      	b.n	800631e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006318:	fab3 f383 	clz	r3, r3
 800631c:	b2db      	uxtb	r3, r3
 800631e:	3301      	adds	r3, #1
 8006320:	069b      	lsls	r3, r3, #26
 8006322:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800632e:	2b00      	cmp	r3, #0
 8006330:	d109      	bne.n	8006346 <HAL_ADC_ConfigChannel+0x51e>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	0e9b      	lsrs	r3, r3, #26
 8006338:	3301      	adds	r3, #1
 800633a:	f003 031f 	and.w	r3, r3, #31
 800633e:	2101      	movs	r1, #1
 8006340:	fa01 f303 	lsl.w	r3, r1, r3
 8006344:	e017      	b.n	8006376 <HAL_ADC_ConfigChannel+0x54e>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800634e:	fa93 f3a3 	rbit	r3, r3
 8006352:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006356:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800635e:	2320      	movs	r3, #32
 8006360:	e003      	b.n	800636a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8006362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006364:	fab3 f383 	clz	r3, r3
 8006368:	b2db      	uxtb	r3, r3
 800636a:	3301      	adds	r3, #1
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2101      	movs	r1, #1
 8006372:	fa01 f303 	lsl.w	r3, r1, r3
 8006376:	ea42 0103 	orr.w	r1, r2, r3
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10a      	bne.n	800639c <HAL_ADC_ConfigChannel+0x574>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	0e9b      	lsrs	r3, r3, #26
 800638c:	3301      	adds	r3, #1
 800638e:	f003 021f 	and.w	r2, r3, #31
 8006392:	4613      	mov	r3, r2
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	4413      	add	r3, r2
 8006398:	051b      	lsls	r3, r3, #20
 800639a:	e018      	b.n	80063ce <HAL_ADC_ConfigChannel+0x5a6>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	fa93 f3a3 	rbit	r3, r3
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80063aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80063ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80063b4:	2320      	movs	r3, #32
 80063b6:	e003      	b.n	80063c0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80063b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ba:	fab3 f383 	clz	r3, r3
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	3301      	adds	r3, #1
 80063c2:	f003 021f 	and.w	r2, r3, #31
 80063c6:	4613      	mov	r3, r2
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4413      	add	r3, r2
 80063cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063ce:	430b      	orrs	r3, r1
 80063d0:	e081      	b.n	80064d6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d107      	bne.n	80063ee <HAL_ADC_ConfigChannel+0x5c6>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	0e9b      	lsrs	r3, r3, #26
 80063e4:	3301      	adds	r3, #1
 80063e6:	069b      	lsls	r3, r3, #26
 80063e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063ec:	e015      	b.n	800641a <HAL_ADC_ConfigChannel+0x5f2>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	fa93 f3a3 	rbit	r3, r3
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006406:	2320      	movs	r3, #32
 8006408:	e003      	b.n	8006412 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	fab3 f383 	clz	r3, r3
 8006410:	b2db      	uxtb	r3, r3
 8006412:	3301      	adds	r3, #1
 8006414:	069b      	lsls	r3, r3, #26
 8006416:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <HAL_ADC_ConfigChannel+0x612>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	0e9b      	lsrs	r3, r3, #26
 800642c:	3301      	adds	r3, #1
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	2101      	movs	r1, #1
 8006434:	fa01 f303 	lsl.w	r3, r1, r3
 8006438:	e017      	b.n	800646a <HAL_ADC_ConfigChannel+0x642>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	fa93 f3a3 	rbit	r3, r3
 8006446:	61fb      	str	r3, [r7, #28]
  return result;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006452:	2320      	movs	r3, #32
 8006454:	e003      	b.n	800645e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	fab3 f383 	clz	r3, r3
 800645c:	b2db      	uxtb	r3, r3
 800645e:	3301      	adds	r3, #1
 8006460:	f003 031f 	and.w	r3, r3, #31
 8006464:	2101      	movs	r1, #1
 8006466:	fa01 f303 	lsl.w	r3, r1, r3
 800646a:	ea42 0103 	orr.w	r1, r2, r3
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10d      	bne.n	8006496 <HAL_ADC_ConfigChannel+0x66e>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	0e9b      	lsrs	r3, r3, #26
 8006480:	3301      	adds	r3, #1
 8006482:	f003 021f 	and.w	r2, r3, #31
 8006486:	4613      	mov	r3, r2
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	4413      	add	r3, r2
 800648c:	3b1e      	subs	r3, #30
 800648e:	051b      	lsls	r3, r3, #20
 8006490:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006494:	e01e      	b.n	80064d4 <HAL_ADC_ConfigChannel+0x6ac>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	fa93 f3a3 	rbit	r3, r3
 80064a2:	613b      	str	r3, [r7, #16]
  return result;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d104      	bne.n	80064b8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80064ae:	2320      	movs	r3, #32
 80064b0:	e006      	b.n	80064c0 <HAL_ADC_ConfigChannel+0x698>
 80064b2:	bf00      	nop
 80064b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	fab3 f383 	clz	r3, r3
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	3301      	adds	r3, #1
 80064c2:	f003 021f 	and.w	r2, r3, #31
 80064c6:	4613      	mov	r3, r2
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	4413      	add	r3, r2
 80064cc:	3b1e      	subs	r3, #30
 80064ce:	051b      	lsls	r3, r3, #20
 80064d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064d4:	430b      	orrs	r3, r1
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	6892      	ldr	r2, [r2, #8]
 80064da:	4619      	mov	r1, r3
 80064dc:	f7fe fe04 	bl	80050e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	4b3f      	ldr	r3, [pc, #252]	; (80065e4 <HAL_ADC_ConfigChannel+0x7bc>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d071      	beq.n	80065d0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064ec:	483e      	ldr	r0, [pc, #248]	; (80065e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80064ee:	f7fe fcfd 	bl	8004eec <LL_ADC_GetCommonPathInternalCh>
 80064f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a3c      	ldr	r2, [pc, #240]	; (80065ec <HAL_ADC_ConfigChannel+0x7c4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_ADC_ConfigChannel+0x6e2>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a3a      	ldr	r2, [pc, #232]	; (80065f0 <HAL_ADC_ConfigChannel+0x7c8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d127      	bne.n	800655a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800650a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800650e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d121      	bne.n	800655a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800651e:	d157      	bne.n	80065d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006528:	4619      	mov	r1, r3
 800652a:	482f      	ldr	r0, [pc, #188]	; (80065e8 <HAL_ADC_ConfigChannel+0x7c0>)
 800652c:	f7fe fccb 	bl	8004ec6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006530:	4b30      	ldr	r3, [pc, #192]	; (80065f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	099b      	lsrs	r3, r3, #6
 8006536:	4a30      	ldr	r2, [pc, #192]	; (80065f8 <HAL_ADC_ConfigChannel+0x7d0>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	099b      	lsrs	r3, r3, #6
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	4613      	mov	r3, r2
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800654a:	e002      	b.n	8006552 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3b01      	subs	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1f9      	bne.n	800654c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006558:	e03a      	b.n	80065d0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a27      	ldr	r2, [pc, #156]	; (80065fc <HAL_ADC_ConfigChannel+0x7d4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d113      	bne.n	800658c <HAL_ADC_ConfigChannel+0x764>
 8006564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10d      	bne.n	800658c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a22      	ldr	r2, [pc, #136]	; (8006600 <HAL_ADC_ConfigChannel+0x7d8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d02a      	beq.n	80065d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800657a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800657e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006582:	4619      	mov	r1, r3
 8006584:	4818      	ldr	r0, [pc, #96]	; (80065e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8006586:	f7fe fc9e 	bl	8004ec6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800658a:	e021      	b.n	80065d0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1c      	ldr	r2, [pc, #112]	; (8006604 <HAL_ADC_ConfigChannel+0x7dc>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d11c      	bne.n	80065d0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800659a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d116      	bne.n	80065d0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a16      	ldr	r2, [pc, #88]	; (8006600 <HAL_ADC_ConfigChannel+0x7d8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d011      	beq.n	80065d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065b4:	4619      	mov	r1, r3
 80065b6:	480c      	ldr	r0, [pc, #48]	; (80065e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80065b8:	f7fe fc85 	bl	8004ec6 <LL_ADC_SetCommonPathInternalCh>
 80065bc:	e008      	b.n	80065d0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c2:	f043 0220 	orr.w	r2, r3, #32
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80065d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80065dc:	4618      	mov	r0, r3
 80065de:	37d8      	adds	r7, #216	; 0xd8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	80080000 	.word	0x80080000
 80065e8:	50000300 	.word	0x50000300
 80065ec:	c3210000 	.word	0xc3210000
 80065f0:	90c00010 	.word	0x90c00010
 80065f4:	2000013c 	.word	0x2000013c
 80065f8:	053e2d63 	.word	0x053e2d63
 80065fc:	c7520000 	.word	0xc7520000
 8006600:	50000100 	.word	0x50000100
 8006604:	cb840000 	.word	0xcb840000

08006608 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006612:	2300      	movs	r3, #0
 8006614:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe fe96 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 8006624:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe feb7 	bl	800539e <LL_ADC_INJ_IsConversionOngoing>
 8006630:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d103      	bne.n	8006640 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 8098 	beq.w	8006770 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d02a      	beq.n	80066a4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	7f5b      	ldrb	r3, [r3, #29]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d126      	bne.n	80066a4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	7f1b      	ldrb	r3, [r3, #28]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d122      	bne.n	80066a4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800665e:	2301      	movs	r3, #1
 8006660:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006662:	e014      	b.n	800668e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	4a45      	ldr	r2, [pc, #276]	; (800677c <ADC_ConversionStop+0x174>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d90d      	bls.n	8006688 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006670:	f043 0210 	orr.w	r2, r3, #16
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667c:	f043 0201 	orr.w	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e074      	b.n	8006772 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	3301      	adds	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006698:	2b40      	cmp	r3, #64	; 0x40
 800669a:	d1e3      	bne.n	8006664 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2240      	movs	r2, #64	; 0x40
 80066a2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d014      	beq.n	80066d4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe fe4e 	bl	8005350 <LL_ADC_REG_IsConversionOngoing>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00c      	beq.n	80066d4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fe fe0b 	bl	80052da <LL_ADC_IsDisableOngoing>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d104      	bne.n	80066d4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fe fe2a 	bl	8005328 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d014      	beq.n	8006704 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe fe5d 	bl	800539e <LL_ADC_INJ_IsConversionOngoing>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00c      	beq.n	8006704 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fe fdf3 	bl	80052da <LL_ADC_IsDisableOngoing>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fe fe39 	bl	8005376 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d005      	beq.n	8006716 <ADC_ConversionStop+0x10e>
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d105      	bne.n	800671c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006710:	230c      	movs	r3, #12
 8006712:	617b      	str	r3, [r7, #20]
        break;
 8006714:	e005      	b.n	8006722 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006716:	2308      	movs	r3, #8
 8006718:	617b      	str	r3, [r7, #20]
        break;
 800671a:	e002      	b.n	8006722 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800671c:	2304      	movs	r3, #4
 800671e:	617b      	str	r3, [r7, #20]
        break;
 8006720:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006722:	f7fe fb8f 	bl	8004e44 <HAL_GetTick>
 8006726:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006728:	e01b      	b.n	8006762 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800672a:	f7fe fb8b 	bl	8004e44 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b05      	cmp	r3, #5
 8006736:	d914      	bls.n	8006762 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	4013      	ands	r3, r2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00d      	beq.n	8006762 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674a:	f043 0210 	orr.w	r2, r3, #16
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006756:	f043 0201 	orr.w	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e007      	b.n	8006772 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	4013      	ands	r3, r2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1dc      	bne.n	800672a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3720      	adds	r7, #32
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	a33fffff 	.word	0xa33fffff

08006780 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fd91 	bl	80052b4 <LL_ADC_IsEnabled>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d14d      	bne.n	8006834 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	4b28      	ldr	r3, [pc, #160]	; (8006840 <ADC_Enable+0xc0>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00d      	beq.n	80067c2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067aa:	f043 0210 	orr.w	r2, r3, #16
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b6:	f043 0201 	orr.w	r2, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e039      	b.n	8006836 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe fd4c 	bl	8005264 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80067cc:	f7fe fb3a 	bl	8004e44 <HAL_GetTick>
 80067d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067d2:	e028      	b.n	8006826 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fe fd6b 	bl	80052b4 <LL_ADC_IsEnabled>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d104      	bne.n	80067ee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fe fd3b 	bl	8005264 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80067ee:	f7fe fb29 	bl	8004e44 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d914      	bls.n	8006826 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b01      	cmp	r3, #1
 8006808:	d00d      	beq.n	8006826 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680e:	f043 0210 	orr.w	r2, r3, #16
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800681a:	f043 0201 	orr.w	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e007      	b.n	8006836 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b01      	cmp	r3, #1
 8006832:	d1cf      	bne.n	80067d4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	8000003f 	.word	0x8000003f

08006844 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe fd42 	bl	80052da <LL_ADC_IsDisableOngoing>
 8006856:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f7fe fd29 	bl	80052b4 <LL_ADC_IsEnabled>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d047      	beq.n	80068f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d144      	bne.n	80068f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 030d 	and.w	r3, r3, #13
 8006878:	2b01      	cmp	r3, #1
 800687a:	d10c      	bne.n	8006896 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f7fe fd03 	bl	800528c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2203      	movs	r2, #3
 800688c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800688e:	f7fe fad9 	bl	8004e44 <HAL_GetTick>
 8006892:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006894:	e029      	b.n	80068ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800689a:	f043 0210 	orr.w	r2, r3, #16
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a6:	f043 0201 	orr.w	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e023      	b.n	80068fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80068b2:	f7fe fac7 	bl	8004e44 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d914      	bls.n	80068ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00d      	beq.n	80068ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d2:	f043 0210 	orr.w	r2, r3, #16
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068de:	f043 0201 	orr.w	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e007      	b.n	80068fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1dc      	bne.n	80068b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <LL_ADC_IsEnabled>:
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <LL_ADC_IsEnabled+0x18>
 8006916:	2301      	movs	r3, #1
 8006918:	e000      	b.n	800691c <LL_ADC_IsEnabled+0x1a>
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <LL_ADC_REG_IsConversionOngoing>:
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b04      	cmp	r3, #4
 800693a:	d101      	bne.n	8006940 <LL_ADC_REG_IsConversionOngoing+0x18>
 800693c:	2301      	movs	r3, #1
 800693e:	e000      	b.n	8006942 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80069b4:	b590      	push	{r4, r7, lr}
 80069b6:	b0a1      	sub	sp, #132	; 0x84
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e08b      	b.n	8006aea <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80069da:	2300      	movs	r3, #0
 80069dc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80069de:	2300      	movs	r3, #0
 80069e0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069ea:	d102      	bne.n	80069f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80069ec:	4b41      	ldr	r3, [pc, #260]	; (8006af4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80069ee:	60bb      	str	r3, [r7, #8]
 80069f0:	e001      	b.n	80069f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80069f2:	2300      	movs	r3, #0
 80069f4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10b      	bne.n	8006a14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a00:	f043 0220 	orr.w	r2, r3, #32
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e06a      	b.n	8006aea <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff ff86 	bl	8006928 <LL_ADC_REG_IsConversionOngoing>
 8006a1c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff ff80 	bl	8006928 <LL_ADC_REG_IsConversionOngoing>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d14c      	bne.n	8006ac8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d149      	bne.n	8006ac8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a34:	4b30      	ldr	r3, [pc, #192]	; (8006af8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006a36:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d028      	beq.n	8006a92 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	6859      	ldr	r1, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a52:	035b      	lsls	r3, r3, #13
 8006a54:	430b      	orrs	r3, r1
 8006a56:	431a      	orrs	r2, r3
 8006a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006a60:	f7ff ff4f 	bl	8006902 <LL_ADC_IsEnabled>
 8006a64:	4604      	mov	r4, r0
 8006a66:	4823      	ldr	r0, [pc, #140]	; (8006af4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006a68:	f7ff ff4b 	bl	8006902 <LL_ADC_IsEnabled>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	4323      	orrs	r3, r4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d133      	bne.n	8006adc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006a7c:	f023 030f 	bic.w	r3, r3, #15
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	6811      	ldr	r1, [r2, #0]
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	6892      	ldr	r2, [r2, #8]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a8e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a90:	e024      	b.n	8006adc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a9c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a9e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006aa2:	f7ff ff2e 	bl	8006902 <LL_ADC_IsEnabled>
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	4812      	ldr	r0, [pc, #72]	; (8006af4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006aaa:	f7ff ff2a 	bl	8006902 <LL_ADC_IsEnabled>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	4323      	orrs	r3, r4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d112      	bne.n	8006adc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006abe:	f023 030f 	bic.w	r3, r3, #15
 8006ac2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006ac4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ac6:	e009      	b.n	8006adc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006acc:	f043 0220 	orr.w	r2, r3, #32
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006ada:	e000      	b.n	8006ade <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006adc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006ae6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3784      	adds	r7, #132	; 0x84
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd90      	pop	{r4, r7, pc}
 8006af2:	bf00      	nop
 8006af4:	50000100 	.word	0x50000100
 8006af8:	50000300 	.word	0x50000300

08006afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b0c:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <__NVIC_SetPriorityGrouping+0x44>)
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b18:	4013      	ands	r3, r2
 8006b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b2e:	4a04      	ldr	r2, [pc, #16]	; (8006b40 <__NVIC_SetPriorityGrouping+0x44>)
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	60d3      	str	r3, [r2, #12]
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	e000ed00 	.word	0xe000ed00

08006b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b48:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <__NVIC_GetPriorityGrouping+0x18>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	0a1b      	lsrs	r3, r3, #8
 8006b4e:	f003 0307 	and.w	r3, r3, #7
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	e000ed00 	.word	0xe000ed00

08006b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	4603      	mov	r3, r0
 8006b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	db0b      	blt.n	8006b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b72:	79fb      	ldrb	r3, [r7, #7]
 8006b74:	f003 021f 	and.w	r2, r3, #31
 8006b78:	4907      	ldr	r1, [pc, #28]	; (8006b98 <__NVIC_EnableIRQ+0x38>)
 8006b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	2001      	movs	r0, #1
 8006b82:	fa00 f202 	lsl.w	r2, r0, r2
 8006b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	e000e100 	.word	0xe000e100

08006b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	6039      	str	r1, [r7, #0]
 8006ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	db0a      	blt.n	8006bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	490c      	ldr	r1, [pc, #48]	; (8006be8 <__NVIC_SetPriority+0x4c>)
 8006bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bba:	0112      	lsls	r2, r2, #4
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006bc4:	e00a      	b.n	8006bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	4908      	ldr	r1, [pc, #32]	; (8006bec <__NVIC_SetPriority+0x50>)
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	3b04      	subs	r3, #4
 8006bd4:	0112      	lsls	r2, r2, #4
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	440b      	add	r3, r1
 8006bda:	761a      	strb	r2, [r3, #24]
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	e000e100 	.word	0xe000e100
 8006bec:	e000ed00 	.word	0xe000ed00

08006bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b089      	sub	sp, #36	; 0x24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f1c3 0307 	rsb	r3, r3, #7
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	bf28      	it	cs
 8006c0e:	2304      	movcs	r3, #4
 8006c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	3304      	adds	r3, #4
 8006c16:	2b06      	cmp	r3, #6
 8006c18:	d902      	bls.n	8006c20 <NVIC_EncodePriority+0x30>
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	3b03      	subs	r3, #3
 8006c1e:	e000      	b.n	8006c22 <NVIC_EncodePriority+0x32>
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c24:	f04f 32ff 	mov.w	r2, #4294967295
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2e:	43da      	mvns	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	401a      	ands	r2, r3
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c38:	f04f 31ff 	mov.w	r1, #4294967295
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c42:	43d9      	mvns	r1, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c48:	4313      	orrs	r3, r2
         );
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3724      	adds	r7, #36	; 0x24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
	...

08006c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c68:	d301      	bcc.n	8006c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e00f      	b.n	8006c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <SysTick_Config+0x40>)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c76:	210f      	movs	r1, #15
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7c:	f7ff ff8e 	bl	8006b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c80:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <SysTick_Config+0x40>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c86:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <SysTick_Config+0x40>)
 8006c88:	2207      	movs	r2, #7
 8006c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	e000e010 	.word	0xe000e010

08006c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff ff29 	bl	8006afc <__NVIC_SetPriorityGrouping>
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b086      	sub	sp, #24
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	4603      	mov	r3, r0
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
 8006cbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006cc0:	f7ff ff40 	bl	8006b44 <__NVIC_GetPriorityGrouping>
 8006cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	68b9      	ldr	r1, [r7, #8]
 8006cca:	6978      	ldr	r0, [r7, #20]
 8006ccc:	f7ff ff90 	bl	8006bf0 <NVIC_EncodePriority>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff ff5f 	bl	8006b9c <__NVIC_SetPriority>
}
 8006cde:	bf00      	nop
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	4603      	mov	r3, r0
 8006cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff ff33 	bl	8006b60 <__NVIC_EnableIRQ>
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff ffa4 	bl	8006c58 <SysTick_Config>
 8006d10:	4603      	mov	r3, r0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006d1e:	f7fa f8d9 	bl	8000ed4 <HAL_SYSTICK_Callback>
}
 8006d22:	bf00      	nop
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e014      	b.n	8006d62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	791b      	ldrb	r3, [r3, #4]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d105      	bne.n	8006d4e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fc f9d5 	bl	80030f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	; 0x28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	795b      	ldrb	r3, [r3, #5]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_DAC_ConfigChannel+0x18>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e192      	b.n	80070aa <HAL_DAC_ConfigChannel+0x33e>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d174      	bne.n	8006e82 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006d98:	f7fe f854 	bl	8004e44 <HAL_GetTick>
 8006d9c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d134      	bne.n	8006e0e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006da4:	e011      	b.n	8006dca <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006da6:	f7fe f84d 	bl	8004e44 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d90a      	bls.n	8006dca <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f043 0208 	orr.w	r2, r3, #8
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e16f      	b.n	80070aa <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e6      	bne.n	8006da6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8006dd8:	2001      	movs	r0, #1
 8006dda:	f7fe f83f 	bl	8004e5c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40
 8006de8:	e01e      	b.n	8006e28 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006dea:	f7fe f82b 	bl	8004e44 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d90a      	bls.n	8006e0e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f043 0208 	orr.w	r2, r3, #8
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2203      	movs	r2, #3
 8006e08:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e14d      	b.n	80070aa <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	dbe8      	blt.n	8006dea <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8006e18:	2001      	movs	r0, #1
 8006e1a:	f7fe f81f 	bl	8004e5c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e26:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006e38:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	ea02 0103 	and.w	r1, r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	409a      	lsls	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	21ff      	movs	r1, #255	; 0xff
 8006e64:	fa01 f303 	lsl.w	r3, r1, r3
 8006e68:	43db      	mvns	r3, r3
 8006e6a:	ea02 0103 	and.w	r1, r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	409a      	lsls	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d11d      	bne.n	8006ec6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	221f      	movs	r2, #31
 8006e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9e:	43db      	mvns	r3, r3
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f003 0310 	and.w	r3, r3, #16
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2207      	movs	r2, #7
 8006ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eda:	43db      	mvns	r3, r3
 8006edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ede:	4013      	ands	r3, r2
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d102      	bne.n	8006ef0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	623b      	str	r3, [r7, #32]
 8006eee:	e00f      	b.n	8006f10 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d102      	bne.n	8006efe <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	623b      	str	r3, [r7, #32]
 8006efc:	e008      	b.n	8006f10 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d102      	bne.n	8006f0c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006f06:	2301      	movs	r3, #1
 8006f08:	623b      	str	r3, [r7, #32]
 8006f0a:	e001      	b.n	8006f10 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	6a3a      	ldr	r2, [r7, #32]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2e:	43db      	mvns	r3, r3
 8006f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f32:	4013      	ands	r3, r2
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	791b      	ldrb	r3, [r3, #4]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d102      	bne.n	8006f44 <HAL_DAC_ConfigChannel+0x1d8>
 8006f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f42:	e000      	b.n	8006f46 <HAL_DAC_ConfigChannel+0x1da>
 8006f44:	2300      	movs	r3, #0
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f003 0310 	and.w	r3, r3, #16
 8006f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f56:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5a:	43db      	mvns	r3, r3
 8006f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f5e:	4013      	ands	r3, r2
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	795b      	ldrb	r3, [r3, #5]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d102      	bne.n	8006f70 <HAL_DAC_ConfigChannel+0x204>
 8006f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f6e:	e000      	b.n	8006f72 <HAL_DAC_ConfigChannel+0x206>
 8006f70:	2300      	movs	r3, #0
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d114      	bne.n	8006fb2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006f88:	f001 fac0 	bl	800850c <HAL_RCC_GetHCLKFreq>
 8006f8c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	4a48      	ldr	r2, [pc, #288]	; (80070b4 <HAL_DAC_ConfigChannel+0x348>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d904      	bls.n	8006fa0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9e:	e00f      	b.n	8006fc0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	4a45      	ldr	r2, [pc, #276]	; (80070b8 <HAL_DAC_ConfigChannel+0x34c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d90a      	bls.n	8006fbe <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb0:	e006      	b.n	8006fc0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	627b      	str	r3, [r7, #36]	; 0x24
 8006fbc:	e000      	b.n	8006fc0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006fbe:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6819      	ldr	r1, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006fea:	fa02 f303 	lsl.w	r3, r2, r3
 8006fee:	43da      	mvns	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	400a      	ands	r2, r1
 8006ff6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f003 0310 	and.w	r3, r3, #16
 8007006:	f640 72fe 	movw	r2, #4094	; 0xffe
 800700a:	fa02 f303 	lsl.w	r3, r2, r3
 800700e:	43db      	mvns	r3, r3
 8007010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007012:	4013      	ands	r3, r2
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f003 0310 	and.w	r3, r3, #16
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	fa02 f303 	lsl.w	r3, r2, r3
 8007028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702a:	4313      	orrs	r3, r2
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007034:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6819      	ldr	r1, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	22c0      	movs	r2, #192	; 0xc0
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	43da      	mvns	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	400a      	ands	r2, r1
 8007050:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	089b      	lsrs	r3, r3, #2
 8007058:	f003 030f 	and.w	r3, r3, #15
 800705c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	089b      	lsrs	r3, r3, #2
 8007064:	021b      	lsls	r3, r3, #8
 8007066:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	4313      	orrs	r3, r2
 800706e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8007080:	fa01 f303 	lsl.w	r3, r1, r3
 8007084:	43db      	mvns	r3, r3
 8007086:	ea02 0103 	and.w	r1, r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	409a      	lsls	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3728      	adds	r7, #40	; 0x28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	09896800 	.word	0x09896800
 80070b8:	04c4b400 	.word	0x04c4b400

080070bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e08d      	b.n	80071ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	4b47      	ldr	r3, [pc, #284]	; (80071f4 <HAL_DMA_Init+0x138>)
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d80f      	bhi.n	80070fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	4b45      	ldr	r3, [pc, #276]	; (80071f8 <HAL_DMA_Init+0x13c>)
 80070e2:	4413      	add	r3, r2
 80070e4:	4a45      	ldr	r2, [pc, #276]	; (80071fc <HAL_DMA_Init+0x140>)
 80070e6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ea:	091b      	lsrs	r3, r3, #4
 80070ec:	009a      	lsls	r2, r3, #2
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a42      	ldr	r2, [pc, #264]	; (8007200 <HAL_DMA_Init+0x144>)
 80070f6:	641a      	str	r2, [r3, #64]	; 0x40
 80070f8:	e00e      	b.n	8007118 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	4b40      	ldr	r3, [pc, #256]	; (8007204 <HAL_DMA_Init+0x148>)
 8007102:	4413      	add	r3, r2
 8007104:	4a3d      	ldr	r2, [pc, #244]	; (80071fc <HAL_DMA_Init+0x140>)
 8007106:	fba2 2303 	umull	r2, r3, r2, r3
 800710a:	091b      	lsrs	r3, r3, #4
 800710c:	009a      	lsls	r2, r3, #2
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a3c      	ldr	r2, [pc, #240]	; (8007208 <HAL_DMA_Init+0x14c>)
 8007116:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800712e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007132:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800713c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f8fe 	bl	800736c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007178:	d102      	bne.n	8007180 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007194:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d010      	beq.n	80071c0 <HAL_DMA_Init+0x104>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d80c      	bhi.n	80071c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f91e 	bl	80073e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	e008      	b.n	80071d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	40020407 	.word	0x40020407
 80071f8:	bffdfff8 	.word	0xbffdfff8
 80071fc:	cccccccd 	.word	0xcccccccd
 8007200:	40020000 	.word	0x40020000
 8007204:	bffdfbf8 	.word	0xbffdfbf8
 8007208:	40020400 	.word	0x40020400

0800720c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007228:	f003 031f 	and.w	r3, r3, #31
 800722c:	2204      	movs	r2, #4
 800722e:	409a      	lsls	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4013      	ands	r3, r2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d026      	beq.n	8007286 <HAL_DMA_IRQHandler+0x7a>
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b00      	cmp	r3, #0
 8007240:	d021      	beq.n	8007286 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d107      	bne.n	8007260 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0204 	bic.w	r2, r2, #4
 800725e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007264:	f003 021f 	and.w	r2, r3, #31
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726c:	2104      	movs	r1, #4
 800726e:	fa01 f202 	lsl.w	r2, r1, r2
 8007272:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007278:	2b00      	cmp	r3, #0
 800727a:	d071      	beq.n	8007360 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007284:	e06c      	b.n	8007360 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728a:	f003 031f 	and.w	r3, r3, #31
 800728e:	2202      	movs	r2, #2
 8007290:	409a      	lsls	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4013      	ands	r3, r2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d02e      	beq.n	80072f8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d029      	beq.n	80072f8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10b      	bne.n	80072ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 020a 	bic.w	r2, r2, #10
 80072c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ce:	f003 021f 	and.w	r2, r3, #31
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	2102      	movs	r1, #2
 80072d8:	fa01 f202 	lsl.w	r2, r1, r2
 80072dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d038      	beq.n	8007360 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80072f6:	e033      	b.n	8007360 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	2208      	movs	r2, #8
 8007302:	409a      	lsls	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4013      	ands	r3, r2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d02a      	beq.n	8007362 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d025      	beq.n	8007362 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 020e 	bic.w	r2, r2, #14
 8007324:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732a:	f003 021f 	and.w	r2, r3, #31
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	2101      	movs	r1, #1
 8007334:	fa01 f202 	lsl.w	r2, r1, r2
 8007338:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007354:	2b00      	cmp	r3, #0
 8007356:	d004      	beq.n	8007362 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007360:	bf00      	nop
 8007362:	bf00      	nop
}
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	4b16      	ldr	r3, [pc, #88]	; (80073d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800737c:	429a      	cmp	r2, r3
 800737e:	d802      	bhi.n	8007386 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007380:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	e001      	b.n	800738a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8007386:	4b15      	ldr	r3, [pc, #84]	; (80073dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007388:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	b2db      	uxtb	r3, r3
 8007394:	3b08      	subs	r3, #8
 8007396:	4a12      	ldr	r2, [pc, #72]	; (80073e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007398:	fba2 2303 	umull	r2, r3, r2, r3
 800739c:	091b      	lsrs	r3, r3, #4
 800739e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a4:	089b      	lsrs	r3, r3, #2
 80073a6:	009a      	lsls	r2, r3, #2
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	4413      	add	r3, r2
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a0b      	ldr	r2, [pc, #44]	; (80073e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80073b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	2201      	movs	r2, #1
 80073c0:	409a      	lsls	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80073c6:	bf00      	nop
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	40020407 	.word	0x40020407
 80073d8:	40020800 	.word	0x40020800
 80073dc:	40020820 	.word	0x40020820
 80073e0:	cccccccd 	.word	0xcccccccd
 80073e4:	40020880 	.word	0x40020880

080073e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4b0b      	ldr	r3, [pc, #44]	; (8007428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	461a      	mov	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a08      	ldr	r2, [pc, #32]	; (800742c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800740a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3b01      	subs	r3, #1
 8007410:	f003 031f 	and.w	r3, r3, #31
 8007414:	2201      	movs	r2, #1
 8007416:	409a      	lsls	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800741c:	bf00      	nop
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	1000823f 	.word	0x1000823f
 800742c:	40020940 	.word	0x40020940

08007430 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b01      	cmp	r3, #1
 8007444:	d12b      	bne.n	800749e <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800744c:	2b01      	cmp	r3, #1
 800744e:	d101      	bne.n	8007454 <HAL_DMAEx_ConfigMuxSync+0x24>
 8007450:	2302      	movs	r3, #2
 8007452:	e025      	b.n	80074a0 <HAL_DMAEx_ConfigMuxSync+0x70>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	b2d9      	uxtb	r1, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	061a      	lsls	r2, r3, #24
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	3b01      	subs	r3, #1
 8007470:	04db      	lsls	r3, r3, #19
 8007472:	431a      	orrs	r2, r3
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	431a      	orrs	r2, r3
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	7a1b      	ldrb	r3, [r3, #8]
 800747e:	041b      	lsls	r3, r3, #16
 8007480:	431a      	orrs	r2, r3
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	7a5b      	ldrb	r3, [r3, #9]
 8007486:	025b      	lsls	r3, r3, #9
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800748e:	430a      	orrs	r2, r1
 8007490:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	e000      	b.n	80074a0 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
  }
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80074ba:	e15a      	b.n	8007772 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	2101      	movs	r1, #1
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	fa01 f303 	lsl.w	r3, r1, r3
 80074c8:	4013      	ands	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 814c 	beq.w	800776c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f003 0303 	and.w	r3, r3, #3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d005      	beq.n	80074ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d130      	bne.n	800754e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	2203      	movs	r2, #3
 80074f8:	fa02 f303 	lsl.w	r3, r2, r3
 80074fc:	43db      	mvns	r3, r3
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	4013      	ands	r3, r2
 8007502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	fa02 f303 	lsl.w	r3, r2, r3
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007522:	2201      	movs	r2, #1
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	fa02 f303 	lsl.w	r3, r2, r3
 800752a:	43db      	mvns	r3, r3
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	4013      	ands	r3, r2
 8007530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	091b      	lsrs	r3, r3, #4
 8007538:	f003 0201 	and.w	r2, r3, #1
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	fa02 f303 	lsl.w	r3, r2, r3
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	4313      	orrs	r3, r2
 8007546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f003 0303 	and.w	r3, r3, #3
 8007556:	2b03      	cmp	r3, #3
 8007558:	d017      	beq.n	800758a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	2203      	movs	r2, #3
 8007566:	fa02 f303 	lsl.w	r3, r2, r3
 800756a:	43db      	mvns	r3, r3
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	4013      	ands	r3, r2
 8007570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	fa02 f303 	lsl.w	r3, r2, r3
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d123      	bne.n	80075de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	08da      	lsrs	r2, r3, #3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3208      	adds	r2, #8
 800759e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	220f      	movs	r2, #15
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43db      	mvns	r3, r3
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	4013      	ands	r3, r2
 80075b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	691a      	ldr	r2, [r3, #16]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f003 0307 	and.w	r3, r3, #7
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	08da      	lsrs	r2, r3, #3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3208      	adds	r2, #8
 80075d8:	6939      	ldr	r1, [r7, #16]
 80075da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	2203      	movs	r2, #3
 80075ea:	fa02 f303 	lsl.w	r3, r2, r3
 80075ee:	43db      	mvns	r3, r3
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4013      	ands	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f003 0203 	and.w	r2, r3, #3
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	fa02 f303 	lsl.w	r3, r2, r3
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4313      	orrs	r3, r2
 800760a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 80a6 	beq.w	800776c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007620:	4b5b      	ldr	r3, [pc, #364]	; (8007790 <HAL_GPIO_Init+0x2e4>)
 8007622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007624:	4a5a      	ldr	r2, [pc, #360]	; (8007790 <HAL_GPIO_Init+0x2e4>)
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	6613      	str	r3, [r2, #96]	; 0x60
 800762c:	4b58      	ldr	r3, [pc, #352]	; (8007790 <HAL_GPIO_Init+0x2e4>)
 800762e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007638:	4a56      	ldr	r2, [pc, #344]	; (8007794 <HAL_GPIO_Init+0x2e8>)
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	089b      	lsrs	r3, r3, #2
 800763e:	3302      	adds	r3, #2
 8007640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f003 0303 	and.w	r3, r3, #3
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	220f      	movs	r2, #15
 8007650:	fa02 f303 	lsl.w	r3, r2, r3
 8007654:	43db      	mvns	r3, r3
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4013      	ands	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007662:	d01f      	beq.n	80076a4 <HAL_GPIO_Init+0x1f8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a4c      	ldr	r2, [pc, #304]	; (8007798 <HAL_GPIO_Init+0x2ec>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d019      	beq.n	80076a0 <HAL_GPIO_Init+0x1f4>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a4b      	ldr	r2, [pc, #300]	; (800779c <HAL_GPIO_Init+0x2f0>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d013      	beq.n	800769c <HAL_GPIO_Init+0x1f0>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a4a      	ldr	r2, [pc, #296]	; (80077a0 <HAL_GPIO_Init+0x2f4>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00d      	beq.n	8007698 <HAL_GPIO_Init+0x1ec>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a49      	ldr	r2, [pc, #292]	; (80077a4 <HAL_GPIO_Init+0x2f8>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d007      	beq.n	8007694 <HAL_GPIO_Init+0x1e8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a48      	ldr	r2, [pc, #288]	; (80077a8 <HAL_GPIO_Init+0x2fc>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d101      	bne.n	8007690 <HAL_GPIO_Init+0x1e4>
 800768c:	2305      	movs	r3, #5
 800768e:	e00a      	b.n	80076a6 <HAL_GPIO_Init+0x1fa>
 8007690:	2306      	movs	r3, #6
 8007692:	e008      	b.n	80076a6 <HAL_GPIO_Init+0x1fa>
 8007694:	2304      	movs	r3, #4
 8007696:	e006      	b.n	80076a6 <HAL_GPIO_Init+0x1fa>
 8007698:	2303      	movs	r3, #3
 800769a:	e004      	b.n	80076a6 <HAL_GPIO_Init+0x1fa>
 800769c:	2302      	movs	r3, #2
 800769e:	e002      	b.n	80076a6 <HAL_GPIO_Init+0x1fa>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e000      	b.n	80076a6 <HAL_GPIO_Init+0x1fa>
 80076a4:	2300      	movs	r3, #0
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	f002 0203 	and.w	r2, r2, #3
 80076ac:	0092      	lsls	r2, r2, #2
 80076ae:	4093      	lsls	r3, r2
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076b6:	4937      	ldr	r1, [pc, #220]	; (8007794 <HAL_GPIO_Init+0x2e8>)
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	089b      	lsrs	r3, r3, #2
 80076bc:	3302      	adds	r3, #2
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80076c4:	4b39      	ldr	r3, [pc, #228]	; (80077ac <HAL_GPIO_Init+0x300>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	43db      	mvns	r3, r3
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4013      	ands	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80076e8:	4a30      	ldr	r2, [pc, #192]	; (80077ac <HAL_GPIO_Init+0x300>)
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80076ee:	4b2f      	ldr	r3, [pc, #188]	; (80077ac <HAL_GPIO_Init+0x300>)
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	43db      	mvns	r3, r3
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4013      	ands	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007712:	4a26      	ldr	r2, [pc, #152]	; (80077ac <HAL_GPIO_Init+0x300>)
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007718:	4b24      	ldr	r3, [pc, #144]	; (80077ac <HAL_GPIO_Init+0x300>)
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	43db      	mvns	r3, r3
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4013      	ands	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4313      	orrs	r3, r2
 800773a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800773c:	4a1b      	ldr	r2, [pc, #108]	; (80077ac <HAL_GPIO_Init+0x300>)
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007742:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <HAL_GPIO_Init+0x300>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	43db      	mvns	r3, r3
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	4013      	ands	r3, r2
 8007750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007766:	4a11      	ldr	r2, [pc, #68]	; (80077ac <HAL_GPIO_Init+0x300>)
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	3301      	adds	r3, #1
 8007770:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	fa22 f303 	lsr.w	r3, r2, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	f47f ae9d 	bne.w	80074bc <HAL_GPIO_Init+0x10>
  }
}
 8007782:	bf00      	nop
 8007784:	bf00      	nop
 8007786:	371c      	adds	r7, #28
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40021000 	.word	0x40021000
 8007794:	40010000 	.word	0x40010000
 8007798:	48000400 	.word	0x48000400
 800779c:	48000800 	.word	0x48000800
 80077a0:	48000c00 	.word	0x48000c00
 80077a4:	48001000 	.word	0x48001000
 80077a8:	48001400 	.word	0x48001400
 80077ac:	40010400 	.word	0x40010400

080077b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b087      	sub	sp, #28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80077be:	e0bd      	b.n	800793c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80077c0:	2201      	movs	r2, #1
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	fa02 f303 	lsl.w	r3, r2, r3
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	4013      	ands	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80b0 	beq.w	8007936 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80077d6:	4a60      	ldr	r2, [pc, #384]	; (8007958 <HAL_GPIO_DeInit+0x1a8>)
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	089b      	lsrs	r3, r3, #2
 80077dc:	3302      	adds	r3, #2
 80077de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077e2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	220f      	movs	r2, #15
 80077ee:	fa02 f303 	lsl.w	r3, r2, r3
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4013      	ands	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80077fe:	d01f      	beq.n	8007840 <HAL_GPIO_DeInit+0x90>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a56      	ldr	r2, [pc, #344]	; (800795c <HAL_GPIO_DeInit+0x1ac>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d019      	beq.n	800783c <HAL_GPIO_DeInit+0x8c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a55      	ldr	r2, [pc, #340]	; (8007960 <HAL_GPIO_DeInit+0x1b0>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d013      	beq.n	8007838 <HAL_GPIO_DeInit+0x88>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a54      	ldr	r2, [pc, #336]	; (8007964 <HAL_GPIO_DeInit+0x1b4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00d      	beq.n	8007834 <HAL_GPIO_DeInit+0x84>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a53      	ldr	r2, [pc, #332]	; (8007968 <HAL_GPIO_DeInit+0x1b8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d007      	beq.n	8007830 <HAL_GPIO_DeInit+0x80>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a52      	ldr	r2, [pc, #328]	; (800796c <HAL_GPIO_DeInit+0x1bc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d101      	bne.n	800782c <HAL_GPIO_DeInit+0x7c>
 8007828:	2305      	movs	r3, #5
 800782a:	e00a      	b.n	8007842 <HAL_GPIO_DeInit+0x92>
 800782c:	2306      	movs	r3, #6
 800782e:	e008      	b.n	8007842 <HAL_GPIO_DeInit+0x92>
 8007830:	2304      	movs	r3, #4
 8007832:	e006      	b.n	8007842 <HAL_GPIO_DeInit+0x92>
 8007834:	2303      	movs	r3, #3
 8007836:	e004      	b.n	8007842 <HAL_GPIO_DeInit+0x92>
 8007838:	2302      	movs	r3, #2
 800783a:	e002      	b.n	8007842 <HAL_GPIO_DeInit+0x92>
 800783c:	2301      	movs	r3, #1
 800783e:	e000      	b.n	8007842 <HAL_GPIO_DeInit+0x92>
 8007840:	2300      	movs	r3, #0
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	f002 0203 	and.w	r2, r2, #3
 8007848:	0092      	lsls	r2, r2, #2
 800784a:	4093      	lsls	r3, r2
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	429a      	cmp	r2, r3
 8007850:	d132      	bne.n	80078b8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007852:	4b47      	ldr	r3, [pc, #284]	; (8007970 <HAL_GPIO_DeInit+0x1c0>)
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	43db      	mvns	r3, r3
 800785a:	4945      	ldr	r1, [pc, #276]	; (8007970 <HAL_GPIO_DeInit+0x1c0>)
 800785c:	4013      	ands	r3, r2
 800785e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007860:	4b43      	ldr	r3, [pc, #268]	; (8007970 <HAL_GPIO_DeInit+0x1c0>)
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	43db      	mvns	r3, r3
 8007868:	4941      	ldr	r1, [pc, #260]	; (8007970 <HAL_GPIO_DeInit+0x1c0>)
 800786a:	4013      	ands	r3, r2
 800786c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800786e:	4b40      	ldr	r3, [pc, #256]	; (8007970 <HAL_GPIO_DeInit+0x1c0>)
 8007870:	68da      	ldr	r2, [r3, #12]
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	43db      	mvns	r3, r3
 8007876:	493e      	ldr	r1, [pc, #248]	; (8007970 <HAL_GPIO_DeInit+0x1c0>)
 8007878:	4013      	ands	r3, r2
 800787a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800787c:	4b3c      	ldr	r3, [pc, #240]	; (8007970 <HAL_GPIO_DeInit+0x1c0>)
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	43db      	mvns	r3, r3
 8007884:	493a      	ldr	r1, [pc, #232]	; (8007970 <HAL_GPIO_DeInit+0x1c0>)
 8007886:	4013      	ands	r3, r2
 8007888:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	220f      	movs	r2, #15
 8007894:	fa02 f303 	lsl.w	r3, r2, r3
 8007898:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800789a:	4a2f      	ldr	r2, [pc, #188]	; (8007958 <HAL_GPIO_DeInit+0x1a8>)
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	089b      	lsrs	r3, r3, #2
 80078a0:	3302      	adds	r3, #2
 80078a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	43da      	mvns	r2, r3
 80078aa:	482b      	ldr	r0, [pc, #172]	; (8007958 <HAL_GPIO_DeInit+0x1a8>)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	089b      	lsrs	r3, r3, #2
 80078b0:	400a      	ands	r2, r1
 80078b2:	3302      	adds	r3, #2
 80078b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	2103      	movs	r1, #3
 80078c2:	fa01 f303 	lsl.w	r3, r1, r3
 80078c6:	431a      	orrs	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	08da      	lsrs	r2, r3, #3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3208      	adds	r2, #8
 80078d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	220f      	movs	r2, #15
 80078e2:	fa02 f303 	lsl.w	r3, r2, r3
 80078e6:	43db      	mvns	r3, r3
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	08d2      	lsrs	r2, r2, #3
 80078ec:	4019      	ands	r1, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3208      	adds	r2, #8
 80078f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	2103      	movs	r1, #3
 8007900:	fa01 f303 	lsl.w	r3, r1, r3
 8007904:	43db      	mvns	r3, r3
 8007906:	401a      	ands	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	2101      	movs	r1, #1
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	fa01 f303 	lsl.w	r3, r1, r3
 8007918:	43db      	mvns	r3, r3
 800791a:	401a      	ands	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	2103      	movs	r1, #3
 800792a:	fa01 f303 	lsl.w	r3, r1, r3
 800792e:	43db      	mvns	r3, r3
 8007930:	401a      	ands	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	609a      	str	r2, [r3, #8]
    }

    position++;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	3301      	adds	r3, #1
 800793a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	fa22 f303 	lsr.w	r3, r2, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	f47f af3b 	bne.w	80077c0 <HAL_GPIO_DeInit+0x10>
  }
}
 800794a:	bf00      	nop
 800794c:	bf00      	nop
 800794e:	371c      	adds	r7, #28
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	40010000 	.word	0x40010000
 800795c:	48000400 	.word	0x48000400
 8007960:	48000800 	.word	0x48000800
 8007964:	48000c00 	.word	0x48000c00
 8007968:	48001000 	.word	0x48001000
 800796c:	48001400 	.word	0x48001400
 8007970:	40010400 	.word	0x40010400

08007974 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	691a      	ldr	r2, [r3, #16]
 8007984:	887b      	ldrh	r3, [r7, #2]
 8007986:	4013      	ands	r3, r2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800798c:	2301      	movs	r3, #1
 800798e:	73fb      	strb	r3, [r7, #15]
 8007990:	e001      	b.n	8007996 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007992:	2300      	movs	r3, #0
 8007994:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	807b      	strh	r3, [r7, #2]
 80079b0:	4613      	mov	r3, r2
 80079b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079b4:	787b      	ldrb	r3, [r7, #1]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80079ba:	887a      	ldrh	r2, [r7, #2]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80079c0:	e002      	b.n	80079c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80079c2:	887a      	ldrh	r2, [r7, #2]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80079e6:	887a      	ldrh	r2, [r7, #2]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4013      	ands	r3, r2
 80079ec:	041a      	lsls	r2, r3, #16
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	43d9      	mvns	r1, r3
 80079f2:	887b      	ldrh	r3, [r7, #2]
 80079f4:	400b      	ands	r3, r1
 80079f6:	431a      	orrs	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	619a      	str	r2, [r3, #24]
}
 80079fc:	bf00      	nop
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007a12:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a14:	695a      	ldr	r2, [r3, #20]
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d006      	beq.n	8007a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a1e:	4a05      	ldr	r2, [pc, #20]	; (8007a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a20:	88fb      	ldrh	r3, [r7, #6]
 8007a22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a24:	88fb      	ldrh	r3, [r7, #6]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7f9 fa6c 	bl	8000f04 <HAL_GPIO_EXTI_Callback>
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	40010400 	.word	0x40010400

08007a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d141      	bne.n	8007aca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a46:	4b4b      	ldr	r3, [pc, #300]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a52:	d131      	bne.n	8007ab8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a54:	4b47      	ldr	r3, [pc, #284]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a5a:	4a46      	ldr	r2, [pc, #280]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a64:	4b43      	ldr	r3, [pc, #268]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007a6c:	4a41      	ldr	r2, [pc, #260]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a74:	4b40      	ldr	r3, [pc, #256]	; (8007b78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2232      	movs	r2, #50	; 0x32
 8007a7a:	fb02 f303 	mul.w	r3, r2, r3
 8007a7e:	4a3f      	ldr	r2, [pc, #252]	; (8007b7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007a80:	fba2 2303 	umull	r2, r3, r2, r3
 8007a84:	0c9b      	lsrs	r3, r3, #18
 8007a86:	3301      	adds	r3, #1
 8007a88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a8a:	e002      	b.n	8007a92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a92:	4b38      	ldr	r3, [pc, #224]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a9e:	d102      	bne.n	8007aa6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1f2      	bne.n	8007a8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007aa6:	4b33      	ldr	r3, [pc, #204]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ab2:	d158      	bne.n	8007b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e057      	b.n	8007b68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ab8:	4b2e      	ldr	r3, [pc, #184]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007abe:	4a2d      	ldr	r2, [pc, #180]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007ac8:	e04d      	b.n	8007b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad0:	d141      	bne.n	8007b56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ad2:	4b28      	ldr	r3, [pc, #160]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ade:	d131      	bne.n	8007b44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ae0:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ae6:	4a23      	ldr	r2, [pc, #140]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007af0:	4b20      	ldr	r3, [pc, #128]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007af8:	4a1e      	ldr	r2, [pc, #120]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007afe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b00:	4b1d      	ldr	r3, [pc, #116]	; (8007b78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2232      	movs	r2, #50	; 0x32
 8007b06:	fb02 f303 	mul.w	r3, r2, r3
 8007b0a:	4a1c      	ldr	r2, [pc, #112]	; (8007b7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b10:	0c9b      	lsrs	r3, r3, #18
 8007b12:	3301      	adds	r3, #1
 8007b14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b16:	e002      	b.n	8007b1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b1e:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b2a:	d102      	bne.n	8007b32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1f2      	bne.n	8007b18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b32:	4b10      	ldr	r3, [pc, #64]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b3e:	d112      	bne.n	8007b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e011      	b.n	8007b68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b44:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b4a:	4a0a      	ldr	r2, [pc, #40]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007b54:	e007      	b.n	8007b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b56:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007b5e:	4a05      	ldr	r2, [pc, #20]	; (8007b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	40007000 	.word	0x40007000
 8007b78:	2000013c 	.word	0x2000013c
 8007b7c:	431bde83 	.word	0x431bde83

08007b80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	4a04      	ldr	r2, [pc, #16]	; (8007b9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b8e:	6093      	str	r3, [r2, #8]
}
 8007b90:	bf00      	nop
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40007000 	.word	0x40007000

08007ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e306      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d075      	beq.n	8007caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bbe:	4b97      	ldr	r3, [pc, #604]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 030c 	and.w	r3, r3, #12
 8007bc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007bc8:	4b94      	ldr	r3, [pc, #592]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f003 0303 	and.w	r3, r3, #3
 8007bd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	2b0c      	cmp	r3, #12
 8007bd6:	d102      	bne.n	8007bde <HAL_RCC_OscConfig+0x3e>
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d002      	beq.n	8007be4 <HAL_RCC_OscConfig+0x44>
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d10b      	bne.n	8007bfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007be4:	4b8d      	ldr	r3, [pc, #564]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d05b      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x108>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d157      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e2e1      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c04:	d106      	bne.n	8007c14 <HAL_RCC_OscConfig+0x74>
 8007c06:	4b85      	ldr	r3, [pc, #532]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a84      	ldr	r2, [pc, #528]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c10:	6013      	str	r3, [r2, #0]
 8007c12:	e01d      	b.n	8007c50 <HAL_RCC_OscConfig+0xb0>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c1c:	d10c      	bne.n	8007c38 <HAL_RCC_OscConfig+0x98>
 8007c1e:	4b7f      	ldr	r3, [pc, #508]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a7e      	ldr	r2, [pc, #504]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	4b7c      	ldr	r3, [pc, #496]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a7b      	ldr	r2, [pc, #492]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	e00b      	b.n	8007c50 <HAL_RCC_OscConfig+0xb0>
 8007c38:	4b78      	ldr	r3, [pc, #480]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a77      	ldr	r2, [pc, #476]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	4b75      	ldr	r3, [pc, #468]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a74      	ldr	r2, [pc, #464]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d013      	beq.n	8007c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c58:	f7fd f8f4 	bl	8004e44 <HAL_GetTick>
 8007c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c5e:	e008      	b.n	8007c72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c60:	f7fd f8f0 	bl	8004e44 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b64      	cmp	r3, #100	; 0x64
 8007c6c:	d901      	bls.n	8007c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e2a6      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c72:	4b6a      	ldr	r3, [pc, #424]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0f0      	beq.n	8007c60 <HAL_RCC_OscConfig+0xc0>
 8007c7e:	e014      	b.n	8007caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c80:	f7fd f8e0 	bl	8004e44 <HAL_GetTick>
 8007c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c86:	e008      	b.n	8007c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c88:	f7fd f8dc 	bl	8004e44 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	2b64      	cmp	r3, #100	; 0x64
 8007c94:	d901      	bls.n	8007c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e292      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c9a:	4b60      	ldr	r3, [pc, #384]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1f0      	bne.n	8007c88 <HAL_RCC_OscConfig+0xe8>
 8007ca6:	e000      	b.n	8007caa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d075      	beq.n	8007da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cb6:	4b59      	ldr	r3, [pc, #356]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 030c 	and.w	r3, r3, #12
 8007cbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cc0:	4b56      	ldr	r3, [pc, #344]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	2b0c      	cmp	r3, #12
 8007cce:	d102      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x136>
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d002      	beq.n	8007cdc <HAL_RCC_OscConfig+0x13c>
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d11f      	bne.n	8007d1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cdc:	4b4f      	ldr	r3, [pc, #316]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d005      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x154>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e265      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cf4:	4b49      	ldr	r3, [pc, #292]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	061b      	lsls	r3, r3, #24
 8007d02:	4946      	ldr	r1, [pc, #280]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007d08:	4b45      	ldr	r3, [pc, #276]	; (8007e20 <HAL_RCC_OscConfig+0x280>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fd f85f 	bl	8004dd0 <HAL_InitTick>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d043      	beq.n	8007da0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e251      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d023      	beq.n	8007d6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d24:	4b3d      	ldr	r3, [pc, #244]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a3c      	ldr	r2, [pc, #240]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d30:	f7fd f888 	bl	8004e44 <HAL_GetTick>
 8007d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d36:	e008      	b.n	8007d4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d38:	f7fd f884 	bl	8004e44 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d901      	bls.n	8007d4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e23a      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d4a:	4b34      	ldr	r3, [pc, #208]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0f0      	beq.n	8007d38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d56:	4b31      	ldr	r3, [pc, #196]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	061b      	lsls	r3, r3, #24
 8007d64:	492d      	ldr	r1, [pc, #180]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	604b      	str	r3, [r1, #4]
 8007d6a:	e01a      	b.n	8007da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d6c:	4b2b      	ldr	r3, [pc, #172]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a2a      	ldr	r2, [pc, #168]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d78:	f7fd f864 	bl	8004e44 <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d80:	f7fd f860 	bl	8004e44 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e216      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d92:	4b22      	ldr	r3, [pc, #136]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1f0      	bne.n	8007d80 <HAL_RCC_OscConfig+0x1e0>
 8007d9e:	e000      	b.n	8007da2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007da0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0308 	and.w	r3, r3, #8
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d041      	beq.n	8007e32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d01c      	beq.n	8007df0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007db6:	4b19      	ldr	r3, [pc, #100]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dbc:	4a17      	ldr	r2, [pc, #92]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007dbe:	f043 0301 	orr.w	r3, r3, #1
 8007dc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc6:	f7fd f83d 	bl	8004e44 <HAL_GetTick>
 8007dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007dcc:	e008      	b.n	8007de0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dce:	f7fd f839 	bl	8004e44 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d901      	bls.n	8007de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e1ef      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007de0:	4b0e      	ldr	r3, [pc, #56]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0ef      	beq.n	8007dce <HAL_RCC_OscConfig+0x22e>
 8007dee:	e020      	b.n	8007e32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007df0:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007df6:	4a09      	ldr	r2, [pc, #36]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007df8:	f023 0301 	bic.w	r3, r3, #1
 8007dfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e00:	f7fd f820 	bl	8004e44 <HAL_GetTick>
 8007e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e06:	e00d      	b.n	8007e24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e08:	f7fd f81c 	bl	8004e44 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d906      	bls.n	8007e24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e1d2      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
 8007e1a:	bf00      	nop
 8007e1c:	40021000 	.word	0x40021000
 8007e20:	20000140 	.word	0x20000140
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e24:	4b8c      	ldr	r3, [pc, #560]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1ea      	bne.n	8007e08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0304 	and.w	r3, r3, #4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80a6 	beq.w	8007f8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e40:	2300      	movs	r3, #0
 8007e42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007e44:	4b84      	ldr	r3, [pc, #528]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <HAL_RCC_OscConfig+0x2b4>
 8007e50:	2301      	movs	r3, #1
 8007e52:	e000      	b.n	8007e56 <HAL_RCC_OscConfig+0x2b6>
 8007e54:	2300      	movs	r3, #0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00d      	beq.n	8007e76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e5a:	4b7f      	ldr	r3, [pc, #508]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5e:	4a7e      	ldr	r2, [pc, #504]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e64:	6593      	str	r3, [r2, #88]	; 0x58
 8007e66:	4b7c      	ldr	r3, [pc, #496]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e72:	2301      	movs	r3, #1
 8007e74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e76:	4b79      	ldr	r3, [pc, #484]	; (800805c <HAL_RCC_OscConfig+0x4bc>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d118      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e82:	4b76      	ldr	r3, [pc, #472]	; (800805c <HAL_RCC_OscConfig+0x4bc>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a75      	ldr	r2, [pc, #468]	; (800805c <HAL_RCC_OscConfig+0x4bc>)
 8007e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e8e:	f7fc ffd9 	bl	8004e44 <HAL_GetTick>
 8007e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e94:	e008      	b.n	8007ea8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e96:	f7fc ffd5 	bl	8004e44 <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d901      	bls.n	8007ea8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e18b      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ea8:	4b6c      	ldr	r3, [pc, #432]	; (800805c <HAL_RCC_OscConfig+0x4bc>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d0f0      	beq.n	8007e96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d108      	bne.n	8007ece <HAL_RCC_OscConfig+0x32e>
 8007ebc:	4b66      	ldr	r3, [pc, #408]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec2:	4a65      	ldr	r2, [pc, #404]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007ec4:	f043 0301 	orr.w	r3, r3, #1
 8007ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ecc:	e024      	b.n	8007f18 <HAL_RCC_OscConfig+0x378>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	2b05      	cmp	r3, #5
 8007ed4:	d110      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x358>
 8007ed6:	4b60      	ldr	r3, [pc, #384]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007edc:	4a5e      	ldr	r2, [pc, #376]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007ede:	f043 0304 	orr.w	r3, r3, #4
 8007ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ee6:	4b5c      	ldr	r3, [pc, #368]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eec:	4a5a      	ldr	r2, [pc, #360]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007eee:	f043 0301 	orr.w	r3, r3, #1
 8007ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ef6:	e00f      	b.n	8007f18 <HAL_RCC_OscConfig+0x378>
 8007ef8:	4b57      	ldr	r3, [pc, #348]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efe:	4a56      	ldr	r2, [pc, #344]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007f00:	f023 0301 	bic.w	r3, r3, #1
 8007f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f08:	4b53      	ldr	r3, [pc, #332]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0e:	4a52      	ldr	r2, [pc, #328]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007f10:	f023 0304 	bic.w	r3, r3, #4
 8007f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d016      	beq.n	8007f4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f20:	f7fc ff90 	bl	8004e44 <HAL_GetTick>
 8007f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f26:	e00a      	b.n	8007f3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f28:	f7fc ff8c 	bl	8004e44 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e140      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f3e:	4b46      	ldr	r3, [pc, #280]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f44:	f003 0302 	and.w	r3, r3, #2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0ed      	beq.n	8007f28 <HAL_RCC_OscConfig+0x388>
 8007f4c:	e015      	b.n	8007f7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f4e:	f7fc ff79 	bl	8004e44 <HAL_GetTick>
 8007f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f54:	e00a      	b.n	8007f6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f56:	f7fc ff75 	bl	8004e44 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e129      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f6c:	4b3a      	ldr	r3, [pc, #232]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1ed      	bne.n	8007f56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f7a:	7ffb      	ldrb	r3, [r7, #31]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d105      	bne.n	8007f8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f80:	4b35      	ldr	r3, [pc, #212]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f84:	4a34      	ldr	r2, [pc, #208]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0320 	and.w	r3, r3, #32
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d03c      	beq.n	8008012 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01c      	beq.n	8007fda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007fa0:	4b2d      	ldr	r3, [pc, #180]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007fa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fa6:	4a2c      	ldr	r2, [pc, #176]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007fa8:	f043 0301 	orr.w	r3, r3, #1
 8007fac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fb0:	f7fc ff48 	bl	8004e44 <HAL_GetTick>
 8007fb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007fb6:	e008      	b.n	8007fca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fb8:	f7fc ff44 	bl	8004e44 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e0fa      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007fca:	4b23      	ldr	r3, [pc, #140]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0ef      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x418>
 8007fd8:	e01b      	b.n	8008012 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fda:	4b1f      	ldr	r3, [pc, #124]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fe0:	4a1d      	ldr	r2, [pc, #116]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8007fe2:	f023 0301 	bic.w	r3, r3, #1
 8007fe6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fea:	f7fc ff2b 	bl	8004e44 <HAL_GetTick>
 8007fee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ff0:	e008      	b.n	8008004 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ff2:	f7fc ff27 	bl	8004e44 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d901      	bls.n	8008004 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e0dd      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008004:	4b14      	ldr	r3, [pc, #80]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8008006:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1ef      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 80d1 	beq.w	80081be <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800801c:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f003 030c 	and.w	r3, r3, #12
 8008024:	2b0c      	cmp	r3, #12
 8008026:	f000 808b 	beq.w	8008140 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	2b02      	cmp	r3, #2
 8008030:	d15e      	bne.n	80080f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008032:	4b09      	ldr	r3, [pc, #36]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a08      	ldr	r2, [pc, #32]	; (8008058 <HAL_RCC_OscConfig+0x4b8>)
 8008038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800803c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800803e:	f7fc ff01 	bl	8004e44 <HAL_GetTick>
 8008042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008044:	e00c      	b.n	8008060 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008046:	f7fc fefd 	bl	8004e44 <HAL_GetTick>
 800804a:	4602      	mov	r2, r0
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	2b02      	cmp	r3, #2
 8008052:	d905      	bls.n	8008060 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	e0b3      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
 8008058:	40021000 	.word	0x40021000
 800805c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008060:	4b59      	ldr	r3, [pc, #356]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1ec      	bne.n	8008046 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800806c:	4b56      	ldr	r3, [pc, #344]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	4b56      	ldr	r3, [pc, #344]	; (80081cc <HAL_RCC_OscConfig+0x62c>)
 8008072:	4013      	ands	r3, r2
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6a11      	ldr	r1, [r2, #32]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800807c:	3a01      	subs	r2, #1
 800807e:	0112      	lsls	r2, r2, #4
 8008080:	4311      	orrs	r1, r2
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008086:	0212      	lsls	r2, r2, #8
 8008088:	4311      	orrs	r1, r2
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800808e:	0852      	lsrs	r2, r2, #1
 8008090:	3a01      	subs	r2, #1
 8008092:	0552      	lsls	r2, r2, #21
 8008094:	4311      	orrs	r1, r2
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800809a:	0852      	lsrs	r2, r2, #1
 800809c:	3a01      	subs	r2, #1
 800809e:	0652      	lsls	r2, r2, #25
 80080a0:	4311      	orrs	r1, r2
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80080a6:	06d2      	lsls	r2, r2, #27
 80080a8:	430a      	orrs	r2, r1
 80080aa:	4947      	ldr	r1, [pc, #284]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080b0:	4b45      	ldr	r3, [pc, #276]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a44      	ldr	r2, [pc, #272]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 80080b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80080bc:	4b42      	ldr	r3, [pc, #264]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	4a41      	ldr	r2, [pc, #260]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 80080c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c8:	f7fc febc 	bl	8004e44 <HAL_GetTick>
 80080cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080d0:	f7fc feb8 	bl	8004e44 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e06e      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080e2:	4b39      	ldr	r3, [pc, #228]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0f0      	beq.n	80080d0 <HAL_RCC_OscConfig+0x530>
 80080ee:	e066      	b.n	80081be <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080f0:	4b35      	ldr	r3, [pc, #212]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a34      	ldr	r2, [pc, #208]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 80080f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080fa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80080fc:	4b32      	ldr	r3, [pc, #200]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	4a31      	ldr	r2, [pc, #196]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 8008102:	f023 0303 	bic.w	r3, r3, #3
 8008106:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008108:	4b2f      	ldr	r3, [pc, #188]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	4a2e      	ldr	r2, [pc, #184]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 800810e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008116:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008118:	f7fc fe94 	bl	8004e44 <HAL_GetTick>
 800811c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008120:	f7fc fe90 	bl	8004e44 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e046      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008132:	4b25      	ldr	r3, [pc, #148]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1f0      	bne.n	8008120 <HAL_RCC_OscConfig+0x580>
 800813e:	e03e      	b.n	80081be <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d101      	bne.n	800814c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e039      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800814c:	4b1e      	ldr	r3, [pc, #120]	; (80081c8 <HAL_RCC_OscConfig+0x628>)
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f003 0203 	and.w	r2, r3, #3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	429a      	cmp	r2, r3
 800815e:	d12c      	bne.n	80081ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	3b01      	subs	r3, #1
 800816c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800816e:	429a      	cmp	r2, r3
 8008170:	d123      	bne.n	80081ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800817e:	429a      	cmp	r2, r3
 8008180:	d11b      	bne.n	80081ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800818e:	429a      	cmp	r2, r3
 8008190:	d113      	bne.n	80081ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819c:	085b      	lsrs	r3, r3, #1
 800819e:	3b01      	subs	r3, #1
 80081a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d109      	bne.n	80081ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b0:	085b      	lsrs	r3, r3, #1
 80081b2:	3b01      	subs	r3, #1
 80081b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d001      	beq.n	80081be <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e000      	b.n	80081c0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3720      	adds	r7, #32
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	40021000 	.word	0x40021000
 80081cc:	019f800c 	.word	0x019f800c

080081d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80081da:	2300      	movs	r3, #0
 80081dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e11e      	b.n	8008426 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081e8:	4b91      	ldr	r3, [pc, #580]	; (8008430 <HAL_RCC_ClockConfig+0x260>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d910      	bls.n	8008218 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081f6:	4b8e      	ldr	r3, [pc, #568]	; (8008430 <HAL_RCC_ClockConfig+0x260>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f023 020f 	bic.w	r2, r3, #15
 80081fe:	498c      	ldr	r1, [pc, #560]	; (8008430 <HAL_RCC_ClockConfig+0x260>)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	4313      	orrs	r3, r2
 8008204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008206:	4b8a      	ldr	r3, [pc, #552]	; (8008430 <HAL_RCC_ClockConfig+0x260>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 030f 	and.w	r3, r3, #15
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d001      	beq.n	8008218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e106      	b.n	8008426 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d073      	beq.n	800830c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	2b03      	cmp	r3, #3
 800822a:	d129      	bne.n	8008280 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800822c:	4b81      	ldr	r3, [pc, #516]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e0f4      	b.n	8008426 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800823c:	f000 f9ae 	bl	800859c <RCC_GetSysClockFreqFromPLLSource>
 8008240:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	4a7c      	ldr	r2, [pc, #496]	; (8008438 <HAL_RCC_ClockConfig+0x268>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d93f      	bls.n	80082ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800824a:	4b7a      	ldr	r3, [pc, #488]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d009      	beq.n	800826a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800825e:	2b00      	cmp	r3, #0
 8008260:	d033      	beq.n	80082ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008266:	2b00      	cmp	r3, #0
 8008268:	d12f      	bne.n	80082ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800826a:	4b72      	ldr	r3, [pc, #456]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008272:	4a70      	ldr	r2, [pc, #448]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 8008274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008278:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800827a:	2380      	movs	r3, #128	; 0x80
 800827c:	617b      	str	r3, [r7, #20]
 800827e:	e024      	b.n	80082ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d107      	bne.n	8008298 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008288:	4b6a      	ldr	r3, [pc, #424]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d109      	bne.n	80082a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e0c6      	b.n	8008426 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008298:	4b66      	ldr	r3, [pc, #408]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e0be      	b.n	8008426 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80082a8:	f000 f8ce 	bl	8008448 <HAL_RCC_GetSysClockFreq>
 80082ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	4a61      	ldr	r2, [pc, #388]	; (8008438 <HAL_RCC_ClockConfig+0x268>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d909      	bls.n	80082ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80082b6:	4b5f      	ldr	r3, [pc, #380]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082be:	4a5d      	ldr	r2, [pc, #372]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 80082c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80082c6:	2380      	movs	r3, #128	; 0x80
 80082c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80082ca:	4b5a      	ldr	r3, [pc, #360]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f023 0203 	bic.w	r2, r3, #3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	4957      	ldr	r1, [pc, #348]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082dc:	f7fc fdb2 	bl	8004e44 <HAL_GetTick>
 80082e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082e2:	e00a      	b.n	80082fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082e4:	f7fc fdae 	bl	8004e44 <HAL_GetTick>
 80082e8:	4602      	mov	r2, r0
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e095      	b.n	8008426 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082fa:	4b4e      	ldr	r3, [pc, #312]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 020c 	and.w	r2, r3, #12
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	429a      	cmp	r2, r3
 800830a:	d1eb      	bne.n	80082e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d023      	beq.n	8008360 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008324:	4b43      	ldr	r3, [pc, #268]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	4a42      	ldr	r2, [pc, #264]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 800832a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800832e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0308 	and.w	r3, r3, #8
 8008338:	2b00      	cmp	r3, #0
 800833a:	d007      	beq.n	800834c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800833c:	4b3d      	ldr	r3, [pc, #244]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008344:	4a3b      	ldr	r2, [pc, #236]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 8008346:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800834a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800834c:	4b39      	ldr	r3, [pc, #228]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	4936      	ldr	r1, [pc, #216]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 800835a:	4313      	orrs	r3, r2
 800835c:	608b      	str	r3, [r1, #8]
 800835e:	e008      	b.n	8008372 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	2b80      	cmp	r3, #128	; 0x80
 8008364:	d105      	bne.n	8008372 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008366:	4b33      	ldr	r3, [pc, #204]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	4a32      	ldr	r2, [pc, #200]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 800836c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008370:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008372:	4b2f      	ldr	r3, [pc, #188]	; (8008430 <HAL_RCC_ClockConfig+0x260>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 030f 	and.w	r3, r3, #15
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	429a      	cmp	r2, r3
 800837e:	d21d      	bcs.n	80083bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008380:	4b2b      	ldr	r3, [pc, #172]	; (8008430 <HAL_RCC_ClockConfig+0x260>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f023 020f 	bic.w	r2, r3, #15
 8008388:	4929      	ldr	r1, [pc, #164]	; (8008430 <HAL_RCC_ClockConfig+0x260>)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	4313      	orrs	r3, r2
 800838e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008390:	f7fc fd58 	bl	8004e44 <HAL_GetTick>
 8008394:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008396:	e00a      	b.n	80083ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008398:	f7fc fd54 	bl	8004e44 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e03b      	b.n	8008426 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ae:	4b20      	ldr	r3, [pc, #128]	; (8008430 <HAL_RCC_ClockConfig+0x260>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d1ed      	bne.n	8008398 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0304 	and.w	r3, r3, #4
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d008      	beq.n	80083da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083c8:	4b1a      	ldr	r3, [pc, #104]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	4917      	ldr	r1, [pc, #92]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083e6:	4b13      	ldr	r3, [pc, #76]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	490f      	ldr	r1, [pc, #60]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80083fa:	f000 f825 	bl	8008448 <HAL_RCC_GetSysClockFreq>
 80083fe:	4602      	mov	r2, r0
 8008400:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <HAL_RCC_ClockConfig+0x264>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	091b      	lsrs	r3, r3, #4
 8008406:	f003 030f 	and.w	r3, r3, #15
 800840a:	490c      	ldr	r1, [pc, #48]	; (800843c <HAL_RCC_ClockConfig+0x26c>)
 800840c:	5ccb      	ldrb	r3, [r1, r3]
 800840e:	f003 031f 	and.w	r3, r3, #31
 8008412:	fa22 f303 	lsr.w	r3, r2, r3
 8008416:	4a0a      	ldr	r2, [pc, #40]	; (8008440 <HAL_RCC_ClockConfig+0x270>)
 8008418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800841a:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <HAL_RCC_ClockConfig+0x274>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4618      	mov	r0, r3
 8008420:	f7fc fcd6 	bl	8004dd0 <HAL_InitTick>
 8008424:	4603      	mov	r3, r0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	40022000 	.word	0x40022000
 8008434:	40021000 	.word	0x40021000
 8008438:	04c4b400 	.word	0x04c4b400
 800843c:	0800b9f8 	.word	0x0800b9f8
 8008440:	2000013c 	.word	0x2000013c
 8008444:	20000140 	.word	0x20000140

08008448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800844e:	4b2c      	ldr	r3, [pc, #176]	; (8008500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 030c 	and.w	r3, r3, #12
 8008456:	2b04      	cmp	r3, #4
 8008458:	d102      	bne.n	8008460 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800845a:	4b2a      	ldr	r3, [pc, #168]	; (8008504 <HAL_RCC_GetSysClockFreq+0xbc>)
 800845c:	613b      	str	r3, [r7, #16]
 800845e:	e047      	b.n	80084f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008460:	4b27      	ldr	r3, [pc, #156]	; (8008500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 030c 	and.w	r3, r3, #12
 8008468:	2b08      	cmp	r3, #8
 800846a:	d102      	bne.n	8008472 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800846c:	4b26      	ldr	r3, [pc, #152]	; (8008508 <HAL_RCC_GetSysClockFreq+0xc0>)
 800846e:	613b      	str	r3, [r7, #16]
 8008470:	e03e      	b.n	80084f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008472:	4b23      	ldr	r3, [pc, #140]	; (8008500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f003 030c 	and.w	r3, r3, #12
 800847a:	2b0c      	cmp	r3, #12
 800847c:	d136      	bne.n	80084ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800847e:	4b20      	ldr	r3, [pc, #128]	; (8008500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008488:	4b1d      	ldr	r3, [pc, #116]	; (8008500 <HAL_RCC_GetSysClockFreq+0xb8>)
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	091b      	lsrs	r3, r3, #4
 800848e:	f003 030f 	and.w	r3, r3, #15
 8008492:	3301      	adds	r3, #1
 8008494:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b03      	cmp	r3, #3
 800849a:	d10c      	bne.n	80084b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800849c:	4a1a      	ldr	r2, [pc, #104]	; (8008508 <HAL_RCC_GetSysClockFreq+0xc0>)
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a4:	4a16      	ldr	r2, [pc, #88]	; (8008500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084a6:	68d2      	ldr	r2, [r2, #12]
 80084a8:	0a12      	lsrs	r2, r2, #8
 80084aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80084ae:	fb02 f303 	mul.w	r3, r2, r3
 80084b2:	617b      	str	r3, [r7, #20]
      break;
 80084b4:	e00c      	b.n	80084d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80084b6:	4a13      	ldr	r2, [pc, #76]	; (8008504 <HAL_RCC_GetSysClockFreq+0xbc>)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80084be:	4a10      	ldr	r2, [pc, #64]	; (8008500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084c0:	68d2      	ldr	r2, [r2, #12]
 80084c2:	0a12      	lsrs	r2, r2, #8
 80084c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80084c8:	fb02 f303 	mul.w	r3, r2, r3
 80084cc:	617b      	str	r3, [r7, #20]
      break;
 80084ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80084d0:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	0e5b      	lsrs	r3, r3, #25
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	3301      	adds	r3, #1
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e8:	613b      	str	r3, [r7, #16]
 80084ea:	e001      	b.n	80084f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80084f0:	693b      	ldr	r3, [r7, #16]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	371c      	adds	r7, #28
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40021000 	.word	0x40021000
 8008504:	00f42400 	.word	0x00f42400
 8008508:	016e3600 	.word	0x016e3600

0800850c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008510:	4b03      	ldr	r3, [pc, #12]	; (8008520 <HAL_RCC_GetHCLKFreq+0x14>)
 8008512:	681b      	ldr	r3, [r3, #0]
}
 8008514:	4618      	mov	r0, r3
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	2000013c 	.word	0x2000013c

08008524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008528:	f7ff fff0 	bl	800850c <HAL_RCC_GetHCLKFreq>
 800852c:	4602      	mov	r2, r0
 800852e:	4b06      	ldr	r3, [pc, #24]	; (8008548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	0a1b      	lsrs	r3, r3, #8
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	4904      	ldr	r1, [pc, #16]	; (800854c <HAL_RCC_GetPCLK1Freq+0x28>)
 800853a:	5ccb      	ldrb	r3, [r1, r3]
 800853c:	f003 031f 	and.w	r3, r3, #31
 8008540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008544:	4618      	mov	r0, r3
 8008546:	bd80      	pop	{r7, pc}
 8008548:	40021000 	.word	0x40021000
 800854c:	0800ba08 	.word	0x0800ba08

08008550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008554:	f7ff ffda 	bl	800850c <HAL_RCC_GetHCLKFreq>
 8008558:	4602      	mov	r2, r0
 800855a:	4b06      	ldr	r3, [pc, #24]	; (8008574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	0adb      	lsrs	r3, r3, #11
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	4904      	ldr	r1, [pc, #16]	; (8008578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008566:	5ccb      	ldrb	r3, [r1, r3]
 8008568:	f003 031f 	and.w	r3, r3, #31
 800856c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008570:	4618      	mov	r0, r3
 8008572:	bd80      	pop	{r7, pc}
 8008574:	40021000 	.word	0x40021000
 8008578:	0800ba08 	.word	0x0800ba08

0800857c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8008580:	4b05      	ldr	r3, [pc, #20]	; (8008598 <HAL_RCC_EnableCSS+0x1c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a04      	ldr	r2, [pc, #16]	; (8008598 <HAL_RCC_EnableCSS+0x1c>)
 8008586:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800858a:	6013      	str	r3, [r2, #0]
}
 800858c:	bf00      	nop
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	40021000 	.word	0x40021000

0800859c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80085a2:	4b1e      	ldr	r3, [pc, #120]	; (800861c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	f003 0303 	and.w	r3, r3, #3
 80085aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80085ac:	4b1b      	ldr	r3, [pc, #108]	; (800861c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	091b      	lsrs	r3, r3, #4
 80085b2:	f003 030f 	and.w	r3, r3, #15
 80085b6:	3301      	adds	r3, #1
 80085b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d10c      	bne.n	80085da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085c0:	4a17      	ldr	r2, [pc, #92]	; (8008620 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c8:	4a14      	ldr	r2, [pc, #80]	; (800861c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085ca:	68d2      	ldr	r2, [r2, #12]
 80085cc:	0a12      	lsrs	r2, r2, #8
 80085ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80085d2:	fb02 f303 	mul.w	r3, r2, r3
 80085d6:	617b      	str	r3, [r7, #20]
    break;
 80085d8:	e00c      	b.n	80085f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085da:	4a12      	ldr	r2, [pc, #72]	; (8008624 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e2:	4a0e      	ldr	r2, [pc, #56]	; (800861c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085e4:	68d2      	ldr	r2, [r2, #12]
 80085e6:	0a12      	lsrs	r2, r2, #8
 80085e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80085ec:	fb02 f303 	mul.w	r3, r2, r3
 80085f0:	617b      	str	r3, [r7, #20]
    break;
 80085f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085f4:	4b09      	ldr	r3, [pc, #36]	; (800861c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	0e5b      	lsrs	r3, r3, #25
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	3301      	adds	r3, #1
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	fbb2 f3f3 	udiv	r3, r2, r3
 800860c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800860e:	687b      	ldr	r3, [r7, #4]
}
 8008610:	4618      	mov	r0, r3
 8008612:	371c      	adds	r7, #28
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	40021000 	.word	0x40021000
 8008620:	016e3600 	.word	0x016e3600
 8008624:	00f42400 	.word	0x00f42400

08008628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008630:	2300      	movs	r3, #0
 8008632:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008634:	2300      	movs	r3, #0
 8008636:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8098 	beq.w	8008776 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008646:	2300      	movs	r3, #0
 8008648:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800864a:	4b43      	ldr	r3, [pc, #268]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800864c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10d      	bne.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008656:	4b40      	ldr	r3, [pc, #256]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865a:	4a3f      	ldr	r2, [pc, #252]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800865c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008660:	6593      	str	r3, [r2, #88]	; 0x58
 8008662:	4b3d      	ldr	r3, [pc, #244]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800866a:	60bb      	str	r3, [r7, #8]
 800866c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800866e:	2301      	movs	r3, #1
 8008670:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008672:	4b3a      	ldr	r3, [pc, #232]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a39      	ldr	r2, [pc, #228]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800867c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800867e:	f7fc fbe1 	bl	8004e44 <HAL_GetTick>
 8008682:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008684:	e009      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008686:	f7fc fbdd 	bl	8004e44 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d902      	bls.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	74fb      	strb	r3, [r7, #19]
        break;
 8008698:	e005      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800869a:	4b30      	ldr	r3, [pc, #192]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d0ef      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80086a6:	7cfb      	ldrb	r3, [r7, #19]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d159      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80086ac:	4b2a      	ldr	r3, [pc, #168]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d01e      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d019      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086c8:	4b23      	ldr	r3, [pc, #140]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086d4:	4b20      	ldr	r3, [pc, #128]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086da:	4a1f      	ldr	r2, [pc, #124]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086e4:	4b1c      	ldr	r3, [pc, #112]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ea:	4a1b      	ldr	r2, [pc, #108]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80086f4:	4a18      	ldr	r2, [pc, #96]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d016      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008706:	f7fc fb9d 	bl	8004e44 <HAL_GetTick>
 800870a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800870c:	e00b      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800870e:	f7fc fb99 	bl	8004e44 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	f241 3288 	movw	r2, #5000	; 0x1388
 800871c:	4293      	cmp	r3, r2
 800871e:	d902      	bls.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	74fb      	strb	r3, [r7, #19]
            break;
 8008724:	e006      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008726:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b00      	cmp	r3, #0
 8008732:	d0ec      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008734:	7cfb      	ldrb	r3, [r7, #19]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10b      	bne.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800873a:	4b07      	ldr	r3, [pc, #28]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800873c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	4903      	ldr	r1, [pc, #12]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800874a:	4313      	orrs	r3, r2
 800874c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008750:	e008      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008752:	7cfb      	ldrb	r3, [r7, #19]
 8008754:	74bb      	strb	r3, [r7, #18]
 8008756:	e005      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008758:	40021000 	.word	0x40021000
 800875c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008760:	7cfb      	ldrb	r3, [r7, #19]
 8008762:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008764:	7c7b      	ldrb	r3, [r7, #17]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d105      	bne.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800876a:	4ba6      	ldr	r3, [pc, #664]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800876c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800876e:	4aa5      	ldr	r2, [pc, #660]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008774:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008782:	4ba0      	ldr	r3, [pc, #640]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008788:	f023 0203 	bic.w	r2, r3, #3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	499c      	ldr	r1, [pc, #624]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008792:	4313      	orrs	r3, r2
 8008794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00a      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087a4:	4b97      	ldr	r3, [pc, #604]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087aa:	f023 020c 	bic.w	r2, r3, #12
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	4994      	ldr	r1, [pc, #592]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087b4:	4313      	orrs	r3, r2
 80087b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0304 	and.w	r3, r3, #4
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80087c6:	4b8f      	ldr	r3, [pc, #572]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	498b      	ldr	r1, [pc, #556]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0308 	and.w	r3, r3, #8
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00a      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80087e8:	4b86      	ldr	r3, [pc, #536]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	4983      	ldr	r1, [pc, #524]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0320 	and.w	r3, r3, #32
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800880a:	4b7e      	ldr	r3, [pc, #504]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800880c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008810:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	497a      	ldr	r1, [pc, #488]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800881a:	4313      	orrs	r3, r2
 800881c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00a      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800882c:	4b75      	ldr	r3, [pc, #468]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800882e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008832:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	4972      	ldr	r1, [pc, #456]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800883c:	4313      	orrs	r3, r2
 800883e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00a      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800884e:	4b6d      	ldr	r3, [pc, #436]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	4969      	ldr	r1, [pc, #420]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800885e:	4313      	orrs	r3, r2
 8008860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00a      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008870:	4b64      	ldr	r3, [pc, #400]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008876:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	4961      	ldr	r1, [pc, #388]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008880:	4313      	orrs	r3, r2
 8008882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00a      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008892:	4b5c      	ldr	r3, [pc, #368]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008898:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	4958      	ldr	r1, [pc, #352]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d015      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088b4:	4b53      	ldr	r3, [pc, #332]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c2:	4950      	ldr	r1, [pc, #320]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088d2:	d105      	bne.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088d4:	4b4b      	ldr	r3, [pc, #300]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	4a4a      	ldr	r2, [pc, #296]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d015      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80088ec:	4b45      	ldr	r3, [pc, #276]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	4942      	ldr	r1, [pc, #264]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800890a:	d105      	bne.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800890c:	4b3d      	ldr	r3, [pc, #244]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	4a3c      	ldr	r2, [pc, #240]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008916:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d015      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008924:	4b37      	ldr	r3, [pc, #220]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800892a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008932:	4934      	ldr	r1, [pc, #208]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008934:	4313      	orrs	r3, r2
 8008936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008942:	d105      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008944:	4b2f      	ldr	r3, [pc, #188]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	4a2e      	ldr	r2, [pc, #184]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800894a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800894e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d015      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800895c:	4b29      	ldr	r3, [pc, #164]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800895e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008962:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896a:	4926      	ldr	r1, [pc, #152]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800896c:	4313      	orrs	r3, r2
 800896e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800897a:	d105      	bne.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800897c:	4b21      	ldr	r3, [pc, #132]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	4a20      	ldr	r2, [pc, #128]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008986:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d015      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008994:	4b1b      	ldr	r3, [pc, #108]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a2:	4918      	ldr	r1, [pc, #96]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089b2:	d105      	bne.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089b4:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	4a12      	ldr	r2, [pc, #72]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d015      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80089cc:	4b0d      	ldr	r3, [pc, #52]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089da:	490a      	ldr	r1, [pc, #40]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089ea:	d105      	bne.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80089ec:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	4a04      	ldr	r2, [pc, #16]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80089f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40021000 	.word	0x40021000

08008a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e049      	b.n	8008aae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7fb fcda 	bl	80043e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4619      	mov	r1, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	f000 fdbe 	bl	80095c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d001      	beq.n	8008ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e04a      	b.n	8008b66 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f042 0201 	orr.w	r2, r2, #1
 8008ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a21      	ldr	r2, [pc, #132]	; (8008b74 <HAL_TIM_Base_Start_IT+0xbc>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d018      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x6c>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008afa:	d013      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x6c>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a1d      	ldr	r2, [pc, #116]	; (8008b78 <HAL_TIM_Base_Start_IT+0xc0>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d00e      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x6c>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a1c      	ldr	r2, [pc, #112]	; (8008b7c <HAL_TIM_Base_Start_IT+0xc4>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d009      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x6c>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a1a      	ldr	r2, [pc, #104]	; (8008b80 <HAL_TIM_Base_Start_IT+0xc8>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d004      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x6c>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a19      	ldr	r2, [pc, #100]	; (8008b84 <HAL_TIM_Base_Start_IT+0xcc>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d115      	bne.n	8008b50 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	4b17      	ldr	r3, [pc, #92]	; (8008b88 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b06      	cmp	r3, #6
 8008b34:	d015      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0xaa>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b3c:	d011      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f042 0201 	orr.w	r2, r2, #1
 8008b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b4e:	e008      	b.n	8008b62 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0201 	orr.w	r2, r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	e000      	b.n	8008b64 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	40012c00 	.word	0x40012c00
 8008b78:	40000400 	.word	0x40000400
 8008b7c:	40000800 	.word	0x40000800
 8008b80:	40013400 	.word	0x40013400
 8008b84:	40014000 	.word	0x40014000
 8008b88:	00010007 	.word	0x00010007

08008b8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 0201 	bic.w	r2, r2, #1
 8008ba2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6a1a      	ldr	r2, [r3, #32]
 8008baa:	f241 1311 	movw	r3, #4369	; 0x1111
 8008bae:	4013      	ands	r3, r2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10f      	bne.n	8008bd4 <HAL_TIM_Base_Stop_IT+0x48>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6a1a      	ldr	r2, [r3, #32]
 8008bba:	f244 4344 	movw	r3, #17476	; 0x4444
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d107      	bne.n	8008bd4 <HAL_TIM_Base_Stop_IT+0x48>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f022 0201 	bic.w	r2, r2, #1
 8008bd2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e049      	b.n	8008c90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d106      	bne.n	8008c16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f841 	bl	8008c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3304      	adds	r3, #4
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f000 fccd 	bl	80095c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f001 f968 	bl	8009f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a3e      	ldr	r2, [pc, #248]	; (8008dc4 <HAL_TIM_PWM_Stop+0x118>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d013      	beq.n	8008cf6 <HAL_TIM_PWM_Stop+0x4a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a3d      	ldr	r2, [pc, #244]	; (8008dc8 <HAL_TIM_PWM_Stop+0x11c>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d00e      	beq.n	8008cf6 <HAL_TIM_PWM_Stop+0x4a>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a3b      	ldr	r2, [pc, #236]	; (8008dcc <HAL_TIM_PWM_Stop+0x120>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d009      	beq.n	8008cf6 <HAL_TIM_PWM_Stop+0x4a>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a3a      	ldr	r2, [pc, #232]	; (8008dd0 <HAL_TIM_PWM_Stop+0x124>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d004      	beq.n	8008cf6 <HAL_TIM_PWM_Stop+0x4a>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a38      	ldr	r2, [pc, #224]	; (8008dd4 <HAL_TIM_PWM_Stop+0x128>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d101      	bne.n	8008cfa <HAL_TIM_PWM_Stop+0x4e>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e000      	b.n	8008cfc <HAL_TIM_PWM_Stop+0x50>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d017      	beq.n	8008d30 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6a1a      	ldr	r2, [r3, #32]
 8008d06:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10f      	bne.n	8008d30 <HAL_TIM_PWM_Stop+0x84>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6a1a      	ldr	r2, [r3, #32]
 8008d16:	f244 4344 	movw	r3, #17476	; 0x4444
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d107      	bne.n	8008d30 <HAL_TIM_PWM_Stop+0x84>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6a1a      	ldr	r2, [r3, #32]
 8008d36:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10f      	bne.n	8008d60 <HAL_TIM_PWM_Stop+0xb4>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6a1a      	ldr	r2, [r3, #32]
 8008d46:	f244 4344 	movw	r3, #17476	; 0x4444
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d107      	bne.n	8008d60 <HAL_TIM_PWM_Stop+0xb4>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 0201 	bic.w	r2, r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d104      	bne.n	8008d70 <HAL_TIM_PWM_Stop+0xc4>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d6e:	e023      	b.n	8008db8 <HAL_TIM_PWM_Stop+0x10c>
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	d104      	bne.n	8008d80 <HAL_TIM_PWM_Stop+0xd4>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d7e:	e01b      	b.n	8008db8 <HAL_TIM_PWM_Stop+0x10c>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b08      	cmp	r3, #8
 8008d84:	d104      	bne.n	8008d90 <HAL_TIM_PWM_Stop+0xe4>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d8e:	e013      	b.n	8008db8 <HAL_TIM_PWM_Stop+0x10c>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2b0c      	cmp	r3, #12
 8008d94:	d104      	bne.n	8008da0 <HAL_TIM_PWM_Stop+0xf4>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d9e:	e00b      	b.n	8008db8 <HAL_TIM_PWM_Stop+0x10c>
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2b10      	cmp	r3, #16
 8008da4:	d104      	bne.n	8008db0 <HAL_TIM_PWM_Stop+0x104>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dae:	e003      	b.n	8008db8 <HAL_TIM_PWM_Stop+0x10c>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40012c00 	.word	0x40012c00
 8008dc8:	40013400 	.word	0x40013400
 8008dcc:	40014000 	.word	0x40014000
 8008dd0:	40014400 	.word	0x40014400
 8008dd4:	40014800 	.word	0x40014800

08008dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d122      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d11b      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f06f 0202 	mvn.w	r2, #2
 8008e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fbb6 	bl	800958c <HAL_TIM_IC_CaptureCallback>
 8008e20:	e005      	b.n	8008e2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fba8 	bl	8009578 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fbb9 	bl	80095a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0304 	and.w	r3, r3, #4
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d122      	bne.n	8008e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d11b      	bne.n	8008e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0204 	mvn.w	r2, #4
 8008e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2202      	movs	r2, #2
 8008e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fb8c 	bl	800958c <HAL_TIM_IC_CaptureCallback>
 8008e74:	e005      	b.n	8008e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fb7e 	bl	8009578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fb8f 	bl	80095a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	f003 0308 	and.w	r3, r3, #8
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d122      	bne.n	8008edc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f003 0308 	and.w	r3, r3, #8
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d11b      	bne.n	8008edc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f06f 0208 	mvn.w	r2, #8
 8008eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2204      	movs	r2, #4
 8008eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fb62 	bl	800958c <HAL_TIM_IC_CaptureCallback>
 8008ec8:	e005      	b.n	8008ed6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fb54 	bl	8009578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fb65 	bl	80095a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	f003 0310 	and.w	r3, r3, #16
 8008ee6:	2b10      	cmp	r3, #16
 8008ee8:	d122      	bne.n	8008f30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f003 0310 	and.w	r3, r3, #16
 8008ef4:	2b10      	cmp	r3, #16
 8008ef6:	d11b      	bne.n	8008f30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f06f 0210 	mvn.w	r2, #16
 8008f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2208      	movs	r2, #8
 8008f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fb38 	bl	800958c <HAL_TIM_IC_CaptureCallback>
 8008f1c:	e005      	b.n	8008f2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fb2a 	bl	8009578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fb3b 	bl	80095a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d10e      	bne.n	8008f5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d107      	bne.n	8008f5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f06f 0201 	mvn.w	r2, #1
 8008f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7f7 ffc6 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f66:	2b80      	cmp	r3, #128	; 0x80
 8008f68:	d10e      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f74:	2b80      	cmp	r3, #128	; 0x80
 8008f76:	d107      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f001 faae 	bl	800a4e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f96:	d10e      	bne.n	8008fb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa2:	2b80      	cmp	r3, #128	; 0x80
 8008fa4:	d107      	bne.n	8008fb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 faa1 	bl	800a4f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc0:	2b40      	cmp	r3, #64	; 0x40
 8008fc2:	d10e      	bne.n	8008fe2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fce:	2b40      	cmp	r3, #64	; 0x40
 8008fd0:	d107      	bne.n	8008fe2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fae9 	bl	80095b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	f003 0320 	and.w	r3, r3, #32
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	d10e      	bne.n	800900e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f003 0320 	and.w	r3, r3, #32
 8008ffa:	2b20      	cmp	r3, #32
 8008ffc:	d107      	bne.n	800900e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f06f 0220 	mvn.w	r2, #32
 8009006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f001 fa61 	bl	800a4d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800901c:	d10f      	bne.n	800903e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800902c:	d107      	bne.n	800903e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 fa67 	bl	800a50c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800904c:	d10f      	bne.n	800906e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800905c:	d107      	bne.n	800906e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 fa59 	bl	800a520 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800907c:	d10f      	bne.n	800909e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800908c:	d107      	bne.n	800909e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f001 fa4b 	bl	800a534 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090ac:	d10f      	bne.n	80090ce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090bc:	d107      	bne.n	80090ce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80090c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 fa3d 	bl	800a548 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090ce:	bf00      	nop
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d101      	bne.n	80090f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090f2:	2302      	movs	r3, #2
 80090f4:	e0ff      	b.n	80092f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b14      	cmp	r3, #20
 8009102:	f200 80f0 	bhi.w	80092e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009106:	a201      	add	r2, pc, #4	; (adr r2, 800910c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910c:	08009161 	.word	0x08009161
 8009110:	080092e7 	.word	0x080092e7
 8009114:	080092e7 	.word	0x080092e7
 8009118:	080092e7 	.word	0x080092e7
 800911c:	080091a1 	.word	0x080091a1
 8009120:	080092e7 	.word	0x080092e7
 8009124:	080092e7 	.word	0x080092e7
 8009128:	080092e7 	.word	0x080092e7
 800912c:	080091e3 	.word	0x080091e3
 8009130:	080092e7 	.word	0x080092e7
 8009134:	080092e7 	.word	0x080092e7
 8009138:	080092e7 	.word	0x080092e7
 800913c:	08009223 	.word	0x08009223
 8009140:	080092e7 	.word	0x080092e7
 8009144:	080092e7 	.word	0x080092e7
 8009148:	080092e7 	.word	0x080092e7
 800914c:	08009265 	.word	0x08009265
 8009150:	080092e7 	.word	0x080092e7
 8009154:	080092e7 	.word	0x080092e7
 8009158:	080092e7 	.word	0x080092e7
 800915c:	080092a5 	.word	0x080092a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fabe 	bl	80096e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699a      	ldr	r2, [r3, #24]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 0208 	orr.w	r2, r2, #8
 800917a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	699a      	ldr	r2, [r3, #24]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0204 	bic.w	r2, r2, #4
 800918a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6999      	ldr	r1, [r3, #24]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	691a      	ldr	r2, [r3, #16]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	430a      	orrs	r2, r1
 800919c:	619a      	str	r2, [r3, #24]
      break;
 800919e:	e0a5      	b.n	80092ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68b9      	ldr	r1, [r7, #8]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fb2e 	bl	8009808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	699a      	ldr	r2, [r3, #24]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6999      	ldr	r1, [r3, #24]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	021a      	lsls	r2, r3, #8
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	619a      	str	r2, [r3, #24]
      break;
 80091e0:	e084      	b.n	80092ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68b9      	ldr	r1, [r7, #8]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 fb97 	bl	800991c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69da      	ldr	r2, [r3, #28]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f042 0208 	orr.w	r2, r2, #8
 80091fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	69da      	ldr	r2, [r3, #28]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0204 	bic.w	r2, r2, #4
 800920c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	69d9      	ldr	r1, [r3, #28]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	691a      	ldr	r2, [r3, #16]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	61da      	str	r2, [r3, #28]
      break;
 8009220:	e064      	b.n	80092ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68b9      	ldr	r1, [r7, #8]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fbff 	bl	8009a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69da      	ldr	r2, [r3, #28]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800923c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	69da      	ldr	r2, [r3, #28]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800924c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	69d9      	ldr	r1, [r3, #28]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	021a      	lsls	r2, r3, #8
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	61da      	str	r2, [r3, #28]
      break;
 8009262:	e043      	b.n	80092ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68b9      	ldr	r1, [r7, #8]
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fc68 	bl	8009b40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0208 	orr.w	r2, r2, #8
 800927e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0204 	bic.w	r2, r2, #4
 800928e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	691a      	ldr	r2, [r3, #16]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80092a2:	e023      	b.n	80092ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fcac 	bl	8009c08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	021a      	lsls	r2, r3, #8
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80092e4:	e002      	b.n	80092ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	75fb      	strb	r3, [r7, #23]
      break;
 80092ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop

08009300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009314:	2b01      	cmp	r3, #1
 8009316:	d101      	bne.n	800931c <HAL_TIM_ConfigClockSource+0x1c>
 8009318:	2302      	movs	r3, #2
 800931a:	e0de      	b.n	80094da <HAL_TIM_ConfigClockSource+0x1da>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2202      	movs	r2, #2
 8009328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800933a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800933e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a63      	ldr	r2, [pc, #396]	; (80094e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009356:	4293      	cmp	r3, r2
 8009358:	f000 80a9 	beq.w	80094ae <HAL_TIM_ConfigClockSource+0x1ae>
 800935c:	4a61      	ldr	r2, [pc, #388]	; (80094e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800935e:	4293      	cmp	r3, r2
 8009360:	f200 80ae 	bhi.w	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009364:	4a60      	ldr	r2, [pc, #384]	; (80094e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009366:	4293      	cmp	r3, r2
 8009368:	f000 80a1 	beq.w	80094ae <HAL_TIM_ConfigClockSource+0x1ae>
 800936c:	4a5e      	ldr	r2, [pc, #376]	; (80094e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800936e:	4293      	cmp	r3, r2
 8009370:	f200 80a6 	bhi.w	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009374:	4a5d      	ldr	r2, [pc, #372]	; (80094ec <HAL_TIM_ConfigClockSource+0x1ec>)
 8009376:	4293      	cmp	r3, r2
 8009378:	f000 8099 	beq.w	80094ae <HAL_TIM_ConfigClockSource+0x1ae>
 800937c:	4a5b      	ldr	r2, [pc, #364]	; (80094ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800937e:	4293      	cmp	r3, r2
 8009380:	f200 809e 	bhi.w	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009384:	4a5a      	ldr	r2, [pc, #360]	; (80094f0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009386:	4293      	cmp	r3, r2
 8009388:	f000 8091 	beq.w	80094ae <HAL_TIM_ConfigClockSource+0x1ae>
 800938c:	4a58      	ldr	r2, [pc, #352]	; (80094f0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800938e:	4293      	cmp	r3, r2
 8009390:	f200 8096 	bhi.w	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009394:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009398:	f000 8089 	beq.w	80094ae <HAL_TIM_ConfigClockSource+0x1ae>
 800939c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80093a0:	f200 808e 	bhi.w	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80093a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093a8:	d03e      	beq.n	8009428 <HAL_TIM_ConfigClockSource+0x128>
 80093aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ae:	f200 8087 	bhi.w	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80093b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b6:	f000 8086 	beq.w	80094c6 <HAL_TIM_ConfigClockSource+0x1c6>
 80093ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093be:	d87f      	bhi.n	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80093c0:	2b70      	cmp	r3, #112	; 0x70
 80093c2:	d01a      	beq.n	80093fa <HAL_TIM_ConfigClockSource+0xfa>
 80093c4:	2b70      	cmp	r3, #112	; 0x70
 80093c6:	d87b      	bhi.n	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80093c8:	2b60      	cmp	r3, #96	; 0x60
 80093ca:	d050      	beq.n	800946e <HAL_TIM_ConfigClockSource+0x16e>
 80093cc:	2b60      	cmp	r3, #96	; 0x60
 80093ce:	d877      	bhi.n	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80093d0:	2b50      	cmp	r3, #80	; 0x50
 80093d2:	d03c      	beq.n	800944e <HAL_TIM_ConfigClockSource+0x14e>
 80093d4:	2b50      	cmp	r3, #80	; 0x50
 80093d6:	d873      	bhi.n	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80093d8:	2b40      	cmp	r3, #64	; 0x40
 80093da:	d058      	beq.n	800948e <HAL_TIM_ConfigClockSource+0x18e>
 80093dc:	2b40      	cmp	r3, #64	; 0x40
 80093de:	d86f      	bhi.n	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80093e0:	2b30      	cmp	r3, #48	; 0x30
 80093e2:	d064      	beq.n	80094ae <HAL_TIM_ConfigClockSource+0x1ae>
 80093e4:	2b30      	cmp	r3, #48	; 0x30
 80093e6:	d86b      	bhi.n	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80093e8:	2b20      	cmp	r3, #32
 80093ea:	d060      	beq.n	80094ae <HAL_TIM_ConfigClockSource+0x1ae>
 80093ec:	2b20      	cmp	r3, #32
 80093ee:	d867      	bhi.n	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d05c      	beq.n	80094ae <HAL_TIM_ConfigClockSource+0x1ae>
 80093f4:	2b10      	cmp	r3, #16
 80093f6:	d05a      	beq.n	80094ae <HAL_TIM_ConfigClockSource+0x1ae>
 80093f8:	e062      	b.n	80094c0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	6899      	ldr	r1, [r3, #8]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	f000 fda3 	bl	8009f54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800941c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	609a      	str	r2, [r3, #8]
      break;
 8009426:	e04f      	b.n	80094c8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6818      	ldr	r0, [r3, #0]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	6899      	ldr	r1, [r3, #8]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	f000 fd8c 	bl	8009f54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689a      	ldr	r2, [r3, #8]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800944a:	609a      	str	r2, [r3, #8]
      break;
 800944c:	e03c      	b.n	80094c8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	6859      	ldr	r1, [r3, #4]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	461a      	mov	r2, r3
 800945c:	f000 fcfe 	bl	8009e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2150      	movs	r1, #80	; 0x50
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fd57 	bl	8009f1a <TIM_ITRx_SetConfig>
      break;
 800946c:	e02c      	b.n	80094c8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	6859      	ldr	r1, [r3, #4]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	461a      	mov	r2, r3
 800947c:	f000 fd1d 	bl	8009eba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2160      	movs	r1, #96	; 0x60
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fd47 	bl	8009f1a <TIM_ITRx_SetConfig>
      break;
 800948c:	e01c      	b.n	80094c8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6818      	ldr	r0, [r3, #0]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	6859      	ldr	r1, [r3, #4]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	461a      	mov	r2, r3
 800949c:	f000 fcde 	bl	8009e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2140      	movs	r1, #64	; 0x40
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fd37 	bl	8009f1a <TIM_ITRx_SetConfig>
      break;
 80094ac:	e00c      	b.n	80094c8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4619      	mov	r1, r3
 80094b8:	4610      	mov	r0, r2
 80094ba:	f000 fd2e 	bl	8009f1a <TIM_ITRx_SetConfig>
      break;
 80094be:	e003      	b.n	80094c8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	73fb      	strb	r3, [r7, #15]
      break;
 80094c4:	e000      	b.n	80094c8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80094c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	00100070 	.word	0x00100070
 80094e8:	00100040 	.word	0x00100040
 80094ec:	00100030 	.word	0x00100030
 80094f0:	00100020 	.word	0x00100020

080094f4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009504:	2b01      	cmp	r3, #1
 8009506:	d101      	bne.n	800950c <HAL_TIM_SlaveConfigSynchro+0x18>
 8009508:	2302      	movs	r3, #2
 800950a:	e031      	b.n	8009570 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2202      	movs	r2, #2
 8009518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fbd8 	bl	8009cd4 <TIM_SlaveTimer_SetConfig>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d009      	beq.n	800953e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e018      	b.n	8009570 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68da      	ldr	r2, [r3, #12]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800954c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68da      	ldr	r2, [r3, #12]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800955c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a3c      	ldr	r2, [pc, #240]	; (80096cc <TIM_Base_SetConfig+0x104>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d00f      	beq.n	8009600 <TIM_Base_SetConfig+0x38>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095e6:	d00b      	beq.n	8009600 <TIM_Base_SetConfig+0x38>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a39      	ldr	r2, [pc, #228]	; (80096d0 <TIM_Base_SetConfig+0x108>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d007      	beq.n	8009600 <TIM_Base_SetConfig+0x38>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a38      	ldr	r2, [pc, #224]	; (80096d4 <TIM_Base_SetConfig+0x10c>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d003      	beq.n	8009600 <TIM_Base_SetConfig+0x38>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a37      	ldr	r2, [pc, #220]	; (80096d8 <TIM_Base_SetConfig+0x110>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d108      	bne.n	8009612 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a2d      	ldr	r2, [pc, #180]	; (80096cc <TIM_Base_SetConfig+0x104>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d01b      	beq.n	8009652 <TIM_Base_SetConfig+0x8a>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009620:	d017      	beq.n	8009652 <TIM_Base_SetConfig+0x8a>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a2a      	ldr	r2, [pc, #168]	; (80096d0 <TIM_Base_SetConfig+0x108>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d013      	beq.n	8009652 <TIM_Base_SetConfig+0x8a>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a29      	ldr	r2, [pc, #164]	; (80096d4 <TIM_Base_SetConfig+0x10c>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d00f      	beq.n	8009652 <TIM_Base_SetConfig+0x8a>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a28      	ldr	r2, [pc, #160]	; (80096d8 <TIM_Base_SetConfig+0x110>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d00b      	beq.n	8009652 <TIM_Base_SetConfig+0x8a>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a27      	ldr	r2, [pc, #156]	; (80096dc <TIM_Base_SetConfig+0x114>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d007      	beq.n	8009652 <TIM_Base_SetConfig+0x8a>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a26      	ldr	r2, [pc, #152]	; (80096e0 <TIM_Base_SetConfig+0x118>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d003      	beq.n	8009652 <TIM_Base_SetConfig+0x8a>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a25      	ldr	r2, [pc, #148]	; (80096e4 <TIM_Base_SetConfig+0x11c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d108      	bne.n	8009664 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	4313      	orrs	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	4313      	orrs	r3, r2
 8009670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a10      	ldr	r2, [pc, #64]	; (80096cc <TIM_Base_SetConfig+0x104>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00f      	beq.n	80096b0 <TIM_Base_SetConfig+0xe8>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a11      	ldr	r2, [pc, #68]	; (80096d8 <TIM_Base_SetConfig+0x110>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00b      	beq.n	80096b0 <TIM_Base_SetConfig+0xe8>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a10      	ldr	r2, [pc, #64]	; (80096dc <TIM_Base_SetConfig+0x114>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d007      	beq.n	80096b0 <TIM_Base_SetConfig+0xe8>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a0f      	ldr	r2, [pc, #60]	; (80096e0 <TIM_Base_SetConfig+0x118>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d003      	beq.n	80096b0 <TIM_Base_SetConfig+0xe8>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a0e      	ldr	r2, [pc, #56]	; (80096e4 <TIM_Base_SetConfig+0x11c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d103      	bne.n	80096b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	615a      	str	r2, [r3, #20]
}
 80096be:	bf00      	nop
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	40012c00 	.word	0x40012c00
 80096d0:	40000400 	.word	0x40000400
 80096d4:	40000800 	.word	0x40000800
 80096d8:	40013400 	.word	0x40013400
 80096dc:	40014000 	.word	0x40014000
 80096e0:	40014400 	.word	0x40014400
 80096e4:	40014800 	.word	0x40014800

080096e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	f023 0201 	bic.w	r2, r3, #1
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f023 0303 	bic.w	r3, r3, #3
 8009722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f023 0302 	bic.w	r3, r3, #2
 8009734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a2c      	ldr	r2, [pc, #176]	; (80097f4 <TIM_OC1_SetConfig+0x10c>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d00f      	beq.n	8009768 <TIM_OC1_SetConfig+0x80>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a2b      	ldr	r2, [pc, #172]	; (80097f8 <TIM_OC1_SetConfig+0x110>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d00b      	beq.n	8009768 <TIM_OC1_SetConfig+0x80>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a2a      	ldr	r2, [pc, #168]	; (80097fc <TIM_OC1_SetConfig+0x114>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d007      	beq.n	8009768 <TIM_OC1_SetConfig+0x80>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a29      	ldr	r2, [pc, #164]	; (8009800 <TIM_OC1_SetConfig+0x118>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d003      	beq.n	8009768 <TIM_OC1_SetConfig+0x80>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a28      	ldr	r2, [pc, #160]	; (8009804 <TIM_OC1_SetConfig+0x11c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d10c      	bne.n	8009782 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f023 0308 	bic.w	r3, r3, #8
 800976e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	4313      	orrs	r3, r2
 8009778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f023 0304 	bic.w	r3, r3, #4
 8009780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a1b      	ldr	r2, [pc, #108]	; (80097f4 <TIM_OC1_SetConfig+0x10c>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d00f      	beq.n	80097aa <TIM_OC1_SetConfig+0xc2>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a1a      	ldr	r2, [pc, #104]	; (80097f8 <TIM_OC1_SetConfig+0x110>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d00b      	beq.n	80097aa <TIM_OC1_SetConfig+0xc2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a19      	ldr	r2, [pc, #100]	; (80097fc <TIM_OC1_SetConfig+0x114>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d007      	beq.n	80097aa <TIM_OC1_SetConfig+0xc2>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a18      	ldr	r2, [pc, #96]	; (8009800 <TIM_OC1_SetConfig+0x118>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d003      	beq.n	80097aa <TIM_OC1_SetConfig+0xc2>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a17      	ldr	r2, [pc, #92]	; (8009804 <TIM_OC1_SetConfig+0x11c>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d111      	bne.n	80097ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	621a      	str	r2, [r3, #32]
}
 80097e8:	bf00      	nop
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	40012c00 	.word	0x40012c00
 80097f8:	40013400 	.word	0x40013400
 80097fc:	40014000 	.word	0x40014000
 8009800:	40014400 	.word	0x40014400
 8009804:	40014800 	.word	0x40014800

08009808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	f023 0210 	bic.w	r2, r3, #16
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800983a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	021b      	lsls	r3, r3, #8
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	4313      	orrs	r3, r2
 800984e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	f023 0320 	bic.w	r3, r3, #32
 8009856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	011b      	lsls	r3, r3, #4
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	4313      	orrs	r3, r2
 8009862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a28      	ldr	r2, [pc, #160]	; (8009908 <TIM_OC2_SetConfig+0x100>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d003      	beq.n	8009874 <TIM_OC2_SetConfig+0x6c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a27      	ldr	r2, [pc, #156]	; (800990c <TIM_OC2_SetConfig+0x104>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d10d      	bne.n	8009890 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800987a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800988e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a1d      	ldr	r2, [pc, #116]	; (8009908 <TIM_OC2_SetConfig+0x100>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d00f      	beq.n	80098b8 <TIM_OC2_SetConfig+0xb0>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a1c      	ldr	r2, [pc, #112]	; (800990c <TIM_OC2_SetConfig+0x104>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d00b      	beq.n	80098b8 <TIM_OC2_SetConfig+0xb0>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a1b      	ldr	r2, [pc, #108]	; (8009910 <TIM_OC2_SetConfig+0x108>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d007      	beq.n	80098b8 <TIM_OC2_SetConfig+0xb0>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a1a      	ldr	r2, [pc, #104]	; (8009914 <TIM_OC2_SetConfig+0x10c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d003      	beq.n	80098b8 <TIM_OC2_SetConfig+0xb0>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a19      	ldr	r2, [pc, #100]	; (8009918 <TIM_OC2_SetConfig+0x110>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d113      	bne.n	80098e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	4313      	orrs	r3, r2
 80098de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	621a      	str	r2, [r3, #32]
}
 80098fa:	bf00      	nop
 80098fc:	371c      	adds	r7, #28
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	40012c00 	.word	0x40012c00
 800990c:	40013400 	.word	0x40013400
 8009910:	40014000 	.word	0x40014000
 8009914:	40014400 	.word	0x40014400
 8009918:	40014800 	.word	0x40014800

0800991c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800994a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800994e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f023 0303 	bic.w	r3, r3, #3
 8009956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	4313      	orrs	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	021b      	lsls	r3, r3, #8
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	4313      	orrs	r3, r2
 8009974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a27      	ldr	r2, [pc, #156]	; (8009a18 <TIM_OC3_SetConfig+0xfc>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d003      	beq.n	8009986 <TIM_OC3_SetConfig+0x6a>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a26      	ldr	r2, [pc, #152]	; (8009a1c <TIM_OC3_SetConfig+0x100>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d10d      	bne.n	80099a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800998c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	4313      	orrs	r3, r2
 8009998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a1c      	ldr	r2, [pc, #112]	; (8009a18 <TIM_OC3_SetConfig+0xfc>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d00f      	beq.n	80099ca <TIM_OC3_SetConfig+0xae>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a1b      	ldr	r2, [pc, #108]	; (8009a1c <TIM_OC3_SetConfig+0x100>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d00b      	beq.n	80099ca <TIM_OC3_SetConfig+0xae>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a1a      	ldr	r2, [pc, #104]	; (8009a20 <TIM_OC3_SetConfig+0x104>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d007      	beq.n	80099ca <TIM_OC3_SetConfig+0xae>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a19      	ldr	r2, [pc, #100]	; (8009a24 <TIM_OC3_SetConfig+0x108>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d003      	beq.n	80099ca <TIM_OC3_SetConfig+0xae>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a18      	ldr	r2, [pc, #96]	; (8009a28 <TIM_OC3_SetConfig+0x10c>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d113      	bne.n	80099f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	011b      	lsls	r3, r3, #4
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	011b      	lsls	r3, r3, #4
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	621a      	str	r2, [r3, #32]
}
 8009a0c:	bf00      	nop
 8009a0e:	371c      	adds	r7, #28
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	40012c00 	.word	0x40012c00
 8009a1c:	40013400 	.word	0x40013400
 8009a20:	40014000 	.word	0x40014000
 8009a24:	40014400 	.word	0x40014400
 8009a28:	40014800 	.word	0x40014800

08009a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b087      	sub	sp, #28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	69db      	ldr	r3, [r3, #28]
 8009a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	021b      	lsls	r3, r3, #8
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	031b      	lsls	r3, r3, #12
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a28      	ldr	r2, [pc, #160]	; (8009b2c <TIM_OC4_SetConfig+0x100>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d003      	beq.n	8009a98 <TIM_OC4_SetConfig+0x6c>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a27      	ldr	r2, [pc, #156]	; (8009b30 <TIM_OC4_SetConfig+0x104>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d10d      	bne.n	8009ab4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	031b      	lsls	r3, r3, #12
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a1d      	ldr	r2, [pc, #116]	; (8009b2c <TIM_OC4_SetConfig+0x100>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d00f      	beq.n	8009adc <TIM_OC4_SetConfig+0xb0>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a1c      	ldr	r2, [pc, #112]	; (8009b30 <TIM_OC4_SetConfig+0x104>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d00b      	beq.n	8009adc <TIM_OC4_SetConfig+0xb0>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a1b      	ldr	r2, [pc, #108]	; (8009b34 <TIM_OC4_SetConfig+0x108>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d007      	beq.n	8009adc <TIM_OC4_SetConfig+0xb0>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a1a      	ldr	r2, [pc, #104]	; (8009b38 <TIM_OC4_SetConfig+0x10c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d003      	beq.n	8009adc <TIM_OC4_SetConfig+0xb0>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a19      	ldr	r2, [pc, #100]	; (8009b3c <TIM_OC4_SetConfig+0x110>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d113      	bne.n	8009b04 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ae2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009aea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	019b      	lsls	r3, r3, #6
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	019b      	lsls	r3, r3, #6
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	621a      	str	r2, [r3, #32]
}
 8009b1e:	bf00      	nop
 8009b20:	371c      	adds	r7, #28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	40012c00 	.word	0x40012c00
 8009b30:	40013400 	.word	0x40013400
 8009b34:	40014000 	.word	0x40014000
 8009b38:	40014400 	.word	0x40014400
 8009b3c:	40014800 	.word	0x40014800

08009b40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b087      	sub	sp, #28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009b84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	041b      	lsls	r3, r3, #16
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a17      	ldr	r2, [pc, #92]	; (8009bf4 <TIM_OC5_SetConfig+0xb4>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d00f      	beq.n	8009bba <TIM_OC5_SetConfig+0x7a>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a16      	ldr	r2, [pc, #88]	; (8009bf8 <TIM_OC5_SetConfig+0xb8>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d00b      	beq.n	8009bba <TIM_OC5_SetConfig+0x7a>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a15      	ldr	r2, [pc, #84]	; (8009bfc <TIM_OC5_SetConfig+0xbc>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d007      	beq.n	8009bba <TIM_OC5_SetConfig+0x7a>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a14      	ldr	r2, [pc, #80]	; (8009c00 <TIM_OC5_SetConfig+0xc0>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d003      	beq.n	8009bba <TIM_OC5_SetConfig+0x7a>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a13      	ldr	r2, [pc, #76]	; (8009c04 <TIM_OC5_SetConfig+0xc4>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d109      	bne.n	8009bce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	021b      	lsls	r3, r3, #8
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	621a      	str	r2, [r3, #32]
}
 8009be8:	bf00      	nop
 8009bea:	371c      	adds	r7, #28
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr
 8009bf4:	40012c00 	.word	0x40012c00
 8009bf8:	40013400 	.word	0x40013400
 8009bfc:	40014000 	.word	0x40014000
 8009c00:	40014400 	.word	0x40014400
 8009c04:	40014800 	.word	0x40014800

08009c08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	021b      	lsls	r3, r3, #8
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	051b      	lsls	r3, r3, #20
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a18      	ldr	r2, [pc, #96]	; (8009cc0 <TIM_OC6_SetConfig+0xb8>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d00f      	beq.n	8009c84 <TIM_OC6_SetConfig+0x7c>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a17      	ldr	r2, [pc, #92]	; (8009cc4 <TIM_OC6_SetConfig+0xbc>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d00b      	beq.n	8009c84 <TIM_OC6_SetConfig+0x7c>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a16      	ldr	r2, [pc, #88]	; (8009cc8 <TIM_OC6_SetConfig+0xc0>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d007      	beq.n	8009c84 <TIM_OC6_SetConfig+0x7c>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a15      	ldr	r2, [pc, #84]	; (8009ccc <TIM_OC6_SetConfig+0xc4>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d003      	beq.n	8009c84 <TIM_OC6_SetConfig+0x7c>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a14      	ldr	r2, [pc, #80]	; (8009cd0 <TIM_OC6_SetConfig+0xc8>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d109      	bne.n	8009c98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	695b      	ldr	r3, [r3, #20]
 8009c90:	029b      	lsls	r3, r3, #10
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	621a      	str	r2, [r3, #32]
}
 8009cb2:	bf00      	nop
 8009cb4:	371c      	adds	r7, #28
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	40012c00 	.word	0x40012c00
 8009cc4:	40013400 	.word	0x40013400
 8009cc8:	40014000 	.word	0x40014000
 8009ccc:	40014400 	.word	0x40014400
 8009cd0:	40014800 	.word	0x40014800

08009cd4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d06:	f023 0307 	bic.w	r3, r3, #7
 8009d0a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	4a4a      	ldr	r2, [pc, #296]	; (8009e4c <TIM_SlaveTimer_SetConfig+0x178>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	f000 808a 	beq.w	8009e3e <TIM_SlaveTimer_SetConfig+0x16a>
 8009d2a:	4a48      	ldr	r2, [pc, #288]	; (8009e4c <TIM_SlaveTimer_SetConfig+0x178>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	f200 8083 	bhi.w	8009e38 <TIM_SlaveTimer_SetConfig+0x164>
 8009d32:	4a47      	ldr	r2, [pc, #284]	; (8009e50 <TIM_SlaveTimer_SetConfig+0x17c>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	f000 8082 	beq.w	8009e3e <TIM_SlaveTimer_SetConfig+0x16a>
 8009d3a:	4a45      	ldr	r2, [pc, #276]	; (8009e50 <TIM_SlaveTimer_SetConfig+0x17c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d87b      	bhi.n	8009e38 <TIM_SlaveTimer_SetConfig+0x164>
 8009d40:	4a44      	ldr	r2, [pc, #272]	; (8009e54 <TIM_SlaveTimer_SetConfig+0x180>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d07b      	beq.n	8009e3e <TIM_SlaveTimer_SetConfig+0x16a>
 8009d46:	4a43      	ldr	r2, [pc, #268]	; (8009e54 <TIM_SlaveTimer_SetConfig+0x180>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d875      	bhi.n	8009e38 <TIM_SlaveTimer_SetConfig+0x164>
 8009d4c:	4a42      	ldr	r2, [pc, #264]	; (8009e58 <TIM_SlaveTimer_SetConfig+0x184>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d075      	beq.n	8009e3e <TIM_SlaveTimer_SetConfig+0x16a>
 8009d52:	4a41      	ldr	r2, [pc, #260]	; (8009e58 <TIM_SlaveTimer_SetConfig+0x184>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d86f      	bhi.n	8009e38 <TIM_SlaveTimer_SetConfig+0x164>
 8009d58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d5c:	d06f      	beq.n	8009e3e <TIM_SlaveTimer_SetConfig+0x16a>
 8009d5e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d62:	d869      	bhi.n	8009e38 <TIM_SlaveTimer_SetConfig+0x164>
 8009d64:	2b70      	cmp	r3, #112	; 0x70
 8009d66:	d01a      	beq.n	8009d9e <TIM_SlaveTimer_SetConfig+0xca>
 8009d68:	2b70      	cmp	r3, #112	; 0x70
 8009d6a:	d865      	bhi.n	8009e38 <TIM_SlaveTimer_SetConfig+0x164>
 8009d6c:	2b60      	cmp	r3, #96	; 0x60
 8009d6e:	d059      	beq.n	8009e24 <TIM_SlaveTimer_SetConfig+0x150>
 8009d70:	2b60      	cmp	r3, #96	; 0x60
 8009d72:	d861      	bhi.n	8009e38 <TIM_SlaveTimer_SetConfig+0x164>
 8009d74:	2b50      	cmp	r3, #80	; 0x50
 8009d76:	d04b      	beq.n	8009e10 <TIM_SlaveTimer_SetConfig+0x13c>
 8009d78:	2b50      	cmp	r3, #80	; 0x50
 8009d7a:	d85d      	bhi.n	8009e38 <TIM_SlaveTimer_SetConfig+0x164>
 8009d7c:	2b40      	cmp	r3, #64	; 0x40
 8009d7e:	d019      	beq.n	8009db4 <TIM_SlaveTimer_SetConfig+0xe0>
 8009d80:	2b40      	cmp	r3, #64	; 0x40
 8009d82:	d859      	bhi.n	8009e38 <TIM_SlaveTimer_SetConfig+0x164>
 8009d84:	2b30      	cmp	r3, #48	; 0x30
 8009d86:	d05a      	beq.n	8009e3e <TIM_SlaveTimer_SetConfig+0x16a>
 8009d88:	2b30      	cmp	r3, #48	; 0x30
 8009d8a:	d855      	bhi.n	8009e38 <TIM_SlaveTimer_SetConfig+0x164>
 8009d8c:	2b20      	cmp	r3, #32
 8009d8e:	d056      	beq.n	8009e3e <TIM_SlaveTimer_SetConfig+0x16a>
 8009d90:	2b20      	cmp	r3, #32
 8009d92:	d851      	bhi.n	8009e38 <TIM_SlaveTimer_SetConfig+0x164>
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d052      	beq.n	8009e3e <TIM_SlaveTimer_SetConfig+0x16a>
 8009d98:	2b10      	cmp	r3, #16
 8009d9a:	d050      	beq.n	8009e3e <TIM_SlaveTimer_SetConfig+0x16a>
 8009d9c:	e04c      	b.n	8009e38 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68d9      	ldr	r1, [r3, #12]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	689a      	ldr	r2, [r3, #8]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	f000 f8d1 	bl	8009f54 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009db2:	e045      	b.n	8009e40 <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b05      	cmp	r3, #5
 8009dba:	d004      	beq.n	8009dc6 <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009dc0:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8009dc4:	d101      	bne.n	8009dca <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e03b      	b.n	8009e42 <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6a1a      	ldr	r2, [r3, #32]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 0201 	bic.w	r2, r2, #1
 8009de0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009df0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	011b      	lsls	r3, r3, #4
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	621a      	str	r2, [r3, #32]
      break;
 8009e0e:	e017      	b.n	8009e40 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6818      	ldr	r0, [r3, #0]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	6899      	ldr	r1, [r3, #8]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	f000 f81d 	bl	8009e5c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009e22:	e00d      	b.n	8009e40 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	6899      	ldr	r1, [r3, #8]
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	461a      	mov	r2, r3
 8009e32:	f000 f842 	bl	8009eba <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009e36:	e003      	b.n	8009e40 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e3c:	e000      	b.n	8009e40 <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 8009e3e:	bf00      	nop
  }

  return status;
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	00100070 	.word	0x00100070
 8009e50:	00100040 	.word	0x00100040
 8009e54:	00100030 	.word	0x00100030
 8009e58:	00100020 	.word	0x00100020

08009e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6a1b      	ldr	r3, [r3, #32]
 8009e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	f023 0201 	bic.w	r2, r3, #1
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	011b      	lsls	r3, r3, #4
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f023 030a 	bic.w	r3, r3, #10
 8009e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	621a      	str	r2, [r3, #32]
}
 8009eae:	bf00      	nop
 8009eb0:	371c      	adds	r7, #28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eba:	b480      	push	{r7}
 8009ebc:	b087      	sub	sp, #28
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	60b9      	str	r1, [r7, #8]
 8009ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	f023 0210 	bic.w	r2, r3, #16
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	031b      	lsls	r3, r3, #12
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	011b      	lsls	r3, r3, #4
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	621a      	str	r2, [r3, #32]
}
 8009f0e:	bf00      	nop
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b085      	sub	sp, #20
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	f043 0307 	orr.w	r3, r3, #7
 8009f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	609a      	str	r2, [r3, #8]
}
 8009f48:	bf00      	nop
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	021a      	lsls	r2, r3, #8
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	431a      	orrs	r2, r3
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	697a      	ldr	r2, [r7, #20]
 8009f86:	609a      	str	r2, [r3, #8]
}
 8009f88:	bf00      	nop
 8009f8a:	371c      	adds	r7, #28
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f003 031f 	and.w	r3, r3, #31
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a1a      	ldr	r2, [r3, #32]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	43db      	mvns	r3, r3
 8009fb6:	401a      	ands	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a1a      	ldr	r2, [r3, #32]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f003 031f 	and.w	r3, r3, #31
 8009fc6:	6879      	ldr	r1, [r7, #4]
 8009fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	621a      	str	r2, [r3, #32]
}
 8009fd2:	bf00      	nop
 8009fd4:	371c      	adds	r7, #28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
	...

08009fe0 <HAL_TIMEx_ConfigCommutEvent>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                              uint32_t  CommutationSource)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE(htim->Instance, InputTrigger));

  __HAL_LOCK(htim);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d101      	bne.n	8009ffa <HAL_TIMEx_ConfigCommutEvent+0x1a>
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	e062      	b.n	800a0c0 <HAL_TIMEx_ConfigCommutEvent+0xe0>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      (InputTrigger == TIM_TS_ITR2)  || (InputTrigger == TIM_TS_ITR3) ||
      (InputTrigger == TIM_TS_ITR5)  || (InputTrigger == TIM_TS_ITR6) ||
      (InputTrigger == TIM_TS_ITR7)  || (InputTrigger == TIM_TS_ITR8) ||
      (InputTrigger == TIM_TS_ITR9)  || (InputTrigger == TIM_TS_ITR11))
#else
  if ((InputTrigger == TIM_TS_ITR0)  || (InputTrigger == TIM_TS_ITR1) ||
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d01c      	beq.n	800a042 <HAL_TIMEx_ConfigCommutEvent+0x62>
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2b10      	cmp	r3, #16
 800a00c:	d019      	beq.n	800a042 <HAL_TIMEx_ConfigCommutEvent+0x62>
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b20      	cmp	r3, #32
 800a012:	d016      	beq.n	800a042 <HAL_TIMEx_ConfigCommutEvent+0x62>
      (InputTrigger == TIM_TS_ITR2)  || (InputTrigger == TIM_TS_ITR3) ||
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b30      	cmp	r3, #48	; 0x30
 800a018:	d013      	beq.n	800a042 <HAL_TIMEx_ConfigCommutEvent+0x62>
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a020:	d00f      	beq.n	800a042 <HAL_TIMEx_ConfigCommutEvent+0x62>
      (InputTrigger == TIM_TS_ITR5)  || (InputTrigger == TIM_TS_ITR6) ||
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	4a29      	ldr	r2, [pc, #164]	; (800a0cc <HAL_TIMEx_ConfigCommutEvent+0xec>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d00b      	beq.n	800a042 <HAL_TIMEx_ConfigCommutEvent+0x62>
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	4a28      	ldr	r2, [pc, #160]	; (800a0d0 <HAL_TIMEx_ConfigCommutEvent+0xf0>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d007      	beq.n	800a042 <HAL_TIMEx_ConfigCommutEvent+0x62>
      (InputTrigger == TIM_TS_ITR7)  || (InputTrigger == TIM_TS_ITR8) ||
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	4a27      	ldr	r2, [pc, #156]	; (800a0d4 <HAL_TIMEx_ConfigCommutEvent+0xf4>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d003      	beq.n	800a042 <HAL_TIMEx_ConfigCommutEvent+0x62>
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4a26      	ldr	r2, [pc, #152]	; (800a0d8 <HAL_TIMEx_ConfigCommutEvent+0xf8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d111      	bne.n	800a066 <HAL_TIMEx_ConfigCommutEvent+0x86>
      (InputTrigger == TIM_TS_ITR11))
#endif /* TIM5 && TIM20 */
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	6812      	ldr	r2, [r2, #0]
 800a04c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a054:	6093      	str	r3, [r2, #8]
    htim->Instance->SMCR |= InputTrigger;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6899      	ldr	r1, [r3, #8]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	430a      	orrs	r2, r1
 800a064:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f042 0201 	orr.w	r2, r2, #1
 800a074:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f022 0204 	bic.w	r2, r2, #4
 800a084:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6859      	ldr	r1, [r3, #4]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	430a      	orrs	r2, r1
 800a094:	605a      	str	r2, [r3, #4]

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68da      	ldr	r2, [r3, #12]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f022 0220 	bic.w	r2, r2, #32
 800a0a4:	60da      	str	r2, [r3, #12]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68da      	ldr	r2, [r3, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0b4:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	00100020 	.word	0x00100020
 800a0d0:	00100030 	.word	0x00100030
 800a0d4:	00100040 	.word	0x00100040
 800a0d8:	00100070 	.word	0x00100070

0800a0dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d101      	bne.n	800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	e065      	b.n	800a1c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a2c      	ldr	r2, [pc, #176]	; (800a1cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d004      	beq.n	800a128 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a2b      	ldr	r2, [pc, #172]	; (800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d108      	bne.n	800a13a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a12e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	4313      	orrs	r3, r2
 800a138:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a144:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a1b      	ldr	r2, [pc, #108]	; (800a1cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d018      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a16a:	d013      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a18      	ldr	r2, [pc, #96]	; (800a1d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d00e      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a17      	ldr	r2, [pc, #92]	; (800a1d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d009      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a12      	ldr	r2, [pc, #72]	; (800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d004      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a13      	ldr	r2, [pc, #76]	; (800a1dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d10c      	bne.n	800a1ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a19a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	40012c00 	.word	0x40012c00
 800a1d0:	40013400 	.word	0x40013400
 800a1d4:	40000400 	.word	0x40000400
 800a1d8:	40000800 	.word	0x40000800
 800a1dc:	40014000 	.word	0x40014000

0800a1e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d101      	bne.n	800a1fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	e087      	b.n	800a30c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	4313      	orrs	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4313      	orrs	r3, r2
 800a23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	695b      	ldr	r3, [r3, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a262:	4313      	orrs	r3, r2
 800a264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	041b      	lsls	r3, r3, #16
 800a272:	4313      	orrs	r3, r2
 800a274:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a27      	ldr	r2, [pc, #156]	; (800a318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d004      	beq.n	800a28a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a25      	ldr	r2, [pc, #148]	; (800a31c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d106      	bne.n	800a298 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	4313      	orrs	r3, r2
 800a296:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a1e      	ldr	r2, [pc, #120]	; (800a318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d004      	beq.n	800a2ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a1d      	ldr	r2, [pc, #116]	; (800a31c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d126      	bne.n	800a2fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b6:	051b      	lsls	r3, r3, #20
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a0e      	ldr	r2, [pc, #56]	; (800a318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d004      	beq.n	800a2ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a0d      	ldr	r2, [pc, #52]	; (800a31c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d106      	bne.n	800a2fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	40012c00 	.word	0x40012c00
 800a31c:	40013400 	.word	0x40013400

0800a320 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800a320:	b480      	push	{r7}
 800a322:	b08b      	sub	sp, #44	; 0x2c
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d101      	bne.n	800a340 <HAL_TIMEx_ConfigBreakInput+0x20>
 800a33c:	2302      	movs	r3, #2
 800a33e:	e0c1      	b.n	800a4c4 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	2b0f      	cmp	r3, #15
 800a350:	d854      	bhi.n	800a3fc <HAL_TIMEx_ConfigBreakInput+0xdc>
 800a352:	a201      	add	r2, pc, #4	; (adr r2, 800a358 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800a354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a358:	0800a399 	.word	0x0800a399
 800a35c:	0800a3ad 	.word	0x0800a3ad
 800a360:	0800a3fd 	.word	0x0800a3fd
 800a364:	0800a3c1 	.word	0x0800a3c1
 800a368:	0800a3fd 	.word	0x0800a3fd
 800a36c:	0800a3fd 	.word	0x0800a3fd
 800a370:	0800a3fd 	.word	0x0800a3fd
 800a374:	0800a3d5 	.word	0x0800a3d5
 800a378:	0800a3fd 	.word	0x0800a3fd
 800a37c:	0800a3fd 	.word	0x0800a3fd
 800a380:	0800a3fd 	.word	0x0800a3fd
 800a384:	0800a3fd 	.word	0x0800a3fd
 800a388:	0800a3fd 	.word	0x0800a3fd
 800a38c:	0800a3fd 	.word	0x0800a3fd
 800a390:	0800a3fd 	.word	0x0800a3fd
 800a394:	0800a3e9 	.word	0x0800a3e9
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800a398:	2301      	movs	r3, #1
 800a39a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800a39c:	2300      	movs	r3, #0
 800a39e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800a3a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3a4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800a3a6:	2309      	movs	r3, #9
 800a3a8:	617b      	str	r3, [r7, #20]
      break;
 800a3aa:	e030      	b.n	800a40e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800a3b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3b8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800a3ba:	230a      	movs	r3, #10
 800a3bc:	617b      	str	r3, [r7, #20]
      break;
 800a3be:	e026      	b.n	800a40e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800a3c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3cc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800a3ce:	230b      	movs	r3, #11
 800a3d0:	617b      	str	r3, [r7, #20]
      break;
 800a3d2:	e01c      	b.n	800a40e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800a3d4:	2308      	movs	r3, #8
 800a3d6:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800a3dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3e0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800a3e2:	230c      	movs	r3, #12
 800a3e4:	617b      	str	r3, [r7, #20]
      break;
 800a3e6:	e012      	b.n	800a40e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800a3e8:	2310      	movs	r3, #16
 800a3ea:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800a3ec:	2304      	movs	r3, #4
 800a3ee:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800a3f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3f4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800a3f6:	230d      	movs	r3, #13
 800a3f8:	617b      	str	r3, [r7, #20]
      break;
 800a3fa:	e008      	b.n	800a40e <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800a400:	2300      	movs	r3, #0
 800a402:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	617b      	str	r3, [r7, #20]
      break;
 800a40c:	bf00      	nop
    }
  }

  switch (BreakInput)
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d003      	beq.n	800a41c <HAL_TIMEx_ConfigBreakInput+0xfc>
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b02      	cmp	r3, #2
 800a418:	d025      	beq.n	800a466 <HAL_TIMEx_ConfigBreakInput+0x146>
 800a41a:	e049      	b.n	800a4b0 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a422:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	43db      	mvns	r3, r3
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	4013      	ands	r3, r2
 800a42c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	409a      	lsls	r2, r3
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	4013      	ands	r3, r2
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	43db      	mvns	r3, r3
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	4013      	ands	r3, r2
 800a448:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	689a      	ldr	r2, [r3, #8]
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	409a      	lsls	r2, r3
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	4013      	ands	r3, r2
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	4313      	orrs	r3, r2
 800a45a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800a464:	e028      	b.n	800a4b8 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a46c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	43db      	mvns	r3, r3
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	4013      	ands	r3, r2
 800a476:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	409a      	lsls	r2, r3
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	4013      	ands	r3, r2
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	4313      	orrs	r3, r2
 800a488:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	43db      	mvns	r3, r3
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	4013      	ands	r3, r2
 800a492:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	689a      	ldr	r2, [r3, #8]
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	409a      	lsls	r2, r3
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	4013      	ands	r3, r2
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	693a      	ldr	r2, [r7, #16]
 800a4ac:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800a4ae:	e003      	b.n	800a4b8 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800a4b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	372c      	adds	r7, #44	; 0x2c
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a528:	bf00      	nop
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e042      	b.n	800a5f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7fa f883 	bl	800468c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2224      	movs	r2, #36	; 0x24
 800a58a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f022 0201 	bic.w	r2, r2, #1
 800a59c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f82c 	bl	800a5fc <UART_SetConfig>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d101      	bne.n	800a5ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e022      	b.n	800a5f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d002      	beq.n	800a5bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 faec 	bl	800ab94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	689a      	ldr	r2, [r3, #8]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f042 0201 	orr.w	r2, r2, #1
 800a5ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fb73 	bl	800acd8 <UART_CheckIdleState>
 800a5f2:	4603      	mov	r3, r0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a600:	b08c      	sub	sp, #48	; 0x30
 800a602:	af00      	add	r7, sp, #0
 800a604:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a606:	2300      	movs	r3, #0
 800a608:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	689a      	ldr	r2, [r3, #8]
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	431a      	orrs	r2, r3
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	431a      	orrs	r2, r3
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	4313      	orrs	r3, r2
 800a622:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	4bab      	ldr	r3, [pc, #684]	; (800a8d8 <UART_SetConfig+0x2dc>)
 800a62c:	4013      	ands	r3, r2
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	6812      	ldr	r2, [r2, #0]
 800a632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a634:	430b      	orrs	r3, r1
 800a636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	68da      	ldr	r2, [r3, #12]
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	430a      	orrs	r2, r1
 800a64c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4aa0      	ldr	r2, [pc, #640]	; (800a8dc <UART_SetConfig+0x2e0>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d004      	beq.n	800a668 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a664:	4313      	orrs	r3, r2
 800a666:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a672:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	6812      	ldr	r2, [r2, #0]
 800a67a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a67c:	430b      	orrs	r3, r1
 800a67e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a686:	f023 010f 	bic.w	r1, r3, #15
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	430a      	orrs	r2, r1
 800a694:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a91      	ldr	r2, [pc, #580]	; (800a8e0 <UART_SetConfig+0x2e4>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d125      	bne.n	800a6ec <UART_SetConfig+0xf0>
 800a6a0:	4b90      	ldr	r3, [pc, #576]	; (800a8e4 <UART_SetConfig+0x2e8>)
 800a6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a6:	f003 0303 	and.w	r3, r3, #3
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d81a      	bhi.n	800a6e4 <UART_SetConfig+0xe8>
 800a6ae:	a201      	add	r2, pc, #4	; (adr r2, 800a6b4 <UART_SetConfig+0xb8>)
 800a6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b4:	0800a6c5 	.word	0x0800a6c5
 800a6b8:	0800a6d5 	.word	0x0800a6d5
 800a6bc:	0800a6cd 	.word	0x0800a6cd
 800a6c0:	0800a6dd 	.word	0x0800a6dd
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ca:	e0d6      	b.n	800a87a <UART_SetConfig+0x27e>
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6d2:	e0d2      	b.n	800a87a <UART_SetConfig+0x27e>
 800a6d4:	2304      	movs	r3, #4
 800a6d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6da:	e0ce      	b.n	800a87a <UART_SetConfig+0x27e>
 800a6dc:	2308      	movs	r3, #8
 800a6de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6e2:	e0ca      	b.n	800a87a <UART_SetConfig+0x27e>
 800a6e4:	2310      	movs	r3, #16
 800a6e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ea:	e0c6      	b.n	800a87a <UART_SetConfig+0x27e>
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a7d      	ldr	r2, [pc, #500]	; (800a8e8 <UART_SetConfig+0x2ec>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d138      	bne.n	800a768 <UART_SetConfig+0x16c>
 800a6f6:	4b7b      	ldr	r3, [pc, #492]	; (800a8e4 <UART_SetConfig+0x2e8>)
 800a6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fc:	f003 030c 	and.w	r3, r3, #12
 800a700:	2b0c      	cmp	r3, #12
 800a702:	d82d      	bhi.n	800a760 <UART_SetConfig+0x164>
 800a704:	a201      	add	r2, pc, #4	; (adr r2, 800a70c <UART_SetConfig+0x110>)
 800a706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70a:	bf00      	nop
 800a70c:	0800a741 	.word	0x0800a741
 800a710:	0800a761 	.word	0x0800a761
 800a714:	0800a761 	.word	0x0800a761
 800a718:	0800a761 	.word	0x0800a761
 800a71c:	0800a751 	.word	0x0800a751
 800a720:	0800a761 	.word	0x0800a761
 800a724:	0800a761 	.word	0x0800a761
 800a728:	0800a761 	.word	0x0800a761
 800a72c:	0800a749 	.word	0x0800a749
 800a730:	0800a761 	.word	0x0800a761
 800a734:	0800a761 	.word	0x0800a761
 800a738:	0800a761 	.word	0x0800a761
 800a73c:	0800a759 	.word	0x0800a759
 800a740:	2300      	movs	r3, #0
 800a742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a746:	e098      	b.n	800a87a <UART_SetConfig+0x27e>
 800a748:	2302      	movs	r3, #2
 800a74a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a74e:	e094      	b.n	800a87a <UART_SetConfig+0x27e>
 800a750:	2304      	movs	r3, #4
 800a752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a756:	e090      	b.n	800a87a <UART_SetConfig+0x27e>
 800a758:	2308      	movs	r3, #8
 800a75a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a75e:	e08c      	b.n	800a87a <UART_SetConfig+0x27e>
 800a760:	2310      	movs	r3, #16
 800a762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a766:	e088      	b.n	800a87a <UART_SetConfig+0x27e>
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a5f      	ldr	r2, [pc, #380]	; (800a8ec <UART_SetConfig+0x2f0>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d125      	bne.n	800a7be <UART_SetConfig+0x1c2>
 800a772:	4b5c      	ldr	r3, [pc, #368]	; (800a8e4 <UART_SetConfig+0x2e8>)
 800a774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a778:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a77c:	2b30      	cmp	r3, #48	; 0x30
 800a77e:	d016      	beq.n	800a7ae <UART_SetConfig+0x1b2>
 800a780:	2b30      	cmp	r3, #48	; 0x30
 800a782:	d818      	bhi.n	800a7b6 <UART_SetConfig+0x1ba>
 800a784:	2b20      	cmp	r3, #32
 800a786:	d00a      	beq.n	800a79e <UART_SetConfig+0x1a2>
 800a788:	2b20      	cmp	r3, #32
 800a78a:	d814      	bhi.n	800a7b6 <UART_SetConfig+0x1ba>
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <UART_SetConfig+0x19a>
 800a790:	2b10      	cmp	r3, #16
 800a792:	d008      	beq.n	800a7a6 <UART_SetConfig+0x1aa>
 800a794:	e00f      	b.n	800a7b6 <UART_SetConfig+0x1ba>
 800a796:	2300      	movs	r3, #0
 800a798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a79c:	e06d      	b.n	800a87a <UART_SetConfig+0x27e>
 800a79e:	2302      	movs	r3, #2
 800a7a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7a4:	e069      	b.n	800a87a <UART_SetConfig+0x27e>
 800a7a6:	2304      	movs	r3, #4
 800a7a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7ac:	e065      	b.n	800a87a <UART_SetConfig+0x27e>
 800a7ae:	2308      	movs	r3, #8
 800a7b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7b4:	e061      	b.n	800a87a <UART_SetConfig+0x27e>
 800a7b6:	2310      	movs	r3, #16
 800a7b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7bc:	e05d      	b.n	800a87a <UART_SetConfig+0x27e>
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a4b      	ldr	r2, [pc, #300]	; (800a8f0 <UART_SetConfig+0x2f4>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d125      	bne.n	800a814 <UART_SetConfig+0x218>
 800a7c8:	4b46      	ldr	r3, [pc, #280]	; (800a8e4 <UART_SetConfig+0x2e8>)
 800a7ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a7d2:	2bc0      	cmp	r3, #192	; 0xc0
 800a7d4:	d016      	beq.n	800a804 <UART_SetConfig+0x208>
 800a7d6:	2bc0      	cmp	r3, #192	; 0xc0
 800a7d8:	d818      	bhi.n	800a80c <UART_SetConfig+0x210>
 800a7da:	2b80      	cmp	r3, #128	; 0x80
 800a7dc:	d00a      	beq.n	800a7f4 <UART_SetConfig+0x1f8>
 800a7de:	2b80      	cmp	r3, #128	; 0x80
 800a7e0:	d814      	bhi.n	800a80c <UART_SetConfig+0x210>
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d002      	beq.n	800a7ec <UART_SetConfig+0x1f0>
 800a7e6:	2b40      	cmp	r3, #64	; 0x40
 800a7e8:	d008      	beq.n	800a7fc <UART_SetConfig+0x200>
 800a7ea:	e00f      	b.n	800a80c <UART_SetConfig+0x210>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7f2:	e042      	b.n	800a87a <UART_SetConfig+0x27e>
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7fa:	e03e      	b.n	800a87a <UART_SetConfig+0x27e>
 800a7fc:	2304      	movs	r3, #4
 800a7fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a802:	e03a      	b.n	800a87a <UART_SetConfig+0x27e>
 800a804:	2308      	movs	r3, #8
 800a806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a80a:	e036      	b.n	800a87a <UART_SetConfig+0x27e>
 800a80c:	2310      	movs	r3, #16
 800a80e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a812:	e032      	b.n	800a87a <UART_SetConfig+0x27e>
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a30      	ldr	r2, [pc, #192]	; (800a8dc <UART_SetConfig+0x2e0>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d12a      	bne.n	800a874 <UART_SetConfig+0x278>
 800a81e:	4b31      	ldr	r3, [pc, #196]	; (800a8e4 <UART_SetConfig+0x2e8>)
 800a820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a82c:	d01a      	beq.n	800a864 <UART_SetConfig+0x268>
 800a82e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a832:	d81b      	bhi.n	800a86c <UART_SetConfig+0x270>
 800a834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a838:	d00c      	beq.n	800a854 <UART_SetConfig+0x258>
 800a83a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a83e:	d815      	bhi.n	800a86c <UART_SetConfig+0x270>
 800a840:	2b00      	cmp	r3, #0
 800a842:	d003      	beq.n	800a84c <UART_SetConfig+0x250>
 800a844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a848:	d008      	beq.n	800a85c <UART_SetConfig+0x260>
 800a84a:	e00f      	b.n	800a86c <UART_SetConfig+0x270>
 800a84c:	2300      	movs	r3, #0
 800a84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a852:	e012      	b.n	800a87a <UART_SetConfig+0x27e>
 800a854:	2302      	movs	r3, #2
 800a856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a85a:	e00e      	b.n	800a87a <UART_SetConfig+0x27e>
 800a85c:	2304      	movs	r3, #4
 800a85e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a862:	e00a      	b.n	800a87a <UART_SetConfig+0x27e>
 800a864:	2308      	movs	r3, #8
 800a866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a86a:	e006      	b.n	800a87a <UART_SetConfig+0x27e>
 800a86c:	2310      	movs	r3, #16
 800a86e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a872:	e002      	b.n	800a87a <UART_SetConfig+0x27e>
 800a874:	2310      	movs	r3, #16
 800a876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a17      	ldr	r2, [pc, #92]	; (800a8dc <UART_SetConfig+0x2e0>)
 800a880:	4293      	cmp	r3, r2
 800a882:	f040 80a8 	bne.w	800a9d6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a886:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a88a:	2b08      	cmp	r3, #8
 800a88c:	d834      	bhi.n	800a8f8 <UART_SetConfig+0x2fc>
 800a88e:	a201      	add	r2, pc, #4	; (adr r2, 800a894 <UART_SetConfig+0x298>)
 800a890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a894:	0800a8b9 	.word	0x0800a8b9
 800a898:	0800a8f9 	.word	0x0800a8f9
 800a89c:	0800a8c1 	.word	0x0800a8c1
 800a8a0:	0800a8f9 	.word	0x0800a8f9
 800a8a4:	0800a8c7 	.word	0x0800a8c7
 800a8a8:	0800a8f9 	.word	0x0800a8f9
 800a8ac:	0800a8f9 	.word	0x0800a8f9
 800a8b0:	0800a8f9 	.word	0x0800a8f9
 800a8b4:	0800a8cf 	.word	0x0800a8cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8b8:	f7fd fe34 	bl	8008524 <HAL_RCC_GetPCLK1Freq>
 800a8bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8be:	e021      	b.n	800a904 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8c0:	4b0c      	ldr	r3, [pc, #48]	; (800a8f4 <UART_SetConfig+0x2f8>)
 800a8c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8c4:	e01e      	b.n	800a904 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8c6:	f7fd fdbf 	bl	8008448 <HAL_RCC_GetSysClockFreq>
 800a8ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8cc:	e01a      	b.n	800a904 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8d4:	e016      	b.n	800a904 <UART_SetConfig+0x308>
 800a8d6:	bf00      	nop
 800a8d8:	cfff69f3 	.word	0xcfff69f3
 800a8dc:	40008000 	.word	0x40008000
 800a8e0:	40013800 	.word	0x40013800
 800a8e4:	40021000 	.word	0x40021000
 800a8e8:	40004400 	.word	0x40004400
 800a8ec:	40004800 	.word	0x40004800
 800a8f0:	40004c00 	.word	0x40004c00
 800a8f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a902:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 812a 	beq.w	800ab60 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a910:	4a9e      	ldr	r2, [pc, #632]	; (800ab8c <UART_SetConfig+0x590>)
 800a912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a916:	461a      	mov	r2, r3
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a91e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	4613      	mov	r3, r2
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	4413      	add	r3, r2
 800a92a:	69ba      	ldr	r2, [r7, #24]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d305      	bcc.n	800a93c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d903      	bls.n	800a944 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a942:	e10d      	b.n	800ab60 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	2200      	movs	r2, #0
 800a948:	60bb      	str	r3, [r7, #8]
 800a94a:	60fa      	str	r2, [r7, #12]
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a950:	4a8e      	ldr	r2, [pc, #568]	; (800ab8c <UART_SetConfig+0x590>)
 800a952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a956:	b29b      	uxth	r3, r3
 800a958:	2200      	movs	r2, #0
 800a95a:	603b      	str	r3, [r7, #0]
 800a95c:	607a      	str	r2, [r7, #4]
 800a95e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a962:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a966:	f7f5 ff65 	bl	8000834 <__aeabi_uldivmod>
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4610      	mov	r0, r2
 800a970:	4619      	mov	r1, r3
 800a972:	f04f 0200 	mov.w	r2, #0
 800a976:	f04f 0300 	mov.w	r3, #0
 800a97a:	020b      	lsls	r3, r1, #8
 800a97c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a980:	0202      	lsls	r2, r0, #8
 800a982:	6979      	ldr	r1, [r7, #20]
 800a984:	6849      	ldr	r1, [r1, #4]
 800a986:	0849      	lsrs	r1, r1, #1
 800a988:	2000      	movs	r0, #0
 800a98a:	460c      	mov	r4, r1
 800a98c:	4605      	mov	r5, r0
 800a98e:	eb12 0804 	adds.w	r8, r2, r4
 800a992:	eb43 0905 	adc.w	r9, r3, r5
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	469a      	mov	sl, r3
 800a99e:	4693      	mov	fp, r2
 800a9a0:	4652      	mov	r2, sl
 800a9a2:	465b      	mov	r3, fp
 800a9a4:	4640      	mov	r0, r8
 800a9a6:	4649      	mov	r1, r9
 800a9a8:	f7f5 ff44 	bl	8000834 <__aeabi_uldivmod>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9ba:	d308      	bcc.n	800a9ce <UART_SetConfig+0x3d2>
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9c2:	d204      	bcs.n	800a9ce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6a3a      	ldr	r2, [r7, #32]
 800a9ca:	60da      	str	r2, [r3, #12]
 800a9cc:	e0c8      	b.n	800ab60 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a9d4:	e0c4      	b.n	800ab60 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	69db      	ldr	r3, [r3, #28]
 800a9da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9de:	d167      	bne.n	800aab0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a9e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a9e4:	2b08      	cmp	r3, #8
 800a9e6:	d828      	bhi.n	800aa3a <UART_SetConfig+0x43e>
 800a9e8:	a201      	add	r2, pc, #4	; (adr r2, 800a9f0 <UART_SetConfig+0x3f4>)
 800a9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ee:	bf00      	nop
 800a9f0:	0800aa15 	.word	0x0800aa15
 800a9f4:	0800aa1d 	.word	0x0800aa1d
 800a9f8:	0800aa25 	.word	0x0800aa25
 800a9fc:	0800aa3b 	.word	0x0800aa3b
 800aa00:	0800aa2b 	.word	0x0800aa2b
 800aa04:	0800aa3b 	.word	0x0800aa3b
 800aa08:	0800aa3b 	.word	0x0800aa3b
 800aa0c:	0800aa3b 	.word	0x0800aa3b
 800aa10:	0800aa33 	.word	0x0800aa33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa14:	f7fd fd86 	bl	8008524 <HAL_RCC_GetPCLK1Freq>
 800aa18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa1a:	e014      	b.n	800aa46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa1c:	f7fd fd98 	bl	8008550 <HAL_RCC_GetPCLK2Freq>
 800aa20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa22:	e010      	b.n	800aa46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa24:	4b5a      	ldr	r3, [pc, #360]	; (800ab90 <UART_SetConfig+0x594>)
 800aa26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aa28:	e00d      	b.n	800aa46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa2a:	f7fd fd0d 	bl	8008448 <HAL_RCC_GetSysClockFreq>
 800aa2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa30:	e009      	b.n	800aa46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aa38:	e005      	b.n	800aa46 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aa44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f000 8089 	beq.w	800ab60 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa52:	4a4e      	ldr	r2, [pc, #312]	; (800ab8c <UART_SetConfig+0x590>)
 800aa54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa60:	005a      	lsls	r2, r3, #1
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	085b      	lsrs	r3, r3, #1
 800aa68:	441a      	add	r2, r3
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa74:	6a3b      	ldr	r3, [r7, #32]
 800aa76:	2b0f      	cmp	r3, #15
 800aa78:	d916      	bls.n	800aaa8 <UART_SetConfig+0x4ac>
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa80:	d212      	bcs.n	800aaa8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	f023 030f 	bic.w	r3, r3, #15
 800aa8a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
 800aa8e:	085b      	lsrs	r3, r3, #1
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	f003 0307 	and.w	r3, r3, #7
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	8bfb      	ldrh	r3, [r7, #30]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	8bfa      	ldrh	r2, [r7, #30]
 800aaa4:	60da      	str	r2, [r3, #12]
 800aaa6:	e05b      	b.n	800ab60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aaae:	e057      	b.n	800ab60 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aab0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aab4:	2b08      	cmp	r3, #8
 800aab6:	d828      	bhi.n	800ab0a <UART_SetConfig+0x50e>
 800aab8:	a201      	add	r2, pc, #4	; (adr r2, 800aac0 <UART_SetConfig+0x4c4>)
 800aaba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabe:	bf00      	nop
 800aac0:	0800aae5 	.word	0x0800aae5
 800aac4:	0800aaed 	.word	0x0800aaed
 800aac8:	0800aaf5 	.word	0x0800aaf5
 800aacc:	0800ab0b 	.word	0x0800ab0b
 800aad0:	0800aafb 	.word	0x0800aafb
 800aad4:	0800ab0b 	.word	0x0800ab0b
 800aad8:	0800ab0b 	.word	0x0800ab0b
 800aadc:	0800ab0b 	.word	0x0800ab0b
 800aae0:	0800ab03 	.word	0x0800ab03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aae4:	f7fd fd1e 	bl	8008524 <HAL_RCC_GetPCLK1Freq>
 800aae8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aaea:	e014      	b.n	800ab16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaec:	f7fd fd30 	bl	8008550 <HAL_RCC_GetPCLK2Freq>
 800aaf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aaf2:	e010      	b.n	800ab16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aaf4:	4b26      	ldr	r3, [pc, #152]	; (800ab90 <UART_SetConfig+0x594>)
 800aaf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aaf8:	e00d      	b.n	800ab16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aafa:	f7fd fca5 	bl	8008448 <HAL_RCC_GetSysClockFreq>
 800aafe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab00:	e009      	b.n	800ab16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ab08:	e005      	b.n	800ab16 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ab14:	bf00      	nop
    }

    if (pclk != 0U)
 800ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d021      	beq.n	800ab60 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab20:	4a1a      	ldr	r2, [pc, #104]	; (800ab8c <UART_SetConfig+0x590>)
 800ab22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab26:	461a      	mov	r2, r3
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	085b      	lsrs	r3, r3, #1
 800ab34:	441a      	add	r2, r3
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	2b0f      	cmp	r3, #15
 800ab44:	d909      	bls.n	800ab5a <UART_SetConfig+0x55e>
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab4c:	d205      	bcs.n	800ab5a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	60da      	str	r2, [r3, #12]
 800ab58:	e002      	b.n	800ab60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	2200      	movs	r2, #0
 800ab74:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ab7c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3730      	adds	r7, #48	; 0x30
 800ab84:	46bd      	mov	sp, r7
 800ab86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab8a:	bf00      	nop
 800ab8c:	0800ba10 	.word	0x0800ba10
 800ab90:	00f42400 	.word	0x00f42400

0800ab94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba0:	f003 0301 	and.w	r3, r3, #1
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00a      	beq.n	800abbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	430a      	orrs	r2, r1
 800abbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc2:	f003 0302 	and.w	r3, r3, #2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00a      	beq.n	800abe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	430a      	orrs	r2, r1
 800abde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe4:	f003 0304 	and.w	r3, r3, #4
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00a      	beq.n	800ac02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac06:	f003 0308 	and.w	r3, r3, #8
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00a      	beq.n	800ac24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	430a      	orrs	r2, r1
 800ac22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac28:	f003 0310 	and.w	r3, r3, #16
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00a      	beq.n	800ac46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	430a      	orrs	r2, r1
 800ac44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4a:	f003 0320 	and.w	r3, r3, #32
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00a      	beq.n	800ac68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	430a      	orrs	r2, r1
 800ac66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d01a      	beq.n	800acaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	430a      	orrs	r2, r1
 800ac88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac92:	d10a      	bne.n	800acaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	430a      	orrs	r2, r1
 800aca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00a      	beq.n	800accc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	430a      	orrs	r2, r1
 800acca:	605a      	str	r2, [r3, #4]
  }
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af02      	add	r7, sp, #8
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ace8:	f7fa f8ac 	bl	8004e44 <HAL_GetTick>
 800acec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 0308 	and.w	r3, r3, #8
 800acf8:	2b08      	cmp	r3, #8
 800acfa:	d10e      	bne.n	800ad1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f82f 	bl	800ad6e <UART_WaitOnFlagUntilTimeout>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d001      	beq.n	800ad1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e025      	b.n	800ad66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0304 	and.w	r3, r3, #4
 800ad24:	2b04      	cmp	r3, #4
 800ad26:	d10e      	bne.n	800ad46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f819 	bl	800ad6e <UART_WaitOnFlagUntilTimeout>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad42:	2303      	movs	r3, #3
 800ad44:	e00f      	b.n	800ad66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2220      	movs	r2, #32
 800ad4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2220      	movs	r2, #32
 800ad52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b09c      	sub	sp, #112	; 0x70
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	603b      	str	r3, [r7, #0]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad7e:	e0a9      	b.n	800aed4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad86:	f000 80a5 	beq.w	800aed4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad8a:	f7fa f85b 	bl	8004e44 <HAL_GetTick>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d302      	bcc.n	800ada0 <UART_WaitOnFlagUntilTimeout+0x32>
 800ad9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d140      	bne.n	800ae22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ada8:	e853 3f00 	ldrex	r3, [r3]
 800adac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800adae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800adb4:	667b      	str	r3, [r7, #100]	; 0x64
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adc0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800adc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800adc6:	e841 2300 	strex	r3, r2, [r1]
 800adca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800adcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1e6      	bne.n	800ada0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3308      	adds	r3, #8
 800add8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800addc:	e853 3f00 	ldrex	r3, [r3]
 800ade0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ade2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade4:	f023 0301 	bic.w	r3, r3, #1
 800ade8:	663b      	str	r3, [r7, #96]	; 0x60
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3308      	adds	r3, #8
 800adf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800adf2:	64ba      	str	r2, [r7, #72]	; 0x48
 800adf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800adf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adfa:	e841 2300 	strex	r3, r2, [r1]
 800adfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ae00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1e5      	bne.n	800add2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2220      	movs	r2, #32
 800ae0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2220      	movs	r2, #32
 800ae12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	e069      	b.n	800aef6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d051      	beq.n	800aed4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	69db      	ldr	r3, [r3, #28]
 800ae36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae3e:	d149      	bne.n	800aed4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae52:	e853 3f00 	ldrex	r3, [r3]
 800ae56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	461a      	mov	r2, r3
 800ae66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae68:	637b      	str	r3, [r7, #52]	; 0x34
 800ae6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae70:	e841 2300 	strex	r3, r2, [r1]
 800ae74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1e6      	bne.n	800ae4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	3308      	adds	r3, #8
 800ae82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	e853 3f00 	ldrex	r3, [r3]
 800ae8a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	f023 0301 	bic.w	r3, r3, #1
 800ae92:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	3308      	adds	r3, #8
 800ae9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae9c:	623a      	str	r2, [r7, #32]
 800ae9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea0:	69f9      	ldr	r1, [r7, #28]
 800aea2:	6a3a      	ldr	r2, [r7, #32]
 800aea4:	e841 2300 	strex	r3, r2, [r1]
 800aea8:	61bb      	str	r3, [r7, #24]
   return(result);
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1e5      	bne.n	800ae7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2220      	movs	r2, #32
 800aeb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2220      	movs	r2, #32
 800aebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2220      	movs	r2, #32
 800aec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e010      	b.n	800aef6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	69da      	ldr	r2, [r3, #28]
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	4013      	ands	r3, r2
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	bf0c      	ite	eq
 800aee4:	2301      	moveq	r3, #1
 800aee6:	2300      	movne	r3, #0
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	461a      	mov	r2, r3
 800aeec:	79fb      	ldrb	r3, [r7, #7]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	f43f af46 	beq.w	800ad80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3770      	adds	r7, #112	; 0x70
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aefe:	b480      	push	{r7}
 800af00:	b085      	sub	sp, #20
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d101      	bne.n	800af14 <HAL_UARTEx_DisableFifoMode+0x16>
 800af10:	2302      	movs	r3, #2
 800af12:	e027      	b.n	800af64 <HAL_UARTEx_DisableFifoMode+0x66>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2224      	movs	r2, #36	; 0x24
 800af20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f022 0201 	bic.w	r2, r2, #1
 800af3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800af42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2220      	movs	r2, #32
 800af56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af80:	2b01      	cmp	r3, #1
 800af82:	d101      	bne.n	800af88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af84:	2302      	movs	r3, #2
 800af86:	e02d      	b.n	800afe4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2224      	movs	r2, #36	; 0x24
 800af94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f022 0201 	bic.w	r2, r2, #1
 800afae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	430a      	orrs	r2, r1
 800afc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 f84f 	bl	800b068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2220      	movs	r2, #32
 800afd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800affc:	2b01      	cmp	r3, #1
 800affe:	d101      	bne.n	800b004 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b000:	2302      	movs	r3, #2
 800b002:	e02d      	b.n	800b060 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2224      	movs	r2, #36	; 0x24
 800b010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f022 0201 	bic.w	r2, r2, #1
 800b02a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	430a      	orrs	r2, r1
 800b03e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 f811 	bl	800b068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2220      	movs	r2, #32
 800b052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b074:	2b00      	cmp	r3, #0
 800b076:	d108      	bne.n	800b08a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b088:	e031      	b.n	800b0ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b08a:	2308      	movs	r3, #8
 800b08c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b08e:	2308      	movs	r3, #8
 800b090:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	0e5b      	lsrs	r3, r3, #25
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	f003 0307 	and.w	r3, r3, #7
 800b0a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	0f5b      	lsrs	r3, r3, #29
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	f003 0307 	and.w	r3, r3, #7
 800b0b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0b2:	7bbb      	ldrb	r3, [r7, #14]
 800b0b4:	7b3a      	ldrb	r2, [r7, #12]
 800b0b6:	4911      	ldr	r1, [pc, #68]	; (800b0fc <UARTEx_SetNbDataToProcess+0x94>)
 800b0b8:	5c8a      	ldrb	r2, [r1, r2]
 800b0ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0be:	7b3a      	ldrb	r2, [r7, #12]
 800b0c0:	490f      	ldr	r1, [pc, #60]	; (800b100 <UARTEx_SetNbDataToProcess+0x98>)
 800b0c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
 800b0d2:	7b7a      	ldrb	r2, [r7, #13]
 800b0d4:	4909      	ldr	r1, [pc, #36]	; (800b0fc <UARTEx_SetNbDataToProcess+0x94>)
 800b0d6:	5c8a      	ldrb	r2, [r1, r2]
 800b0d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0dc:	7b7a      	ldrb	r2, [r7, #13]
 800b0de:	4908      	ldr	r1, [pc, #32]	; (800b100 <UARTEx_SetNbDataToProcess+0x98>)
 800b0e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b0ee:	bf00      	nop
 800b0f0:	3714      	adds	r7, #20
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	0800ba28 	.word	0x0800ba28
 800b100:	0800ba30 	.word	0x0800ba30

0800b104 <FCP_Init>:
 * @todo Complete documentation
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  pHandle->RxTimeoutCountdown = 0;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	825a      	strh	r2, [r3, #18]

  pHandle->TxFrame.Code = 0x0;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	751a      	strb	r2, [r3, #20]
  pHandle->TxFrame.Size = 0;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	755a      	strb	r2, [r3, #21]
  pHandle->TxFrame.FrameCRC = 0;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pHandle->TxFrameLevel = 0;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  pHandle->RxFrame.Code = 0x0;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  pHandle->RxFrame.Size = 0;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
}
 800b15e:	bf00      	nop
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <FCP_SetClient>:
__weak void FCP_SetClient( FCP_Handle_t * pHandle,
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
 800b16a:	b480      	push	{r7}
 800b16c:	b085      	sub	sp, #20
 800b16e:	af00      	add	r7, sp, #0
 800b170:	60f8      	str	r0, [r7, #12]
 800b172:	60b9      	str	r1, [r7, #8]
 800b174:	607a      	str	r2, [r7, #4]
 800b176:	603b      	str	r3, [r7, #0]
  if ( MC_NULL != pHandle )
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00b      	beq.n	800b196 <FCP_SetClient+0x2c>
  {
    pHandle->ClientEntity = pClient;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	601a      	str	r2, [r3, #0]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	605a      	str	r2, [r3, #4]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	683a      	ldr	r2, [r7, #0]
 800b18e:	609a      	str	r2, [r3, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	69ba      	ldr	r2, [r7, #24]
 800b194:	60da      	str	r2, [r3, #12]
  }
}
 800b196:	bf00      	nop
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <FCP_CalcCRC>:
    pHandle->RxTimeout = Timeout;
  }
}

__weak uint8_t FCP_CalcCRC( FCP_Frame_t * pFrame )
{
 800b1a2:	b480      	push	{r7}
 800b1a4:	b085      	sub	sp, #20
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  uint8_t nCRC = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	73fb      	strb	r3, [r7, #15]
  uint16_t nSum = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	81bb      	strh	r3, [r7, #12]
  uint8_t idx;

  if( MC_NULL != pFrame )
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d027      	beq.n	800b208 <FCP_CalcCRC+0x66>
  {
    nSum += pFrame->Code;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	89bb      	ldrh	r3, [r7, #12]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	81bb      	strh	r3, [r7, #12]
    nSum += pFrame->Size;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	785b      	ldrb	r3, [r3, #1]
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	89bb      	ldrh	r3, [r7, #12]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	81bb      	strh	r3, [r7, #12]

    for ( idx = 0; idx < pFrame->Size; idx++ )
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	72fb      	strb	r3, [r7, #11]
 800b1d4:	e00a      	b.n	800b1ec <FCP_CalcCRC+0x4a>
    {
      nSum += pFrame->Buffer[idx];
 800b1d6:	7afb      	ldrb	r3, [r7, #11]
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	4413      	add	r3, r2
 800b1dc:	789b      	ldrb	r3, [r3, #2]
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	89bb      	ldrh	r3, [r7, #12]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	81bb      	strh	r3, [r7, #12]
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800b1e6:	7afb      	ldrb	r3, [r7, #11]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	72fb      	strb	r3, [r7, #11]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	785b      	ldrb	r3, [r3, #1]
 800b1f0:	7afa      	ldrb	r2, [r7, #11]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d3ef      	bcc.n	800b1d6 <FCP_CalcCRC+0x34>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
 800b1f6:	89bb      	ldrh	r3, [r7, #12]
 800b1f8:	73fb      	strb	r3, [r7, #15]
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 800b1fa:	89bb      	ldrh	r3, [r7, #12]
 800b1fc:	0a1b      	lsrs	r3, r3, #8
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	b2da      	uxtb	r2, r3
 800b202:	7bfb      	ldrb	r3, [r7, #15]
 800b204:	4413      	add	r3, r2
 800b206:	73fb      	strb	r3, [r7, #15]
  }

  return nCRC ;
 800b208:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <LL_GPIO_SetPinPull>:
{
 800b216:	b480      	push	{r7}
 800b218:	b08b      	sub	sp, #44	; 0x2c
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	60b9      	str	r1, [r7, #8]
 800b220:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	68da      	ldr	r2, [r3, #12]
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	fa93 f3a3 	rbit	r3, r3
 800b230:	613b      	str	r3, [r7, #16]
  return result;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d101      	bne.n	800b240 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b23c:	2320      	movs	r3, #32
 800b23e:	e003      	b.n	800b248 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	fab3 f383 	clz	r3, r3
 800b246:	b2db      	uxtb	r3, r3
 800b248:	005b      	lsls	r3, r3, #1
 800b24a:	2103      	movs	r1, #3
 800b24c:	fa01 f303 	lsl.w	r3, r1, r3
 800b250:	43db      	mvns	r3, r3
 800b252:	401a      	ands	r2, r3
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	fa93 f3a3 	rbit	r3, r3
 800b25e:	61fb      	str	r3, [r7, #28]
  return result;
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	2b00      	cmp	r3, #0
 800b268:	d101      	bne.n	800b26e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b26a:	2320      	movs	r3, #32
 800b26c:	e003      	b.n	800b276 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	fab3 f383 	clz	r3, r3
 800b274:	b2db      	uxtb	r3, r3
 800b276:	005b      	lsls	r3, r3, #1
 800b278:	6879      	ldr	r1, [r7, #4]
 800b27a:	fa01 f303 	lsl.w	r3, r1, r3
 800b27e:	431a      	orrs	r2, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	60da      	str	r2, [r3, #12]
}
 800b284:	bf00      	nop
 800b286:	372c      	adds	r7, #44	; 0x2c
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <BSP_GPIO_Init>:
  * @brief  Initialize GPIO
  * @param None
  * @retval BSP status
  */
int32_t BSP_GPIO_Init(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b296:	2300      	movs	r3, #0
 800b298:	607b      	str	r3, [r7, #4]

  if (hgpio[0].peripheral_is_initialized == 0)
 800b29a:	4b16      	ldr	r3, [pc, #88]	; (800b2f4 <BSP_GPIO_Init+0x64>)
 800b29c:	7e1b      	ldrb	r3, [r3, #24]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d123      	bne.n	800b2ea <BSP_GPIO_Init+0x5a>
  {
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2a2:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <BSP_GPIO_Init+0x68>)
 800b2a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2a6:	4a14      	ldr	r2, [pc, #80]	; (800b2f8 <BSP_GPIO_Init+0x68>)
 800b2a8:	f043 0302 	orr.w	r3, r3, #2
 800b2ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2ae:	4b12      	ldr	r3, [pc, #72]	; (800b2f8 <BSP_GPIO_Init+0x68>)
 800b2b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	603b      	str	r3, [r7, #0]
 800b2b8:	683b      	ldr	r3, [r7, #0]
  
    /* Configure GPIO pins : STBY_RESET_Pin */
    hgpio[0].peripheral = GPIOB;
 800b2ba:	4b0e      	ldr	r3, [pc, #56]	; (800b2f4 <BSP_GPIO_Init+0x64>)
 800b2bc:	4a0f      	ldr	r2, [pc, #60]	; (800b2fc <BSP_GPIO_Init+0x6c>)
 800b2be:	601a      	str	r2, [r3, #0]
    hgpio[0].peripheral_configuration.Pin = STBY_RESET_Pin;
 800b2c0:	4b0c      	ldr	r3, [pc, #48]	; (800b2f4 <BSP_GPIO_Init+0x64>)
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	605a      	str	r2, [r3, #4]
    hgpio[0].peripheral_configuration.Mode = GPIO_MODE_OUTPUT_PP;
 800b2c6:	4b0b      	ldr	r3, [pc, #44]	; (800b2f4 <BSP_GPIO_Init+0x64>)
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	609a      	str	r2, [r3, #8]
    hgpio[0].peripheral_configuration.Pull = GPIO_PULLUP;
 800b2cc:	4b09      	ldr	r3, [pc, #36]	; (800b2f4 <BSP_GPIO_Init+0x64>)
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	60da      	str	r2, [r3, #12]
    hgpio[0].peripheral_configuration.Speed = GPIO_SPEED_FREQ_LOW;
 800b2d2:	4b08      	ldr	r3, [pc, #32]	; (800b2f4 <BSP_GPIO_Init+0x64>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(hgpio[0].peripheral, &(hgpio[0].peripheral_configuration));
 800b2d8:	4b06      	ldr	r3, [pc, #24]	; (800b2f4 <BSP_GPIO_Init+0x64>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4908      	ldr	r1, [pc, #32]	; (800b300 <BSP_GPIO_Init+0x70>)
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fc f8e4 	bl	80074ac <HAL_GPIO_Init>
    hgpio[0].peripheral_is_initialized = 1;
 800b2e4:	4b03      	ldr	r3, [pc, #12]	; (800b2f4 <BSP_GPIO_Init+0x64>)
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	761a      	strb	r2, [r3, #24]
  }
 
  return ret;
 800b2ea:	687b      	ldr	r3, [r7, #4]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	2000064c 	.word	0x2000064c
 800b2f8:	40021000 	.word	0x40021000
 800b2fc:	48000400 	.word	0x48000400
 800b300:	20000650 	.word	0x20000650

0800b304 <BSP_GPIO_DeInit>:
  * @brief  DeInitialize GPIO
  * @param None
  * @retval BSP status
  */
int32_t BSP_GPIO_DeInit(void)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b30a:	2300      	movs	r3, #0
 800b30c:	607b      	str	r3, [r7, #4]

  /* Deconfigure GPIO pins : STBY_RESET_Pin */
  HAL_GPIO_DeInit(GPIOB, STBY_RESET_Pin);
 800b30e:	2120      	movs	r1, #32
 800b310:	4805      	ldr	r0, [pc, #20]	; (800b328 <BSP_GPIO_DeInit+0x24>)
 800b312:	f7fc fa4d 	bl	80077b0 <HAL_GPIO_DeInit>
  hgpio[0].peripheral_is_initialized = 0;
 800b316:	4b05      	ldr	r3, [pc, #20]	; (800b32c <BSP_GPIO_DeInit+0x28>)
 800b318:	2200      	movs	r2, #0
 800b31a:	761a      	strb	r2, [r3, #24]
  
  return ret;
 800b31c:	687b      	ldr	r3, [r7, #4]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	48000400 	.word	0x48000400
 800b32c:	2000064c 	.word	0x2000064c

0800b330 <BSP_GetPwrStage>:

int32_t BSP_GetPwrStage(STSPIN830_PowerStage_t *PwrStage)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b338:	2300      	movs	r3, #0
 800b33a:	60fb      	str	r3, [r7, #12]
  
  if (HAL_GPIO_ReadPin(EN_FAULT_GPIO_Port, EN_FAULT_Pin) == GPIO_PIN_RESET)
 800b33c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b340:	4808      	ldr	r0, [pc, #32]	; (800b364 <BSP_GetPwrStage+0x34>)
 800b342:	f7fc fb17 	bl	8007974 <HAL_GPIO_ReadPin>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d103      	bne.n	800b354 <BSP_GetPwrStage+0x24>
  {
    *PwrStage = STSPIN830_PWR_DISABLE;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	e002      	b.n	800b35a <BSP_GetPwrStage+0x2a>
  }
  else
  {
    *PwrStage = STSPIN830_PWR_ENABLE;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800b35a:	68fb      	ldr	r3, [r7, #12]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	48000400 	.word	0x48000400

0800b368 <BSP_SetPwrStage>:

int32_t BSP_SetPwrStage(STSPIN830_PowerStage_t PwrStage)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	4603      	mov	r3, r0
 800b370:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800b372:	2300      	movs	r3, #0
 800b374:	60fb      	str	r3, [r7, #12]
  
  if (PwrStage == STSPIN830_PWR_DISABLE)
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d106      	bne.n	800b38a <BSP_SetPwrStage+0x22>
  {
    LL_GPIO_SetPinPull(EN_FAULT_GPIO_Port, EN_FAULT_Pin, LL_GPIO_PULL_DOWN);
 800b37c:	2202      	movs	r2, #2
 800b37e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b382:	480b      	ldr	r0, [pc, #44]	; (800b3b0 <BSP_SetPwrStage+0x48>)
 800b384:	f7ff ff47 	bl	800b216 <LL_GPIO_SetPinPull>
 800b388:	e00c      	b.n	800b3a4 <BSP_SetPwrStage+0x3c>
  }
  else if (PwrStage == STSPIN830_PWR_ENABLE)
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d106      	bne.n	800b39e <BSP_SetPwrStage+0x36>
  {
    LL_GPIO_SetPinPull(EN_FAULT_GPIO_Port, EN_FAULT_Pin, LL_GPIO_PULL_UP);
 800b390:	2201      	movs	r2, #1
 800b392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b396:	4806      	ldr	r0, [pc, #24]	; (800b3b0 <BSP_SetPwrStage+0x48>)
 800b398:	f7ff ff3d 	bl	800b216 <LL_GPIO_SetPinPull>
 800b39c:	e002      	b.n	800b3a4 <BSP_SetPwrStage+0x3c>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b39e:	f06f 0301 	mvn.w	r3, #1
 800b3a2:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	48000400 	.word	0x48000400

0800b3b4 <BSP_GetStby>:

int32_t BSP_GetStby(STSPIN830_Standby_t *Stby)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]
  
  if (HAL_GPIO_ReadPin(STBY_RESET_GPIO_Port, STBY_RESET_Pin) == GPIO_PIN_RESET)
 800b3c0:	2120      	movs	r1, #32
 800b3c2:	4809      	ldr	r0, [pc, #36]	; (800b3e8 <BSP_GetStby+0x34>)
 800b3c4:	f7fc fad6 	bl	8007974 <HAL_GPIO_ReadPin>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d103      	bne.n	800b3d6 <BSP_GetStby+0x22>
  {
    *Stby = STSPIN830_STBY_ENABLE;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	701a      	strb	r2, [r3, #0]
 800b3d4:	e002      	b.n	800b3dc <BSP_GetStby+0x28>
  }
  else
  {
    *Stby = STSPIN830_STBY_DISABLE;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	48000400 	.word	0x48000400

0800b3ec <BSP_SetStby>:

int32_t BSP_SetStby(STSPIN830_Standby_t Stby)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60fb      	str	r3, [r7, #12]
  
  if (Stby == STSPIN830_STBY_DISABLE)
 800b3fa:	79fb      	ldrb	r3, [r7, #7]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d105      	bne.n	800b40c <BSP_SetStby+0x20>
  {
    HAL_GPIO_WritePin(STBY_RESET_GPIO_Port, STBY_RESET_Pin, GPIO_PIN_SET);
 800b400:	2201      	movs	r2, #1
 800b402:	2120      	movs	r1, #32
 800b404:	480a      	ldr	r0, [pc, #40]	; (800b430 <BSP_SetStby+0x44>)
 800b406:	f7fc facd 	bl	80079a4 <HAL_GPIO_WritePin>
 800b40a:	e00b      	b.n	800b424 <BSP_SetStby+0x38>
  }
  else if (Stby == STSPIN830_STBY_ENABLE)
 800b40c:	79fb      	ldrb	r3, [r7, #7]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d105      	bne.n	800b41e <BSP_SetStby+0x32>
  {
    HAL_GPIO_WritePin(STBY_RESET_GPIO_Port, STBY_RESET_Pin, GPIO_PIN_RESET);
 800b412:	2200      	movs	r2, #0
 800b414:	2120      	movs	r1, #32
 800b416:	4806      	ldr	r0, [pc, #24]	; (800b430 <BSP_SetStby+0x44>)
 800b418:	f7fc fac4 	bl	80079a4 <HAL_GPIO_WritePin>
 800b41c:	e002      	b.n	800b424 <BSP_SetStby+0x38>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b41e:	f06f 0301 	mvn.w	r3, #1
 800b422:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800b424:	68fb      	ldr	r3, [r7, #12]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	48000400 	.word	0x48000400

0800b434 <IHM16M1_MOTOR_DRIVER_Init>:
 * @brief  Initializes the motor driver
 * @param  Instance Motor driver instance
 * @retval BSP status
 */
int32_t IHM16M1_MOTOR_DRIVER_Init(void)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b43a:	2300      	movs	r3, #0
 800b43c:	607b      	str	r3, [r7, #4]
  
  if (Stspin830_Dev.is_initialized == 0)
 800b43e:	4b12      	ldr	r3, [pc, #72]	; (800b488 <IHM16M1_MOTOR_DRIVER_Init+0x54>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d111      	bne.n	800b46a <IHM16M1_MOTOR_DRIVER_Init+0x36>
  { 
    /* Configure the motor driver */
    Stspin830_Drv.Init        = IHM16M1_Init;
 800b446:	4b11      	ldr	r3, [pc, #68]	; (800b48c <IHM16M1_MOTOR_DRIVER_Init+0x58>)
 800b448:	4a11      	ldr	r2, [pc, #68]	; (800b490 <IHM16M1_MOTOR_DRIVER_Init+0x5c>)
 800b44a:	601a      	str	r2, [r3, #0]
    Stspin830_Drv.DeInit      = IHM16M1_DeInit;
 800b44c:	4b0f      	ldr	r3, [pc, #60]	; (800b48c <IHM16M1_MOTOR_DRIVER_Init+0x58>)
 800b44e:	4a11      	ldr	r2, [pc, #68]	; (800b494 <IHM16M1_MOTOR_DRIVER_Init+0x60>)
 800b450:	605a      	str	r2, [r3, #4]
    Stspin830_Drv.GetPwrStage = IHM16M1_GetPwrStage;
 800b452:	4b0e      	ldr	r3, [pc, #56]	; (800b48c <IHM16M1_MOTOR_DRIVER_Init+0x58>)
 800b454:	4a10      	ldr	r2, [pc, #64]	; (800b498 <IHM16M1_MOTOR_DRIVER_Init+0x64>)
 800b456:	609a      	str	r2, [r3, #8]
    Stspin830_Drv.SetPwrStage = IHM16M1_SetPwrStage;
 800b458:	4b0c      	ldr	r3, [pc, #48]	; (800b48c <IHM16M1_MOTOR_DRIVER_Init+0x58>)
 800b45a:	4a10      	ldr	r2, [pc, #64]	; (800b49c <IHM16M1_MOTOR_DRIVER_Init+0x68>)
 800b45c:	60da      	str	r2, [r3, #12]
    Stspin830_Drv.GetStby     = IHM16M1_GetStby;
 800b45e:	4b0b      	ldr	r3, [pc, #44]	; (800b48c <IHM16M1_MOTOR_DRIVER_Init+0x58>)
 800b460:	4a0f      	ldr	r2, [pc, #60]	; (800b4a0 <IHM16M1_MOTOR_DRIVER_Init+0x6c>)
 800b462:	611a      	str	r2, [r3, #16]
    Stspin830_Drv.SetStby     = IHM16M1_SetStby;
 800b464:	4b09      	ldr	r3, [pc, #36]	; (800b48c <IHM16M1_MOTOR_DRIVER_Init+0x58>)
 800b466:	4a0f      	ldr	r2, [pc, #60]	; (800b4a4 <IHM16M1_MOTOR_DRIVER_Init+0x70>)
 800b468:	615a      	str	r2, [r3, #20]
  }
  ret = Stspin830_Drv.Init();
 800b46a:	4b08      	ldr	r3, [pc, #32]	; (800b48c <IHM16M1_MOTOR_DRIVER_Init+0x58>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4798      	blx	r3
 800b470:	6078      	str	r0, [r7, #4]
  if (ret == BSP_ERROR_NONE)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d102      	bne.n	800b47e <IHM16M1_MOTOR_DRIVER_Init+0x4a>
  {
    Stspin830_Dev.is_initialized = 1;
 800b478:	4b03      	ldr	r3, [pc, #12]	; (800b488 <IHM16M1_MOTOR_DRIVER_Init+0x54>)
 800b47a:	2201      	movs	r2, #1
 800b47c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b47e:	687b      	ldr	r3, [r7, #4]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	20000668 	.word	0x20000668
 800b48c:	2000066c 	.word	0x2000066c
 800b490:	0800b291 	.word	0x0800b291
 800b494:	0800b305 	.word	0x0800b305
 800b498:	0800b331 	.word	0x0800b331
 800b49c:	0800b369 	.word	0x0800b369
 800b4a0:	0800b3b5 	.word	0x0800b3b5
 800b4a4:	0800b3ed 	.word	0x0800b3ed

0800b4a8 <IHM16M1_MOTOR_DRIVER_SetPwrStage>:
  Stspin830_Dev.power_stage = *PwrStage;
  return ret;
}

int32_t IHM16M1_MOTOR_DRIVER_SetPwrStage(STSPIN830_PowerStage_t PwrStage)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = Stspin830_Drv.SetPwrStage(PwrStage);
 800b4b2:	4b07      	ldr	r3, [pc, #28]	; (800b4d0 <IHM16M1_MOTOR_DRIVER_SetPwrStage+0x28>)
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	79fa      	ldrb	r2, [r7, #7]
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	4798      	blx	r3
 800b4bc:	60f8      	str	r0, [r7, #12]
  Stspin830_Dev.power_stage = PwrStage;
 800b4be:	4a05      	ldr	r2, [pc, #20]	; (800b4d4 <IHM16M1_MOTOR_DRIVER_SetPwrStage+0x2c>)
 800b4c0:	79fb      	ldrb	r3, [r7, #7]
 800b4c2:	7053      	strb	r3, [r2, #1]
  return ret;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	2000066c 	.word	0x2000066c
 800b4d4:	20000668 	.word	0x20000668

0800b4d8 <IHM16M1_MOTOR_DRIVER_SetStby>:
  Stspin830_Dev.standby = *Stby;
  return ret;
}

int32_t IHM16M1_MOTOR_DRIVER_SetStby(STSPIN830_Standby_t Stby)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	4603      	mov	r3, r0
 800b4e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = Stspin830_Drv.SetStby(Stby);
 800b4e2:	4b07      	ldr	r3, [pc, #28]	; (800b500 <IHM16M1_MOTOR_DRIVER_SetStby+0x28>)
 800b4e4:	695b      	ldr	r3, [r3, #20]
 800b4e6:	79fa      	ldrb	r2, [r7, #7]
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	4798      	blx	r3
 800b4ec:	60f8      	str	r0, [r7, #12]
  Stspin830_Dev.standby = Stby;
 800b4ee:	4a05      	ldr	r2, [pc, #20]	; (800b504 <IHM16M1_MOTOR_DRIVER_SetStby+0x2c>)
 800b4f0:	79fb      	ldrb	r3, [r7, #7]
 800b4f2:	7093      	strb	r3, [r2, #2]
  return ret;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	2000066c 	.word	0x2000066c
 800b504:	20000668 	.word	0x20000668

0800b508 <LL_USART_EnableIT_RXNE_RXFNE>:
{
 800b508:	b480      	push	{r7}
 800b50a:	b089      	sub	sp, #36	; 0x24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	e853 3f00 	ldrex	r3, [r3]
 800b51a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	f043 0320 	orr.w	r3, r3, #32
 800b522:	61fb      	str	r3, [r7, #28]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	69fa      	ldr	r2, [r7, #28]
 800b528:	61ba      	str	r2, [r7, #24]
 800b52a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52c:	6979      	ldr	r1, [r7, #20]
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	e841 2300 	strex	r3, r2, [r1]
 800b534:	613b      	str	r3, [r7, #16]
   return(result);
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1e9      	bne.n	800b510 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 800b53c:	bf00      	nop
 800b53e:	bf00      	nop
 800b540:	3724      	adds	r7, #36	; 0x24
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <LL_USART_EnableIT_TXE_TXFNF>:
{
 800b54a:	b480      	push	{r7}
 800b54c:	b089      	sub	sp, #36	; 0x24
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	e853 3f00 	ldrex	r3, [r3]
 800b55c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b564:	61fb      	str	r3, [r7, #28]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	69fa      	ldr	r2, [r7, #28]
 800b56a:	61ba      	str	r2, [r7, #24]
 800b56c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56e:	6979      	ldr	r1, [r7, #20]
 800b570:	69ba      	ldr	r2, [r7, #24]
 800b572:	e841 2300 	strex	r3, r2, [r1]
 800b576:	613b      	str	r3, [r7, #16]
   return(result);
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1e9      	bne.n	800b552 <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 800b57e:	bf00      	nop
 800b580:	bf00      	nop
 800b582:	3724      	adds	r7, #36	; 0x24
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <LL_USART_DisableIT_RXNE_RXFNE>:
{
 800b58c:	b480      	push	{r7}
 800b58e:	b089      	sub	sp, #36	; 0x24
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	e853 3f00 	ldrex	r3, [r3]
 800b59e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	f023 0320 	bic.w	r3, r3, #32
 800b5a6:	61fb      	str	r3, [r7, #28]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	69fa      	ldr	r2, [r7, #28]
 800b5ac:	61ba      	str	r2, [r7, #24]
 800b5ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b0:	6979      	ldr	r1, [r7, #20]
 800b5b2:	69ba      	ldr	r2, [r7, #24]
 800b5b4:	e841 2300 	strex	r3, r2, [r1]
 800b5b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1e9      	bne.n	800b594 <LL_USART_DisableIT_RXNE_RXFNE+0x8>
}
 800b5c0:	bf00      	nop
 800b5c2:	bf00      	nop
 800b5c4:	3724      	adds	r7, #36	; 0x24
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr

0800b5ce <LL_USART_DisableIT_TXE_TXFNF>:
{
 800b5ce:	b480      	push	{r7}
 800b5d0:	b089      	sub	sp, #36	; 0x24
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	e853 3f00 	ldrex	r3, [r3]
 800b5e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5e8:	61fb      	str	r3, [r7, #28]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	69fa      	ldr	r2, [r7, #28]
 800b5ee:	61ba      	str	r2, [r7, #24]
 800b5f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f2:	6979      	ldr	r1, [r7, #20]
 800b5f4:	69ba      	ldr	r2, [r7, #24]
 800b5f6:	e841 2300 	strex	r3, r2, [r1]
 800b5fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1e9      	bne.n	800b5d6 <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 800b602:	bf00      	nop
 800b604:	bf00      	nop
 800b606:	3724      	adds	r7, #36	; 0x24
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800b61c:	78fa      	ldrb	r2, [r7, #3]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b622:	bf00      	nop
 800b624:	370c      	adds	r7, #12
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <UFCP_Init>:
static const uint16_t UFCP_Usart_Timeout_stop = 2;

/* Functions ---------------------------------------------------------*/

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b082      	sub	sp, #8
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4618      	mov	r0, r3
 800b63a:	f7ff fd63 	bl	800b104 <FCP_Init>
}
 800b63e:	bf00      	nop
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
	...

0800b648 <UFCP_RX_IRQ_Handler>:

/*
 *
 */
__weak void * UFCP_RX_IRQ_Handler( UFCP_Handle_t * pHandle, unsigned short rx_data )
{
 800b648:	b590      	push	{r4, r7, lr}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	460b      	mov	r3, r1
 800b652:	807b      	strh	r3, [r7, #2]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800b654:	4b4b      	ldr	r3, [pc, #300]	; (800b784 <UFCP_RX_IRQ_Handler+0x13c>)
 800b656:	617b      	str	r3, [r7, #20]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	613b      	str	r3, [r7, #16]
  uint8_t error_code;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 8088 	beq.w	800b778 <UFCP_RX_IRQ_Handler+0x130>
  {
    uint8_t rx_byte = (uint8_t) rx_data;
 800b668:	887b      	ldrh	r3, [r7, #2]
 800b66a:	73fb      	strb	r3, [r7, #15]

    switch ( pBaseHandle->RxFrameLevel )
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800b672:	2b00      	cmp	r3, #0
 800b674:	d002      	beq.n	800b67c <UFCP_RX_IRQ_Handler+0x34>
 800b676:	2b01      	cmp	r3, #1
 800b678:	d013      	beq.n	800b6a2 <UFCP_RX_IRQ_Handler+0x5a>
 800b67a:	e029      	b.n	800b6d0 <UFCP_RX_IRQ_Handler+0x88>
    {
      case 0: // First Byte received --> The Code
        pBaseHandle->RxFrame.Code = rx_byte;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	7bfa      	ldrb	r2, [r7, #15]
 800b680:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
        /* Need to ask the caller to start our timeout... TODO: Is this really useful? */
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800b684:	4b40      	ldr	r3, [pc, #256]	; (800b788 <UFCP_RX_IRQ_Handler+0x140>)
 800b686:	617b      	str	r3, [r7, #20]

        /* Start Rx Timeout */
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	8a1a      	ldrh	r2, [r3, #16]
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	825a      	strh	r2, [r3, #18]
        pBaseHandle->RxFrameLevel++;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800b696:	3301      	adds	r3, #1
 800b698:	b2da      	uxtb	r2, r3
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        break;
 800b6a0:	e06a      	b.n	800b778 <UFCP_RX_IRQ_Handler+0x130>

      case 1: // Second Byte received --> Size of the payload
        pBaseHandle->RxFrame.Size = rx_byte;
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	7bfa      	ldrb	r2, [r7, #15]
 800b6a6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
        pBaseHandle->RxFrameLevel++;
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	b2da      	uxtb	r2, r3
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b6c0:	b25b      	sxtb	r3, r3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	da57      	bge.n	800b776 <UFCP_RX_IRQ_Handler+0x12e>
        { /* Garbage data received decoded with a payload size that exceeds max*/
          pBaseHandle->RxFrameLevel =0 ;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        }
        break;
 800b6ce:	e052      	b.n	800b776 <UFCP_RX_IRQ_Handler+0x12e>

      default: // In the payload or the "CRC"
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	db11      	blt.n	800b706 <UFCP_RX_IRQ_Handler+0xbe>
        {
          // read byte is for the payload
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800b6e8:	3b02      	subs	r3, #2
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	7bfa      	ldrb	r2, [r7, #15]
 800b6f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
          pBaseHandle->RxFrameLevel++;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 800b704:	e038      	b.n	800b778 <UFCP_RX_IRQ_Handler+0x130>
        }
        else
        {
          // read byte is for the "CRC"
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	7bfa      	ldrb	r2, [r7, #15]
 800b70a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

          /* Need to ask the caller to stop our timeout... TODO: Is this really useful? */
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800b70e:	4b1f      	ldr	r3, [pc, #124]	; (800b78c <UFCP_RX_IRQ_Handler+0x144>)
 800b710:	617b      	str	r3, [r7, #20]

          /* Stop Rx Timeout */
          pBaseHandle->RxTimeoutCountdown = 0;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	2200      	movs	r2, #0
 800b716:	825a      	strh	r2, [r3, #18]
          /* Disable the reception IRQ */
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b71e:	4618      	mov	r0, r3
 800b720:	f7ff ff34 	bl	800b58c <LL_USART_DisableIT_RXNE_RXFNE>
          /* Indicate the reception is complete. */
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	2200      	movs	r2, #0
 800b728:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

          /* Check the Control Sum */
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	3399      	adds	r3, #153	; 0x99
 800b730:	4618      	mov	r0, r3
 800b732:	f7ff fd36 	bl	800b1a2 <FCP_CalcCRC>
 800b736:	4603      	mov	r3, r0
 800b738:	461a      	mov	r2, r3
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800b740:	429a      	cmp	r2, r3
 800b742:	d10e      	bne.n	800b762 <UFCP_RX_IRQ_Handler+0x11a>
          {
            /* OK. the frame is considered correct. Let's forward to client. */
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	689c      	ldr	r4, [r3, #8]
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	6818      	ldr	r0, [r3, #0]
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	f893 1099 	ldrb.w	r1, [r3, #153]	; 0x99
                                                      pBaseHandle->RxFrame.Code,
                                                      pBaseHandle->RxFrame.Buffer,
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	f103 029b 	add.w	r2, r3, #155	; 0x9b
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b75e:	47a0      	blx	r4
 800b760:	e00a      	b.n	800b778 <UFCP_RX_IRQ_Handler+0x130>
                                                      pBaseHandle->RxFrame.Size );
          }
          else
          {
            error_code = FCP_MSG_RX_BAD_CRC;
 800b762:	230a      	movs	r3, #10
 800b764:	73bb      	strb	r3, [r7, #14]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b766:	f107 020e 	add.w	r2, r7, #14
 800b76a:	2301      	movs	r3, #1
 800b76c:	21ff      	movs	r1, #255	; 0xff
 800b76e:	6938      	ldr	r0, [r7, #16]
 800b770:	f000 f8a2 	bl	800b8b8 <UFCP_Send>
 800b774:	e000      	b.n	800b778 <UFCP_RX_IRQ_Handler+0x130>
        break;
 800b776:	bf00      	nop
          }
        }
    } /* end of switch ( pBaseHandle->RxFrameLevel ) */
  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState ) */

  return ret_val;
 800b778:	697b      	ldr	r3, [r7, #20]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	371c      	adds	r7, #28
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd90      	pop	{r4, r7, pc}
 800b782:	bf00      	nop
 800b784:	0800ba38 	.word	0x0800ba38
 800b788:	0800ba3a 	.word	0x0800ba3a
 800b78c:	0800ba3c 	.word	0x0800ba3c

0800b790 <UFCP_TX_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	60bb      	str	r3, [r7, #8]

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d04e      	beq.n	800b844 <UFCP_TX_IRQ_Handler+0xb4>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <UFCP_TX_IRQ_Handler+0x26>
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d004      	beq.n	800b7be <UFCP_TX_IRQ_Handler+0x2e>
 800b7b4:	e007      	b.n	800b7c6 <UFCP_TX_IRQ_Handler+0x36>
    {
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	7d1b      	ldrb	r3, [r3, #20]
 800b7ba:	81fb      	strh	r3, [r7, #14]
        break;
 800b7bc:	e018      	b.n	800b7f0 <UFCP_TX_IRQ_Handler+0x60>

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	7d5b      	ldrb	r3, [r3, #21]
 800b7c2:	81fb      	strh	r3, [r7, #14]
        break;
 800b7c4:	e014      	b.n	800b7f0 <UFCP_TX_IRQ_Handler+0x60>

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	7d5b      	ldrb	r3, [r3, #21]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	db08      	blt.n	800b7e8 <UFCP_TX_IRQ_Handler+0x58>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b7dc:	3b02      	subs	r3, #2
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	7d9b      	ldrb	r3, [r3, #22]
 800b7e4:	81fb      	strh	r3, [r7, #14]
 800b7e6:	e003      	b.n	800b7f0 <UFCP_TX_IRQ_Handler+0x60>
        }
        else
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800b7ee:	81fb      	strh	r3, [r7, #14]
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b7f6:	89fa      	ldrh	r2, [r7, #14]
 800b7f8:	b2d2      	uxtb	r2, r2
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7ff ff07 	bl	800b610 <LL_USART_TransmitData8>

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	7d5b      	ldrb	r3, [r3, #21]
 800b806:	3301      	adds	r3, #1
 800b808:	68ba      	ldr	r2, [r7, #8]
 800b80a:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 800b80e:	4293      	cmp	r3, r2
 800b810:	db08      	blt.n	800b824 <UFCP_TX_IRQ_Handler+0x94>
    {
      pBaseHandle->TxFrameLevel++;
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b818:	3301      	adds	r3, #1
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800b822:	e00f      	b.n	800b844 <UFCP_TX_IRQ_Handler+0xb4>
      LL_USART_DisableIT_TXE(pHandle->USARTx);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7ff fecf 	bl	800b5ce <LL_USART_DisableIT_TXE_TXFNF>
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2200      	movs	r2, #0
 800b834:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	6812      	ldr	r2, [r2, #0]
 800b840:	4610      	mov	r0, r2
 800b842:	4798      	blx	r3
}
 800b844:	bf00      	nop
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <UFCP_OVR_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_OVR_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	60fb      	str	r3, [r7, #12]
  uint8_t error_code;

  error_code = UFCP_MSG_OVERRUN;
 800b858:	2308      	movs	r3, #8
 800b85a:	72fb      	strb	r3, [r7, #11]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b85c:	f107 020b 	add.w	r2, r7, #11
 800b860:	2301      	movs	r3, #1
 800b862:	21ff      	movs	r1, #255	; 0xff
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f000 f827 	bl	800b8b8 <UFCP_Send>

}
 800b86a:	bf00      	nop
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <UFCP_Receive>:
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );

}

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b084      	sub	sp, #16
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b880:	2b00      	cmp	r3, #0
 800b882:	d112      	bne.n	800b8aa <UFCP_Receive+0x38>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	60bb      	str	r3, [r7, #8]

    pHandle->RxFrameLevel = 0;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff fe32 	bl	800b508 <LL_USART_EnableIT_RXNE_RXFNE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	73fb      	strb	r3, [r7, #15]
 800b8a8:	e001      	b.n	800b8ae <UFCP_Receive+0x3c>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret_val;
 800b8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3710      	adds	r7, #16
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b088      	sub	sp, #32
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	607a      	str	r2, [r7, #4]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	72fb      	strb	r3, [r7, #11]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	72bb      	strb	r3, [r7, #10]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d133      	bne.n	800b93e <UFCP_Send+0x86>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	617b      	str	r3, [r7, #20]
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	3316      	adds	r3, #22
 800b8de:	61bb      	str	r3, [r7, #24]

    pHandle->TxFrame.Code = code;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	7afa      	ldrb	r2, [r7, #11]
 800b8e4:	751a      	strb	r2, [r3, #20]
    pHandle->TxFrame.Size = size;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	7aba      	ldrb	r2, [r7, #10]
 800b8ea:	755a      	strb	r2, [r3, #21]
    while ( size-- ) *dest++ = *buffer++;
 800b8ec:	e007      	b.n	800b8fe <UFCP_Send+0x46>
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	1c53      	adds	r3, r2, #1
 800b8f2:	607b      	str	r3, [r7, #4]
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	1c59      	adds	r1, r3, #1
 800b8f8:	61b9      	str	r1, [r7, #24]
 800b8fa:	7812      	ldrb	r2, [r2, #0]
 800b8fc:	701a      	strb	r2, [r3, #0]
 800b8fe:	7abb      	ldrb	r3, [r7, #10]
 800b900:	1e5a      	subs	r2, r3, #1
 800b902:	72ba      	strb	r2, [r7, #10]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1f2      	bne.n	800b8ee <UFCP_Send+0x36>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3314      	adds	r3, #20
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff fc48 	bl	800b1a2 <FCP_CalcCRC>
 800b912:	4603      	mov	r3, r0
 800b914:	461a      	mov	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b932:	4618      	mov	r0, r3
 800b934:	f7ff fe09 	bl	800b54a <LL_USART_EnableIT_TXE_TXFNF>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800b938:	2302      	movs	r3, #2
 800b93a:	77fb      	strb	r3, [r7, #31]
 800b93c:	e001      	b.n	800b942 <UFCP_Send+0x8a>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800b93e:	2301      	movs	r3, #1
 800b940:	77fb      	strb	r3, [r7, #31]
  }

  return ret_val;
 800b942:	7ffb      	ldrb	r3, [r7, #31]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3720      	adds	r7, #32
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <__libc_init_array>:
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	4d0d      	ldr	r5, [pc, #52]	; (800b9a0 <__libc_init_array+0x38>)
 800b96c:	4c0d      	ldr	r4, [pc, #52]	; (800b9a4 <__libc_init_array+0x3c>)
 800b96e:	1b64      	subs	r4, r4, r5
 800b970:	10a4      	asrs	r4, r4, #2
 800b972:	2600      	movs	r6, #0
 800b974:	42a6      	cmp	r6, r4
 800b976:	d109      	bne.n	800b98c <__libc_init_array+0x24>
 800b978:	4d0b      	ldr	r5, [pc, #44]	; (800b9a8 <__libc_init_array+0x40>)
 800b97a:	4c0c      	ldr	r4, [pc, #48]	; (800b9ac <__libc_init_array+0x44>)
 800b97c:	f000 f820 	bl	800b9c0 <_init>
 800b980:	1b64      	subs	r4, r4, r5
 800b982:	10a4      	asrs	r4, r4, #2
 800b984:	2600      	movs	r6, #0
 800b986:	42a6      	cmp	r6, r4
 800b988:	d105      	bne.n	800b996 <__libc_init_array+0x2e>
 800b98a:	bd70      	pop	{r4, r5, r6, pc}
 800b98c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b990:	4798      	blx	r3
 800b992:	3601      	adds	r6, #1
 800b994:	e7ee      	b.n	800b974 <__libc_init_array+0xc>
 800b996:	f855 3b04 	ldr.w	r3, [r5], #4
 800b99a:	4798      	blx	r3
 800b99c:	3601      	adds	r6, #1
 800b99e:	e7f2      	b.n	800b986 <__libc_init_array+0x1e>
 800b9a0:	0800ba48 	.word	0x0800ba48
 800b9a4:	0800ba48 	.word	0x0800ba48
 800b9a8:	0800ba48 	.word	0x0800ba48
 800b9ac:	0800ba4c 	.word	0x0800ba4c

0800b9b0 <memset>:
 800b9b0:	4402      	add	r2, r0
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d100      	bne.n	800b9ba <memset+0xa>
 800b9b8:	4770      	bx	lr
 800b9ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b9be:	e7f9      	b.n	800b9b4 <memset+0x4>

0800b9c0 <_init>:
 800b9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c2:	bf00      	nop
 800b9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9c6:	bc08      	pop	{r3}
 800b9c8:	469e      	mov	lr, r3
 800b9ca:	4770      	bx	lr

0800b9cc <_fini>:
 800b9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ce:	bf00      	nop
 800b9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9d2:	bc08      	pop	{r3}
 800b9d4:	469e      	mov	lr, r3
 800b9d6:	4770      	bx	lr
